<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>冰岩2022秋招实习记 - 1003</title>
    <link href="/2022/10/03/bingyan2022autumn-1003/"/>
    <url>/2022/10/03/bingyan2022autumn-1003/</url>
    
    <content type="html"><![CDATA[<h2 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h2><ol><li>完整阅读文档，了解 <code>Oauth2.0</code> 的设计规范</li><li>完成 <code>Refresh Token</code> 相关协议</li><li>根据文档将协议修改的符合规范</li></ol><h2 id="项目进程"><a href="#项目进程" class="headerlink" title="项目进程"></a>项目进程</h2><ol><li>实现了 <code>refresh token</code> 的协议内容</li><li>根据文档内容，“尽可能”使 <code>request</code> 和 <code>response</code> 符合规范</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天花了一上午外加下午的部分时间把 <code>Oauth2.0</code> 的官方文档基本上通览了一遍（除了 <code>Authorization Code</code> 模式以外剩下的三种模式没有读），虽然都是英文有点艰难，也不是所有地方都读懂了，但是读完还是感觉收获很大，一方面比较完整地了解了设计规范，也尽可能地去完善了自己的协议；另一方面，阅读官方文档过程中，也解答了一些之前的疑惑，因为发现官方文档讲的比较清楚，也比较严谨。</p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
      <category>冰岩2022秋招</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>冰岩2022秋招实习日记 - 1002</title>
    <link href="/2022/10/02/bingyan2022autumn-1002/"/>
    <url>/2022/10/02/bingyan2022autumn-1002/</url>
    
    <content type="html"><![CDATA[<h2 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h2><ol><li>阅读文档，了解 <code>Oauth2.0</code> 服务的原理</li><li>进行 <code>Oauth2.0</code> 服务的实现设计</li><li>完成阶段二：实现使用 Authorization Code模式的OAuth2.0服务</li></ol><h2 id="项目进程"><a href="#项目进程" class="headerlink" title="项目进程"></a>项目进程</h2><ol><li>在 <code>django</code> 中新建应用 <code>oauth</code></li><li>实现了 <code>Oauth2.0</code> 服务的几个基本功能：<code>Authorization Grant</code>, <code>Access Token</code>, <code>Verify Token</code></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p><code>OAuth 2.0</code> 是目前最流行的授权机制，用来授权第三方应用，获取用户数据。</p></li><li><p><code>Oauth 2.0</code> 有获得令牌的四种授权方式（authorization grant）： </p><blockquote><ul><li>授权码（authorization-code）</li><li>隐藏式（implicit）</li><li>密码式（password）：</li><li>客户端凭证（client credentials）</li></ul></blockquote></li><li><p>阶段二任务中实现的是第一种授权方式：授权码（authorization code）。其完整的授权流程主要包括以下几个步骤：</p><blockquote><ol><li>A 打开 B 的授权页面</li><li>验证用户是合法的之后，生成一个 authorization code，然后通过 302 跳转的方式，把这个 code 发送给 A</li><li>A 用这个 code 调用 B 的 api，获得 access token</li><li>A 用 access token 访问资源</li></ol></blockquote></li><li><p>本项目中实现了使用authorization code模式的Oauth2.0服务的几个api， 详见 <a href="https://github.com/patricklai46/bangumoe">bangumoe</a> 的 <code>README.md</code>。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
      <category>冰岩2022秋招</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>冰岩2022秋招实习日记 - 1001</title>
    <link href="/2022/10/01/bingyan2022autumn-1001/"/>
    <url>/2022/10/01/bingyan2022autumn-1001/</url>
    
    <content type="html"><![CDATA[<h2 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h2><ol><li>熟悉 <code>django</code> 框架的基本构造以及操作</li><li>将 <code>django</code> 项目连接到 <code>MySQL</code> 数据库</li><li>实现阶段一的基础功能</li></ol><h2 id="项目进程"><a href="#项目进程" class="headerlink" title="项目进程"></a>项目进程</h2><ol><li>新建并初始化 <code>django</code> 项目 <code>oidc</code></li><li>将项目 <code>oidc</code> 连接到 <code>MySQL</code> 数据库中</li><li>完成 <code>user</code> 应用中 <code>User</code> 类的构建，包括 <code>id</code>, <code>username</code>, <code>password</code>, <code>email</code>, <code>intro</code> 五个字段</li><li>完成 <code>注册</code>，<code>登录</code> 和 <code>修改信息</code> 三个基本操作的 <code>api</code></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><code>django</code> 的一个项目中包含了若干个应用，每个应用相对独立，可以迁移到不同项目中，例如项目 <code>oidc</code> 中包含 <code>user</code> 这个应用</li><li><code>django</code> 的基本核心是 <code>urls.py</code>, <code>models.py</code> 和 <code>views.py</code><blockquote><p><code>urls.py</code> 负责识别发送过来的 <code>request</code>，并把这些请求分派给 <code>views.py</code> 中相应的请求相应函数。而在 <code>views.py</code> 中函数的执行过程中，可能会调用到数据库的数据，这时候就会调用 <code>models.py</code>。</p></blockquote></li><li>三个基本操作的 <code>api</code> 详见 <a href="https://github.com/patricklai46/bangumoe">bangumoe</a> 的 <code>README.md</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
      <category>冰岩2022秋招</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>冰岩2022秋招实习日记 - 0930</title>
    <link href="/2022/09/30/bingyan2022autumn-0930/"/>
    <url>/2022/09/30/bingyan2022autumn-0930/</url>
    
    <content type="html"><![CDATA[<h2 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h2><ol><li><p>学习git的基本使用：<code>commit</code>, <code>push</code> 等</p></li><li><p>速通python基本语法</p></li></ol><h2 id="项目进程"><a href="#项目进程" class="headerlink" title="项目进程"></a>项目进程</h2><ol><li><p>确定选题 <code>OIDC服务</code></p></li><li><p>新建github项目 <code>bangumoe</code> （新建文件夹）</p></li><li><p>确定项目框架 <code>python</code> + <code>django</code></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
      <category>冰岩2022秋招</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>git命令总结</title>
    <link href="/2022/09/20/git%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <url>/2022/09/20/git%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><p><strong>创建仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init<br></code></pre></td></tr></table></figure><p><strong>添加文件到仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add filename<br></code></pre></td></tr></table></figure><p><strong>把文件提交到仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit -m &quot;description&quot;<br></code></pre></td></tr></table></figure><h1 id="时光机穿梭"><a href="#时光机穿梭" class="headerlink" title="时光机穿梭"></a>时光机穿梭</h1><p><strong>查看仓库状态</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git status<br></code></pre></td></tr></table></figure><p><strong>显示已写入暂存区和已经被修改但尚未写入暂存区文件的区别</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git diff<br></code></pre></td></tr></table></figure><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p><strong>查看历史记录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log<br>git log --pretty=oneline #输出简洁信息<br></code></pre></td></tr></table></figure><p><strong>版本回退</strong></p><p><code>HEAD</code>表示当前版本，<code>HEAD^</code>表示上一个版本，<code>HEAD^^</code>是上上个版本，前n个版本表示为<code>HEAD~n</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reset --hard HEAD^<br></code></pre></td></tr></table></figure><p><strong>显示可引用的历史版本记录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reflog<br></code></pre></td></tr></table></figure><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p><strong>丢弃工作区的修改</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -- filename<br></code></pre></td></tr></table></figure><p><strong>撤销暂存区修改并回退到工作区</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reset HEAD filename<br></code></pre></td></tr></table></figure><p><strong>版本回退</strong></p><p>参考上一节</p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p><strong>删除工作区文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm filename<br></code></pre></td></tr></table></figure><p><strong>从版本库删除文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git rm filename<br></code></pre></td></tr></table></figure><p><strong>从版本库恢复误删的文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -- filename<br></code></pre></td></tr></table></figure><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><p>即先有本地库，再关联到远程库。</p><p><strong>关联远程库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote add origin git@github.com:useername/repository.git<br></code></pre></td></tr></table></figure><p><strong>推送到远程库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push -u origin master # 第一次推送，将本地库与远程库关联起来，以后提交可简化命令<br>git push -u origin master # 把本地master分支的最新修改推送至GitHub<br></code></pre></td></tr></table></figure><h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><p>创建远程库后，从远程库克隆。</p><p><strong>从远程库克隆</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone git@github.com:username/repository.git #ssh<br>git clone https://github.com/username/repository.git<br></code></pre></td></tr></table></figure><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><h2 id="创建于合并分支"><a href="#创建于合并分支" class="headerlink" title="创建于合并分支"></a>创建于合并分支</h2><p><strong>创建并切换分支</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -b dev<br><span class="hljs-meta prompt_"># </span><span class="language-bash">等价于以下两条命令</span><br>git branch dev # 创建分支<br>git checkout dev # 切换分支<br></code></pre></td></tr></table></figure><p><strong>查看当前分支</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch</span><br>* dev<br>  mastrt<br></code></pre></td></tr></table></figure><p><strong>合并分支</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git merge dev<br></code></pre></td></tr></table></figure><p><strong>删除分支</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch -d dev<br></code></pre></td></tr></table></figure><p><strong>切换分支</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git switch -c dev # 创建并切换分支<br>git switch master # 切换分支<br></code></pre></td></tr></table></figure><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p><img src="https://s2.loli.net/2022/09/26/sLYSTUw8nPlu1JA.png" alt="0.png"></p><p>当两个分支均存在提交时，Git无法执行“快速合并”，必须手动解决冲突后再提交。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git merge feature1</span><br>Auto-merging readme.txt<br>CONFLICT (content): Merge conflict in readme.txt<br>Automatic merge failed; fix conflicts and then commit the result.<br></code></pre></td></tr></table></figure><p><strong>查看冲突内容</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git status</span><br>On branch master<br>Your branch is ahead of &#x27;origin/master&#x27; by 2 commits.<br>  (use &quot;git push&quot; to publish your local commits)<br><br>You have unmerged paths.<br>  (fix conflicts and run &quot;git commit&quot;)<br>  (use &quot;git merge --abort&quot; to abort the merge)<br><br>Unmerged paths:<br>  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)<br><br>both modified:   readme.txt<br><br>no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)<br></code></pre></td></tr></table></figure><p>手动修改后即可提交。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git add readme.txt</span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit -m <span class="hljs-string">&quot;conflict fixed&quot;</span></span><br>[master cf810e4] conflict fixed<br></code></pre></td></tr></table></figure><p><strong>查看分支合并情况</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log --graph --pretty=oneline --abbrev-commit<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/09/26/zyisftAlWMVnTka.png" alt="0 (1).png"></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ZJOI2019]线段树 - 线段树、dp</title>
    <link href="/2020/06/18/ZJOI2019%E7%BA%BF%E6%AE%B5%E6%A0%91-%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%81dp/"/>
    <url>/2020/06/18/ZJOI2019%E7%BA%BF%E6%AE%B5%E6%A0%91-%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%81dp/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>现在可怜手上有一棵 $[1,n]$ 上的线段树，编号为 $1$。这棵线段树上的所有节点的 $tag$ 均为 $0$。接下来可怜进行了 $m$ 次操作，操作有两种：</p><ul><li><p>$1\ l\ r$，假设可怜当前手上有 $t$ 棵线段树，可怜会把每棵线段树复制两份（$tag$ 数组也一起复制），原先编号为 $i$ 的线段树复制得到的两棵编号为 $2i-1$ 与 $2i$，在复制结束后，可怜手上一共有 $2t$ 棵线段树。接着，可怜会对所有编号为奇数的线段树进行一次 $\operatorname{Modify}(root,1,n,l,r)$。</p></li><li><p>$2$，可怜定义一棵线段树的权值为它上面有多少个节点 $tag$ 为 $1$。可怜想要知道她手上所有线段树的权值和是多少。</p></li></ul><p>$n,m \le 10^5.$</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>经过 $k$ 次复制后，会有 $2^k$ 棵线段树，但是仔细观察后会发现，这 $2^k$ 棵线段树对应的正是 $k$ 次操作集合的所有可能子集。</p><p>继续分析，可以发现其实每次操作时，线段树上的点只有四类：</p><p><img src="https://s1.ax1x.com/2020/06/18/NZ4cmd.png" alt="NZ4cmd.png"></p><ol><li>红色点：会被访问到，标记被下放的节点</li><li>黑色点：会被访问并且修改的节点</li><li>灰色点：会被访问到，未被修改但可能会有标记下放的节点</li><li>白色点：不会被访问到的点</li></ol><p><del>容易</del>想到一个 $\text{dp}$，设 $f_{u,i}$ 为节点 $u$ 在第 $i$ 次修改后 $tag$ 为 $1$ 的节点的个数，但是这样会发现灰色点无法转移，因为并不知道 $u$ 到根节点的路径上是否有 $tag$ 为 $1$ 的节点，使得其 $tag$ 能下放到灰色点上。</p><p>于是索性将不知道的东西定义成状态，设 $g_{u，i}$ 表示节点 $u$ 在第 $i$ 次修改后从 $u$ 到根节点的路径上有多少个至少有一个 $tag$ 为 $1$ 的点。</p><p>下面考虑如何进行转移：</p><ol><li><p><strong>红色点：</strong> 有一半点的标记会被下放，所以 $f$ 不变，同时由于红色点到根路径的所有点标记都会被下放，所以 $g$ 也不变。<br>$$<br>\begin{cases}<br>f_{u,i} &#x3D; f_{u,i-1} \<br>g_{u,i} &#x3D; g_{u,i-1} \<br>\end{cases}<br>$$</p></li><li><p><strong>黑色点：</strong> 因为有一半的点会被修改，因此 $f,g$ 的贡献都翻倍。<br>$$<br>\begin{cases}<br>f_{u,i} &#x3D; f_{u,i-1} + 2^{i-1} \<br>g_{u,i} &#x3D; g_{u,i-1} + 2^{i-1} \<br>\end{cases}<br>$$</p></li><li><p><strong>灰色点：</strong> 这类点需要到根路径有 $tag$ 为 $1$ 的点才能被下放从而使自身的 $tag$ 变为 $1$，所以 $f$ 直接利用 $g$ 转移即可，而 $g$ 本身并无变化，但由于线段树翻倍的影响，也随之翻倍。<br>$$<br>\begin{cases}<br>f_{u,i} &#x3D; f_{u,i-1} + g_{u,i-1} \<br>g_{u,i} &#x3D; g_{u,i-1} + g_{u,i-1} \<br>\end{cases}<br>$$</p></li><li><p><strong>白色点：</strong> 这类点没有进行任何操作，所以 $f,g$ 直接随着线段树翻倍而翻倍即可。<br>$$<br>\begin{cases}<br>f_{u,i} &#x3D; f_{u,i-1} + f_{u,i-1} \<br>g_{u,i} &#x3D; g_{u,i-1} + g_{u,i-1} \<br>\end{cases}<br>$$</p></li></ol><p>前三类点一次都可以在 $O(\log n)$ 的内修改完成，而第四类点的一次修改是 $O(n)$ 的，所以还需要打标记。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线段树</tag>
      
      <tag>省选</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[十二省联考2019]皮配 - 背包、dp、计数</title>
    <link href="/2020/06/17/%E5%8D%81%E4%BA%8C%E7%9C%81%E8%81%94%E8%80%832019%E7%9A%AE%E9%85%8D-%E8%83%8C%E5%8C%85%E3%80%81dp%E3%80%81%E8%AE%A1%E6%95%B0/"/>
    <url>/2020/06/17/%E5%8D%81%E4%BA%8C%E7%9C%81%E8%81%94%E8%80%832019%E7%9A%AE%E9%85%8D-%E8%83%8C%E5%8C%85%E3%80%81dp%E3%80%81%E8%AE%A1%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p><a href="https://www.luogu.com.cn/problem/P5289">题面</a></p><p><strong>简化版题面：</strong></p><p>有 $c$ 个豆荚，共 $n$ 颗豆子，每颗豆子都有自己的重量，现在需要将给豆子设定为（黄色&#x2F;绿色，圆粒&#x2F;皱粒），要求满足以下条件：</p><ol><li><p>给定这四种性状的阀值 $C0,C1,D0,D1$，要求为这种性状的豆子重量和不能超过该阀值。</p></li><li><p>与此同时，这 $n$ 颗豆子中存在 $k$ 颗顽皮豆，顽皮豆都有自己的想法，比如拒绝成为（黄圆&#x2F;黄皱&#x2F;绿圆&#x2F;绿皱）。</p></li><li><p>同一个豆荚里的豆子必须<strong>同时为黄色</strong>或<strong>同时为绿色</strong>。</p></li></ol><p>求有多少种给豆子设定的方案，答案对 $998244353$ 取模。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p><del>本题只考查了联赛级别的知识点背包，很普及组吧。好评！XD</del></p><h2 id="算法一-暴力"><a href="#算法一-暴力" class="headerlink" title="算法一 暴力"></a>算法一 暴力</h2><p>纯暴力。</p><p>设 $f_{i,0&#x2F;1,x,y,z}$ 为第 $i$ 个学校选择的是红&#x2F;蓝阵营，前三位导师分别有 $x,y,z$ 个选手的方案数，然后枚举每个学校进行转移即可。复杂度 $O(nM^3)$，预计得分 $30pts+$。</p><p><a href="https://loj.ac/submission/838780">代码</a></p><p>其实并不需要设三维的 $\text{dp}$，只需设状态 $f_{i,0&#x2F;1,x,y}$ 表示第 $i$ 个学校选择的是红&#x2F;蓝阵营，选择蓝阵营的有 $x$ 人，鸭派系的有 $y$ 人，因为一个选手必定属于其中一个阵营&#x2F;派系，复杂度 $O(nM^2)$，预计得分 $50pts$。</p><p><a href="https://loj.ac/submission/838799">代码</a></p><h2 id="算法二-k-x3D-0"><a href="#算法二-k-x3D-0" class="headerlink" title="算法二 $k&#x3D;0$"></a>算法二 $k&#x3D;0$</h2><p>考虑 $k&#x3D;0$ 的情况。</p><p>此时任何学校都没有导师的限制，可以发现先确定阵营再确定派系，与同时确定阵营与派系（即直接确定某位导师）所得到的方案数是等价的。（类似于生物里的两对相对性状？）</p><p>设 $f_{i,1&#x2F;0,j}$ 为第 $i$ 个学校选择红&#x2F;蓝阵营，且前 $i$ 个学校选择蓝阵营的有 $j$ 个人的方案数，$g_{i,j}$ 为前 $i$ 个学校选择鸭派系的有 $j$ 个人的方案数，那么分别计算出来后，进行合并，即总方案数为</p><p>$$<br>\sum \limits_{i&#x3D;S-C_1}^{C_0} \sum \limits_{i&#x3D;D_1}^{D_0} (f_{n,0,i} + f_{n,1,i}) \times g_{n,j}<br>$$</p><p>其实本质上就是<strong>背包及背包合并</strong>。</p><p>复杂度 $O(nM)$，结合前面的算法可以拿到 $70pts$。</p><p><a href="https://loj.ac/submission/838837">代码</a></p><p><del>随便写写暴力就70pts了</del></p><h2 id="算法三-正解"><a href="#算法三-正解" class="headerlink" title="算法三 正解"></a>算法三 正解</h2><p>继续沿着算法二的思路进行思考，拓展到更为一般的情况。</p><p>还是设 $f$ 和 $g$ 分别表示阵营和派系的方案数，考虑如何处理学校对导师的限制。</p><p>下面对于阵营的划分，都基于城市为单位进行考虑；对于派系的划分，都基于学校为单位进行考虑（若以城市为单位进行 $\text{dp}$，一个没有限制的学校因为同城市其它学校的偏好被 $\text{dp}$ 到会感觉很不爽 $\text{2333}$）。</p><p>一个城市有限制，当且仅当城市内的学校有限制。</p><p>所以对于那些没有限制的城市和学校，我们还是可以仿照算法二，直接 $\text{dp}$ 出 $f$ 和 $g$。</p><p>而对于那些有限制的学校&#x2F;城市，由于 $k$ 很小，只有 $30$，我们可以仿照 $50pts$ 的算法，暴力 $\text{dp}$ 出方案数，记为 $F$。</p><p>设 $F_{i,0&#x2F;1,j,k}$ 表示前 $i$ 个有限制的学校，第 $i$ 个学校加入了红&#x2F;蓝阵营，加入红阵营的有 $j$ 人，这些学校所属城市加入了鸭派系的有 $k$ 人的方案数。</p><p>最后，进行合并，只要枚举有限制的学校的派系、阵营人数，然后用 $f$ 去匹配无限制城市的阵营人数的上下界，用 $g$ 去匹配无限制的学校的派系人数的上下界，再全部乘起来就好了。</p><p><del>简单的背包，吐了XDXDXD</del></p><p><a href="https://loj.ac/submission/839291">代码</a></p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p><code>Talk is cheap. Show me the code. </code></p><p><strong>Tips:</strong></p><ol><li>滚动数组每轮记得清零！</li><li>不要用 <code>memset</code>，贼慢！</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ty</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>  <span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br>  <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br>  <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">2500</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">int</span> N, C, K, C0, C1, D0, D1, sum;<br><span class="hljs-type">int</span> f[<span class="hljs-number">5005</span>], g[<span class="hljs-number">5005</span>], F[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>][<span class="hljs-number">5005</span>][<span class="hljs-number">5005</span>];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">school</span> &#123;<br>  <span class="hljs-type">int</span> city, num, prf;<br>  <span class="hljs-type">bool</span> <span class="hljs-built_in">operator</span>&lt;(<span class="hljs-type">const</span> school &amp;x) <span class="hljs-type">const</span> &#123;<br>    <span class="hljs-keyword">if</span> ((prf != <span class="hljs-number">0</span>) ^ (x.prf != <span class="hljs-number">0</span>)) <span class="hljs-keyword">return</span> (prf != <span class="hljs-number">0</span>) &gt; (x.prf != <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> city &lt; x.city;<br>  &#125;<br>&#125; scl[_];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">city</span> &#123; <span class="hljs-type">int</span> num, hate; &#125; ct[_];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Inc</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;x, <span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;y)</span> </span>&#123; x = x + y &lt; mod ? x + y : x + y - mod; &#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;<br>  sum = <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">// memset(f, 0, sizeof(f));</span><br>  <span class="hljs-comment">// memset(g, 0, sizeof(g));</span><br>  <span class="hljs-comment">// memset(F, 0, sizeof(F));</span><br>  <span class="hljs-built_in">memset</span>(ct, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(ct));<br>  <span class="hljs-built_in">memset</span>(scl, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(scl));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>  N = <span class="hljs-built_in">ty</span>(), C = <span class="hljs-built_in">ty</span>();<br>  C0 = <span class="hljs-built_in">ty</span>(), C1 = <span class="hljs-built_in">ty</span>(), D0 = <span class="hljs-built_in">ty</span>(), D1 = <span class="hljs-built_in">ty</span>();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br>    scl[i].city = <span class="hljs-built_in">ty</span>(), scl[i].num = <span class="hljs-built_in">ty</span>();<br>    sum += scl[i].num;<br>  &#125;<br>  K = <span class="hljs-built_in">ty</span>();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= K; ++i) &#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-built_in">ty</span>();<br>    scl[x].prf = <span class="hljs-built_in">ty</span>() + <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-built_in">sort</span>(scl + <span class="hljs-number">1</span>, scl + N + <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br>    ct[scl[i].city].num += scl[i].num;<br>    <span class="hljs-keyword">if</span> (scl[i].prf) ct[scl[i].city].hate = <span class="hljs-literal">true</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">calc1</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> l &gt; r ? <span class="hljs-number">0</span> : (l &lt;= <span class="hljs-number">0</span> ? g[r] : (g[r] - g[l - <span class="hljs-number">1</span>] + mod) % mod);<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">calc2</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> l &gt; r ? <span class="hljs-number">0</span> : (l &lt;= <span class="hljs-number">0</span> ? f[r] : (f[r] - f[l - <span class="hljs-number">1</span>] + mod) % mod);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dp</span><span class="hljs-params">()</span> </span>&#123;<br>  f[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= C; ++i)<br>    <span class="hljs-keyword">if</span> (!ct[i].hate &amp;&amp; ct[i].num)<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = C0; j &gt;= ct[i].num; --j) <span class="hljs-built_in">Inc</span>(f[j], f[j - ct[i].num]);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= C0; ++i) f[i] = (f[i] + f[i - <span class="hljs-number">1</span>]) % mod;<br><br>  g[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i)<br>    <span class="hljs-keyword">if</span> (!scl[i].prf)<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = D0; j &gt;= scl[i].num; --j) <span class="hljs-built_in">Inc</span>(g[j], g[j - scl[i].num]);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= D0; ++i) g[i] = (g[i] + g[i - <span class="hljs-number">1</span>]) % mod;<br><br>  F[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> sum1 = <span class="hljs-number">0</span>, nw = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= K; ++i) &#123;<br>    sum1 += scl[i].num;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>; x &lt;= C0; ++x) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y = <span class="hljs-number">0</span>; y &lt;= sum1; ++y) &#123;<br>        <span class="hljs-keyword">if</span> (scl[i].prf != <span class="hljs-number">1</span>) &#123;<br>          <span class="hljs-keyword">if</span> (scl[i].city != scl[i - <span class="hljs-number">1</span>].city) &#123;<br>            <span class="hljs-keyword">if</span> (x &gt;= ct[scl[i].city].num &amp;&amp; y &gt;= scl[i].num) &#123;<br>              <span class="hljs-built_in">Inc</span>(F[nw ^ <span class="hljs-number">1</span>][<span class="hljs-number">0</span>][x][y],<br>                  F[nw][<span class="hljs-number">1</span>][x - ct[scl[i].city].num][y - scl[i].num]);<br>              <span class="hljs-built_in">Inc</span>(F[nw ^ <span class="hljs-number">1</span>][<span class="hljs-number">0</span>][x][y],<br>                  F[nw][<span class="hljs-number">0</span>][x - ct[scl[i].city].num][y - scl[i].num]);<br>            &#125;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (y &gt;= scl[i].num)<br>              <span class="hljs-built_in">Inc</span>(F[nw ^ <span class="hljs-number">1</span>][<span class="hljs-number">0</span>][x][y], F[nw][<span class="hljs-number">0</span>][x][y - scl[i].num]);<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (scl[i].prf != <span class="hljs-number">2</span>) &#123;<br>          <span class="hljs-keyword">if</span> (scl[i].city != scl[i - <span class="hljs-number">1</span>].city) &#123;<br>            <span class="hljs-keyword">if</span> (x &gt;= ct[scl[i].city].num) &#123;<br>              <span class="hljs-built_in">Inc</span>(F[nw ^ <span class="hljs-number">1</span>][<span class="hljs-number">0</span>][x][y], F[nw][<span class="hljs-number">1</span>][x - ct[scl[i].city].num][y]);<br>              <span class="hljs-built_in">Inc</span>(F[nw ^ <span class="hljs-number">1</span>][<span class="hljs-number">0</span>][x][y], F[nw][<span class="hljs-number">0</span>][x - ct[scl[i].city].num][y]);<br>            &#125;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">Inc</span>(F[nw ^ <span class="hljs-number">1</span>][<span class="hljs-number">0</span>][x][y], F[nw][<span class="hljs-number">0</span>][x][y]);<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (scl[i].prf != <span class="hljs-number">3</span>) &#123;<br>          <span class="hljs-keyword">if</span> (scl[i].city != scl[i - <span class="hljs-number">1</span>].city) &#123;<br>            <span class="hljs-keyword">if</span> (y &gt;= scl[i].num) &#123;<br>              <span class="hljs-built_in">Inc</span>(F[nw ^ <span class="hljs-number">1</span>][<span class="hljs-number">1</span>][x][y], F[nw][<span class="hljs-number">0</span>][x][y - scl[i].num]);<br>              <span class="hljs-built_in">Inc</span>(F[nw ^ <span class="hljs-number">1</span>][<span class="hljs-number">1</span>][x][y], F[nw][<span class="hljs-number">1</span>][x][y - scl[i].num]);<br>            &#125;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (y &gt;= scl[i].num)<br>              <span class="hljs-built_in">Inc</span>(F[nw ^ <span class="hljs-number">1</span>][<span class="hljs-number">1</span>][x][y], F[nw][<span class="hljs-number">1</span>][x][y - scl[i].num]);<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (scl[i].prf != <span class="hljs-number">4</span>) &#123;<br>          <span class="hljs-keyword">if</span> (scl[i].city != scl[i - <span class="hljs-number">1</span>].city) &#123;<br>            <span class="hljs-built_in">Inc</span>(F[nw ^ <span class="hljs-number">1</span>][<span class="hljs-number">1</span>][x][y], F[nw][<span class="hljs-number">0</span>][x][y]);<br>            <span class="hljs-built_in">Inc</span>(F[nw ^ <span class="hljs-number">1</span>][<span class="hljs-number">1</span>][x][y], F[nw][<span class="hljs-number">1</span>][x][y]);<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">Inc</span>(F[nw ^ <span class="hljs-number">1</span>][<span class="hljs-number">1</span>][x][y], F[nw][<span class="hljs-number">1</span>][x][y]);<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>; x &lt;= C0; ++x)<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y = <span class="hljs-number">0</span>; y &lt;= sum1; ++y) F[nw][<span class="hljs-number">0</span>][x][y] = F[nw][<span class="hljs-number">1</span>][x][y] = <span class="hljs-number">0</span>;<br>    nw ^= <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= C0; ++i) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= sum1; ++j) &#123;<br>      ll A = (F[nw][<span class="hljs-number">0</span>][i][j] + F[nw][<span class="hljs-number">1</span>][i][j]) % mod;<br>      ans = (<span class="hljs-number">1ll</span> * ans + A * <span class="hljs-built_in">calc1</span>(sum - D1 - j, D0 - j) % mod * <span class="hljs-built_in">calc2</span>(sum - C1 - i, C0 - i) % mod) % mod;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= C0; ++i) &#123;<br>    f[i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= sum1; ++j)<br>      F[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][i][j] = F[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][i][j] = F[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][i][j] = F[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][i][j] = <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= D0; ++i) g[i] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;match.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;match.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-type">int</span> T = <span class="hljs-built_in">ty</span>();<br>  <span class="hljs-keyword">while</span> (T--) &#123;<br>    <span class="hljs-built_in">clear</span>();<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-built_in">dp</span>();<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计数dp</tag>
      
      <tag>省选</tag>
      
      <tag>背包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[十二省联考2019]异或粽子 - 可持久化Trie、堆</title>
    <link href="/2020/06/16/%E5%8D%81%E4%BA%8C%E7%9C%81%E8%81%94%E8%80%832019%E5%BC%82%E6%88%96%E7%B2%BD%E5%AD%90-%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96Trrie%E3%80%81%E5%A0%86/"/>
    <url>/2020/06/16/%E5%8D%81%E4%BA%8C%E7%9C%81%E8%81%94%E8%80%832019%E5%BC%82%E6%88%96%E7%B2%BD%E5%AD%90-%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96Trrie%E3%80%81%E5%A0%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>小粽是一个喜欢吃粽子的好孩子。今天她在家里自己做起了粽子。</p><p>小粽面前有 $n$ 种互不相同的粽子馅儿，小粽将它们摆放为了一排，并从左至右编号为 $1$ 到 $n$。第 $i$ 种馅儿具有一个非负整数的属性值 $a_i$。每种馅儿的数量都足够多，即小粽不会因为缺少原料而做不出想要的粽子。小粽准备用这些馅儿来做出 $k$ 个粽子。</p><p>小粽的做法是：选两个整数数 $l$,  $r$，满足 $1 \leqslant l \leqslant r \leqslant n$，将编号在 $[l, r]$ 范围内的所有馅儿混合做成一个粽子，所得的粽子的美味度为这些粽子的属性值的异或和。</p><p>小粽想品尝不同口味的粽子，因此它不希望用同样的馅儿的集合做出一个以上的粽子。</p><p>小粽希望她做出的所有粽子的美味度之和最大。请你帮她求出这个值吧！</p><p><strong>一句话题意：求出前 $k$ 大区间异或和。</strong></p><p>$n \leqslant 5 \times 10^5,  k\leqslant 2 \times 10^5$</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="60pts"><a href="#60pts" class="headerlink" title="60pts"></a>60pts</h2><p>暴力模拟。</p><h2 id="100pts"><a href="#100pts" class="headerlink" title="100pts"></a>100pts</h2><p>求解区间异或问题的常用 $\text{trick}$。</p><p>先计算出前缀异或和 $s_i$，即 $s_i &#x3D; \bigoplus_{j&#x3D;1}^{i}a_j$，区间异或就转化为了 $val[l,r]&#x3D;s_r \oplus s_{l-1}$。</p><p>考虑维护一个堆，先将每个点作为右端点且左端点在 $[l,r]$ 间的最大异或和放进堆里，然后每次取出堆顶，设最大值取得的点为 $k$，就将原来的区间 $[l,r]$ 拆分成 $[l,k-1]$ 和 $[k+1,r]$ 放进堆里（即次大值），这样重复取 $K$ 次，取得的区间异或和一定是前 $K$ 大的。</p><p>而固定右端点查询左端点在某个区间内的最大异或和可以用<strong>可持久化 $\text{Trie}$</strong> 来实现，方法类似于主席树。</p><p><strong>PS：</strong> 数组要开够！异或和大于号小于号放在一起要加括号！</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p><code>Talk is cheap. Show me the code. </code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">2e7</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> N, K, tot, rt[_], tr[_][<span class="hljs-number">2</span>], pos[_];<br>ll a[_], sum[_];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> p)</span> </span>&#123;<br>  <span class="hljs-type">int</span> y = ++tot, tmp = y;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">32</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>    <span class="hljs-type">int</span> now = (sum[p] &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>    tr[y][now ^ <span class="hljs-number">1</span>] = tr[x][now ^ <span class="hljs-number">1</span>];<br>    x = tr[x][now];<br>    y = tr[y][now] = ++tot;<br>  &#125;<br>  pos[y] = p + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> tmp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, ll val)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">32</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>    <span class="hljs-type">int</span> now = (val &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (tr[r][now ^ <span class="hljs-number">1</span>] != tr[l][now ^ <span class="hljs-number">1</span>])<br>      l = tr[l][now ^ <span class="hljs-number">1</span>], r = tr[r][now ^ <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">else</span><br>      l = tr[l][now], r = tr[r][now];<br>  &#125;<br>  <span class="hljs-keyword">return</span> pos[r];<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">data</span> &#123;<br>  <span class="hljs-type">int</span> cur, l, r, t;<br>  <span class="hljs-built_in">data</span>(<span class="hljs-type">int</span> _cur, <span class="hljs-type">int</span> _l, <span class="hljs-type">int</span> _r) &#123;<br>    cur = _cur, l = _l, r = _r;<br>    t = <span class="hljs-built_in">query</span>(rt[_l - <span class="hljs-number">1</span>], rt[_r], sum[_cur]);<br>    <span class="hljs-comment">// cout &lt;&lt; &quot;!&quot; &lt;&lt; t &lt;&lt; endl;</span><br>  &#125;<br>  <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> data&amp; x) <span class="hljs-type">const</span> &#123;<br>    <span class="hljs-keyword">return</span> (sum[cur] ^ sum[t - <span class="hljs-number">1</span>]) &lt; (sum[x.cur] ^ sum[x.t - <span class="hljs-number">1</span>]);<br>  &#125;<br>&#125;;<br><br>priority_queue&lt;data&gt; Q;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;zongzi.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;zongzi.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;N, &amp;K);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;a[i]);<br>    sum[i] = sum[i - <span class="hljs-number">1</span>] ^ a[i];<br>    rt[i] = <span class="hljs-built_in">insert</span>(rt[i - <span class="hljs-number">1</span>], i - <span class="hljs-number">1</span>);<br>    Q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">data</span>(i, <span class="hljs-number">1</span>, i));<br>  &#125;<br>  ll ans = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (K--) &#123;<br>    data now = Q.<span class="hljs-built_in">top</span>();<br>    Q.<span class="hljs-built_in">pop</span>();<br>    ans += sum[now.cur] ^ sum[now.t - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> (now.l &lt; now.t) Q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">data</span>(now.cur, now.l, now.t - <span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">if</span> (now.t &lt; now.r) Q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">data</span>(now.cur, now.t + <span class="hljs-number">1</span>, now.r));<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>字符串</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>堆</tag>
      
      <tag>省选</tag>
      
      <tag>Trie</tag>
      
      <tag>可持久化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[十二省联考2019]春节十二响 - 贪心、堆、启发式合并</title>
    <link href="/2020/06/15/%E5%8D%81%E4%BA%8C%E7%9C%81%E8%81%94%E8%80%832019%E6%98%A5%E8%8A%82%E5%8D%81%E4%BA%8C%E5%93%8D-%E8%B4%AA%E5%BF%83%E3%80%81%E5%A0%86%E3%80%81%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
    <url>/2020/06/15/%E5%8D%81%E4%BA%8C%E7%9C%81%E8%81%94%E8%80%832019%E6%98%A5%E8%8A%82%E5%8D%81%E4%BA%8C%E5%93%8D-%E8%B4%AA%E5%BF%83%E3%80%81%E5%A0%86%E3%80%81%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给你一棵树，每个节点有点权，将这些节点分为若干段，要求每段中的节点不能有祖先-后代关系。每一段的大小为该段权值最大的点的点权大小，求所有段的最小总权值和。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>先考虑一条链的情况：</p><p>$1$ 号节点一定将这条链分成了两条链，只要将两条链都排序一遍，再按从大到小的顺序对应两两分为一段即可。</p><p><strong>正确性显然。</strong>（最大的两个若不合并则必然不是最优，因为它们会一直造成贡献）</p><p>再来考虑更为一般的情况：</p><p>“一段中没有祖先—后代关系”其实可以认为是一个节点对它的子树的限制，所以我们还是可以仿照链的思路，对每个节点维护一个堆，用来维护该节点子树内每一段的最大权值，然后不断向上进行<strong>启发式合并</strong>即可。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p><code>Talk is cheap. Show me the code. </code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> N, val[_], id[_], tim;<br><span class="hljs-type">int</span> tot = <span class="hljs-number">0</span>, head[_], to[_], nxt[_];<br>priority_queue&lt;<span class="hljs-type">int</span>&gt; q[_];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>to[++tot] = y, nxt[tot] = head[x], head[x] = tot;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> tmp[_];<br>id[x] = ++tim;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br><span class="hljs-type">int</span> y = to[i];<br><span class="hljs-built_in">dfs</span>(y);<br><span class="hljs-keyword">if</span> (q[id[x]].<span class="hljs-built_in">size</span>() &lt; q[id[y]].<span class="hljs-built_in">size</span>()) <span class="hljs-built_in">swap</span>(id[x], id[y]);<br><span class="hljs-type">int</span> sz = q[id[y]].<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= sz; ++j) &#123;<br>tmp[j] = <span class="hljs-built_in">max</span>(q[id[x]].<span class="hljs-built_in">top</span>(), q[id[y]].<span class="hljs-built_in">top</span>());<br>q[id[x]].<span class="hljs-built_in">pop</span>(), q[id[y]].<span class="hljs-built_in">pop</span>();<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= sz; ++j) q[id[x]].<span class="hljs-built_in">push</span>(tmp[j]);<br>&#125;<br>q[id[x]].<span class="hljs-built_in">push</span>(val[x]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;spring.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;spring.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;N);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;val[i]);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y = <span class="hljs-number">2</span>; y &lt;= N; ++y) &#123;<br><span class="hljs-type">int</span> x;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br><span class="hljs-built_in">addEdge</span>(x, y);<br>&#125;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (q[id[<span class="hljs-number">1</span>]].<span class="hljs-built_in">size</span>()) &#123;<br>ans += q[id[<span class="hljs-number">1</span>]].<span class="hljs-built_in">top</span>();<br>q[id[<span class="hljs-number">1</span>]].<span class="hljs-built_in">pop</span>();<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>图论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>堆</tag>
      
      <tag>贪心</tag>
      
      <tag>省选</tag>
      
      <tag>启发式合并</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>loj6094 归乡迷途 / CF814E - dp、计数</title>
    <link href="/2020/06/15/loj6094-%E5%BD%92%E4%B9%A1%E8%BF%B7%E9%80%94-CF814E-dp%E3%80%81%E8%AE%A1%E6%95%B0/"/>
    <url>/2020/06/15/loj6094-%E5%BD%92%E4%B9%A1%E8%BF%B7%E9%80%94-CF814E-dp%E3%80%81%E8%AE%A1%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给出 $n$ 个点，和每个点的度构造出一张无向图满足以下两条性质：</p><blockquote><ol><li>点 $1$ 到点 $i$ 仅有<strong>唯一</strong>一条最短路</li><li>点 $1$ 到点 $i$ 的最短路长度大于等于点 $1$ 到点 $i-1$ 的最短路长度</li></ol></blockquote><p>求能构成满足条件的无向图的个数？</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>咕咕咕。</p><p><a href="https://loj.ac/article/37">传送门</a></p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">500</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> N, d[_];<br>ll f[_][_], g[_][_][_];<br>ll fac[_], facinv[_];<br><br><span class="hljs-function">ll <span class="hljs-title">fastPow</span><span class="hljs-params">(ll a, ll b)</span> </span>&#123;<br>  ll ans = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (; b; b &gt;&gt;= <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) ans = ans * a % mod;<br>    a = a * a % mod;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>  fac[<span class="hljs-number">0</span>] = facinv[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) fac[i] = fac[i - <span class="hljs-number">1</span>] * i % mod;<br>  facinv[N] = <span class="hljs-built_in">fastPow</span>(fac[N], mod - <span class="hljs-number">2</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = N - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; --i) facinv[i] = facinv[i + <span class="hljs-number">1</span>] * (i + <span class="hljs-number">1</span>) % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">C</span><span class="hljs-params">(ll m, ll n)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> fac[m] * facinv[n] % mod * facinv[m - n] % mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Inc</span><span class="hljs-params">(ll &amp;x, ll y)</span> </span>&#123; x += y, x = x &gt;= mod ? x - mod : x; &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;return.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;return.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;N);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;d[i]);<br>  <span class="hljs-built_in">init</span>();<br>  g[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= N; ++i) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= N - i; ++j) &#123;<br>      <span class="hljs-keyword">if</span> (!i &amp;&amp; !j) <span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span> (!i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">2</span>; k &lt;= j - <span class="hljs-number">1</span>; ++k)<br>          <span class="hljs-built_in">Inc</span>(g[<span class="hljs-number">0</span>][i][j], g[<span class="hljs-number">0</span>][i][j - k - <span class="hljs-number">1</span>] * <span class="hljs-built_in">C</span>(j - <span class="hljs-number">1</span>, k) % mod * fac[k] %<br>                              mod * facinv[<span class="hljs-number">2</span>] % mod);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">2</span>) <span class="hljs-built_in">Inc</span>(g[<span class="hljs-number">0</span>][i][j], (i - <span class="hljs-number">1</span>) * g[<span class="hljs-number">0</span>][i - <span class="hljs-number">2</span>][j] % mod);<br>        <span class="hljs-keyword">if</span> (j &gt;= <span class="hljs-number">1</span>) <span class="hljs-built_in">Inc</span>(g[<span class="hljs-number">0</span>][i][j], j * g[<span class="hljs-number">0</span>][i][j - <span class="hljs-number">1</span>] % mod);<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; ++i) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> p = <span class="hljs-number">0</span>; p &lt; N - i; ++p) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= p; ++k) &#123;<br>        <span class="hljs-type">int</span> j = p - k;<br>        <span class="hljs-keyword">if</span> (!j &amp;&amp; !k) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span> (j &gt; <span class="hljs-number">0</span>) <span class="hljs-built_in">Inc</span>(g[i][j][k], j * g[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>][k] % mod);<br>        <span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">0</span>) <span class="hljs-built_in">Inc</span>(g[i][j][k], k * g[i - <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>][k - <span class="hljs-number">1</span>] % mod);<br>      &#125;<br>    &#125;<br>  &#125;<br>  f[d[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>][d[<span class="hljs-number">1</span>]] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = d[<span class="hljs-number">1</span>] + <span class="hljs-number">2</span>; i &lt;= N; ++i) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i - d[<span class="hljs-number">1</span>] - <span class="hljs-number">1</span>; ++j) &#123;<br>      <span class="hljs-type">int</span> c[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt; i - j; ++k) &#123;<br>        ++c[d[i - j - k + <span class="hljs-number">1</span>] - <span class="hljs-number">2</span>];<br>        <span class="hljs-built_in">Inc</span>(f[i][j], f[i - j][k] * g[j][c[<span class="hljs-number">0</span>]][c[<span class="hljs-number">1</span>]] % mod);<br>      &#125;<br>    &#125;<br>  &#125;<br>  ll ans = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">int</span> c[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; ++i) &#123;<br>    ++c[d[N - i + <span class="hljs-number">1</span>] - <span class="hljs-number">2</span>];<br>    <span class="hljs-built_in">Inc</span>(ans, f[N][i] * g[<span class="hljs-number">0</span>][c[<span class="hljs-number">0</span>]][c[<span class="hljs-number">1</span>]] % mod);<br>  &#125;<br>  cout &lt;&lt; ans &lt;&lt; endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计数dp</tag>
      
      <tag>Codeforces</tag>
      
      <tag>LibreOJ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[UOJ Round 5]怎样跑得更快 - 莫比乌斯反演</title>
    <link href="/2020/06/14/UR-5%E6%80%8E%E6%A0%B7%E8%B7%91%E5%BE%97%E6%9B%B4%E5%BF%AB-%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    <url>/2020/06/14/UR-5%E6%80%8E%E6%A0%B7%E8%B7%91%E5%BE%97%E6%9B%B4%E5%BF%AB-%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>令 $p &#x3D; 998244353$。</p><p>给你整数 $n,c,d$ 。现有整数 $x_1,\dots,x_n$ 和 $b_1, \dots , b_n$ 满足 $0 \le x_1 , \dots , x_n , b_1 , \dots , b_n &lt; p$ ，且对于 $1\le i \le n$ 满足：<br>$$<br>\sum_{j &#x3D; 1}^{n} \gcd(i, j)^c \cdot \operatorname{lcm}(i, j)^d \cdot x_j \equiv b_i \pmod{p}<br>$$<br>有 $q$ 个询问，每次给出 $b_1, \dots, b_n$，请你解出 $x_1, \dots, x_n$ 的值。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>先丢两个链接：</p><blockquote><p><a href="https://www.cnblogs.com/cjyyb/p/11074280.html">怎样跑得更快（莫比乌斯反演） - yyb</a></p><p><a href="http://vfleaking.blog.uoj.ac/blog/62">UOJ Round #5 题解 - vfleaking的博客</a></p></blockquote><p>首先，根据小学奥数知识我们可以知道 $\operatorname{lcm}(i,j)&#x3D;\frac{ij}{\gcd(i,j)}$，于是原式子变为<br>$$<br>\sum_{j &#x3D; 1}^{n} \gcd(i, j)^{c-d} i^d j^d x_j \equiv b_i \pmod{p}<br>$$<br>其实写成函数的形式后这种解法都可用<br>$$<br>\sum_{j &#x3D; 1}^{n} f(\gcd(i, j)) h(i) h(j) x_j \equiv b_i \pmod{p}<br>$$<br>枚举 $gcd$<br>$$<br>\begin{split}<br>b_i &amp;&#x3D; \sum \limits_{d&#x3D;1}^{n}f(d) \sum \limits_{j&#x3D;1}^{n} \left[ gcd(i,j) &#x3D; d \right] h(i) h(j) x_j \<br>&amp;&#x3D; \sum \limits_{d&#x3D;1}^{n}f(d) \sum \limits_{j&#x3D;1}^{n} \left[ \frac{gcd(i,j)}{d} &#x3D; 1 \right] h(i) h(j) x_j \<br>&amp;&#x3D; \sum \limits_{d&#x3D;1}^{n}f(d) \sum \limits_{d \mid j}^{n} h(i) h(j) \sum \limits_{k\mid \frac{gcd(i,j)}{d}} \mu(k) x_j<br>\end{split}<br>$$<br>令 $T &#x3D; kd$，再变换求和顺序，则有<br>$$<br>\begin{split}<br>b_i &amp;&#x3D; \sum \limits_{d&#x3D;1}^{n}f(d) \sum \limits_{d \mid j}^{n} h(i) h(j) \sum \limits_{T\mid gcd(i,j)} \mu(\frac{T}{d}) x_j \<br>&amp;&#x3D; h(i) \sum \limits_{T \mid i} \sum \limits_{T \mid j} \sum \limits_{d \mid T} f(d) h(j) \mu(\frac{T}{d}) x_j \<br>&amp;&#x3D; h(i) \sum \limits_{T \mid i} \sum \limits_{T \mid j} h(j) x_j \sum \limits_{d \mid T} f(d)\mu(\frac{T}{d})<br>\end{split}<br>$$<br>后半部分可以提前预处理，记作 $f_r(T)$<br>$$<br>\begin{split}<br>b_i &amp;&#x3D; h(i) \sum \limits_{T \mid i} \sum \limits_{T \mid j} h(j) x_j f_r(T) \<br>&amp;&#x3D; h(i) \sum \limits_{T \mid i} f_r(T) \sum \limits_{T \mid j} h(j) x_j<br>\end{split}<br>$$<br>后面那部分可以提前算出来，记作 $g(T)$<br>$$<br>\begin{split}<br>b_i &amp;&#x3D; h(i) \sum \limits_{T \mid i} f_r(T) g(T)<br>\end{split}<br>$$<br>令 $g_r(T) &#x3D; f_r(T) g(T)$<br>$$<br>\begin{split}<br>b_i &amp;&#x3D; h(i) \sum \limits_{T \mid i} g_r(T)<br>\end{split}<br>$$<br>再莫比乌斯反演一次<br>$$<br>\begin{split}<br>\frac{b_i}{h(i)} &amp;&#x3D; \sum \limits_{T \mid i} g_r(T) \<br>g_r(i) &amp;&#x3D; \sum \limits_{T \mid i} \frac{b_T}{h(T)} \mu(\frac{i}{T})<br>\end{split}<br>$$<br>那么 $g_r$ 可以算出来，$f_r$ 也可以算出来，于是可以算出 $g$</p><p>又由于 $g(T)&#x3D;\sum \limits_{T \mid j} h(j) x_j$，所以再进行一次莫比乌斯反演<br>$$<br>h(j)x_j &#x3D; \sum \limits_{T\mid j} g(T) \mu(\frac{j}{T})<br>$$<br>就可以把 $h(j)x_j$ 算出来，就求出了 $x_j$。</p><p><strong>所以其实本质上就是用 $b_i$ 除以 $h(i)$ 然后莫比乌斯反演，然后再除以 $f$ 的莫比乌斯反演，再莫比乌斯反演，再除以 $h(j)$。</strong></p><blockquote><p>三个莫比乌斯反演掷地有声。XDXDXD<br>sto <a href="https://uoj.ac/user/profile/vfleaking">vfleaking</a> orz</p></blockquote><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p><code>Talk is cheap. Show me the code. </code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> N, c, d, Q, mu[_], b[_];<br>ll h[_], f[_], fr[_], invh[_], invfr[_], t[_], gr[_], g[_];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ty</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>  <span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>;<br>    ch = <span class="hljs-built_in">getchar</span>();<br>  &#125;<br>  <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>    x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    ch = <span class="hljs-built_in">getchar</span>();<br>  &#125;<br>  <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">fastPow</span><span class="hljs-params">(ll a, ll b)</span> </span>&#123;<br>  ll ret = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (; b; b &gt;&gt;= <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) ret = ret * a % mod;<br>    a = a * a % mod;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getMu</span><span class="hljs-params">(<span class="hljs-type">int</span> lim = <span class="hljs-number">1e5</span>)</span> </span>&#123;<br>  <span class="hljs-type">static</span> <span class="hljs-type">int</span> cnt, p[_], vis[_];<br>  mu[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= lim; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (!vis[i]) p[++cnt] = i, mu[i] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= cnt &amp;&amp; i * p[j] &lt;= lim; ++j) &#123;<br>      vis[i * p[j]] = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">if</span> (i % p[j] == <span class="hljs-number">0</span>) &#123;<br>        mu[i * p[j]] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>      mu[i * p[j]] = -mu[i];<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;run.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;run.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-built_in">getMu</span>();<br>  N = <span class="hljs-built_in">ty</span>(), c = <span class="hljs-built_in">ty</span>(), d = <span class="hljs-built_in">ty</span>(), Q = <span class="hljs-built_in">ty</span>();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br>    h[i] = <span class="hljs-built_in">fastPow</span>(i, d);<br>    invh[i] = <span class="hljs-built_in">fastPow</span>(h[i], mod - <span class="hljs-number">2</span>);<br>    f[i] = <span class="hljs-built_in">fastPow</span>(i, (c - d + (mod - <span class="hljs-number">1</span>)) % (mod - <span class="hljs-number">1</span>));  <span class="hljs-comment">// 扩展欧拉定理</span><br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= N; j += i)<br>      fr[j] = (fr[j] + mu[j / i] * f[i] % mod) % mod;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) invfr[i] = <span class="hljs-built_in">fastPow</span>(fr[i], mod - <span class="hljs-number">2</span>);<br>  <span class="hljs-keyword">while</span> (Q--) &#123;<br>    <span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) b[i] = <span class="hljs-built_in">ty</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br>      t[i] = b[i] * invh[i] % mod;<br>      <span class="hljs-keyword">if</span> (b[i] &amp;&amp; !h[i]) flag = <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(gr, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(ll) * (N + <span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i)<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= N; j += i)<br>        gr[j] = (gr[j] + mu[j / i] * t[i] % mod + mod) % mod;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br>      g[i] = gr[i] * invfr[i] % mod;<br>      <span class="hljs-keyword">if</span> (gr[i] &amp;&amp; !invfr[i]) flag = <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(t, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(ll) * (N + <span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i)<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= N; j += i)<br>        t[i] = (t[i] + mu[j / i] * g[j] % mod + mod) % mod;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) t[i] = t[i] * invh[i] % mod;<br>    <span class="hljs-keyword">if</span> (flag)<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, t[i]);<br>    <span class="hljs-keyword">else</span><br>      cout &lt;&lt; <span class="hljs-number">-1</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>莫比乌斯反演</tag>
      
      <tag>UOJ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[HAOI2011]Problem b - 莫比乌斯反演</title>
    <link href="/2020/06/14/HAOI2011Problem-b-%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    <url>/2020/06/14/HAOI2011Problem-b-%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>对于给出的 $n$ 个询问，每次求有多少个数对 $(x,y)$，满足 $a \le x \le b$，$c \le y \le d$，且 $\gcd(x,y) &#x3D; k$，$\gcd(x,y)$ 函数为 $x$ 和 $y$ 的最大公约数。</p><p>其中 $1 \le n,k \le 5 \times 10^4$，$1 \le a \le b \le 5 \times 10^4$，$1 \le c \le d \le 5 \times 10^4$。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>首先肯定是自然而然地想到分成四块容斥，即<br>$$<br>\begin{split}<br>\sum \limits_{i&#x3D;a}^{b} \sum \limits_{j&#x3D;c}^{d} \left[ gcd(i,j) &#x3D; k \right] &amp;&#x3D; \sum \limits_{i&#x3D;1}^{b} \sum \limits_{j&#x3D;1}^{d} \left[ gcd(i,j) &#x3D;k \right] \<br>&amp;- \sum \limits_{i&#x3D;1}^{a} \sum \limits_{j&#x3D;1}^{d} \left[ gcd(i,j) &#x3D;k \right]\<br>&amp;- \sum \limits_{i&#x3D;1}^{b} \sum \limits_{j&#x3D;1}^{c} \left[ gcd(i,j) &#x3D;k \right]\<br>&amp;+ \sum \limits_{i&#x3D;1}^{a} \sum \limits_{j&#x3D;1}^{c} \left[ gcd(i,j) &#x3D;k \right]<br>\end{split}<br>$$<br>这样，每一部分都是 $\sum \limits_{i&#x3D;1}^{m} \sum \limits_{j&#x3D;1}^{m} \left[ gcd(i,j) &#x3D; k \right]$ 的形式。</p><p>接下来考虑如何将式子进行变换：<br>$$<br>\sum \limits_{i&#x3D;1}^{m} \sum \limits_{j&#x3D;1}^{m} \left[ gcd(i,j) &#x3D; k \right] &#x3D; \sum \limits_{i&#x3D;1}^{\lfloor \frac{n}{k} \rfloor} \sum \limits_{j&#x3D;1}^{\lfloor \frac{m}{k} \rfloor} \left[ gcd(i,j) &#x3D; 1 \right]<br>$$<br>看到右边的 $\left[ gcd(i,j) &#x3D; 1 \right]$ 是不是感觉很熟悉？根据在<a href="https://www.cnblogs.com/newbielyx/p/13050310.html">莫比乌斯反演学习笔记</a>中提到的<code>反演结论</code>：<br>$$<br>\left[ gcd(i,j) &#x3D; 1 \right] \iff \sum \limits_{d \mid gcd(i,j)} \mu(d)<br>$$<br> 可以继续化简：<br>$$<br>\sum \limits_{i&#x3D;1}^{\lfloor \frac{n}{k} \rfloor} \sum \limits_{j&#x3D;1}^{\lfloor \frac{m}{k} \rfloor} \sum \limits_{d \mid gcd(i,j)} \mu(d)<br>$$<br>考虑变换求和顺序：<br>$$<br>\sum \limits_{d&#x3D;1}^{\min(n,m)} \mu(d) \sum \limits_{i&#x3D;1}^{\lfloor \frac{n}{k} \rfloor} \left[ d \mid i \right] \sum \limits_{j&#x3D;1}^{\lfloor \frac{m}{k} \rfloor} \left[ d \mid j \right]<br>$$<br>易知在 $\left[ 1, n\right]$ 中约数包含 $d$ 的数有 $\lfloor \frac{n}{d} \rfloor$ 个，于是式子可以化简为：<br>$$<br>\sum \limits_{d&#x3D;1}^{\min(n,m)} \mu(d) \lfloor \frac{\lfloor \frac{n}{k} \rfloor}{d} \rfloor \lfloor \frac{\lfloor \frac{m}{k} \rfloor}{d} \rfloor<br>$$<br>再由<a href="https://www.cnblogs.com/newbielyx/p/13050310.html">莫比乌斯反演学习笔记</a>中提到的<code>引理1</code>，可得：<br>$$<br>\sum \limits_{d&#x3D;1}^{\min(n,m)} \mu(d) \lfloor \frac{n}{kd} \rfloor \lfloor \frac{m}{kd} \rfloor<br>$$<br>所以最终，就得到了<br>$$<br>\sum \limits_{i&#x3D;a}^{b} \sum \limits_{j&#x3D;c}^{d} \left[ gcd(i,j) &#x3D; k \right] &#x3D; \sum \limits_{d&#x3D;1}^{\min(n,m)} \mu(d) \lfloor \frac{n}{kd} \rfloor \lfloor \frac{m}{kd} \rfloor<br>$$<br>这个式子就可以利用<a href="https://www.cnblogs.com/newbielyx/p/13050267.html">数论分块</a>进行求解了。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p><code>Talk  is cheap. Show me the code. </code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ty</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>; <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>  <span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br>  <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br>  <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">5e4</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> tot, vis[_], p[_], mu[_], sum[_];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getMu</span><span class="hljs-params">(<span class="hljs-type">int</span> lim = <span class="hljs-number">5e4</span>)</span> </span>&#123;<br>  mu[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= lim; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (!vis[i]) p[++tot] = i, mu[i] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= tot &amp;&amp; p[j] * i &lt;= lim; ++j) &#123;<br>      vis[i * p[j]] = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">if</span> (i % p[j] == <span class="hljs-number">0</span>) &#123;<br>        mu[i * p[j]] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>      mu[i * p[j]] = -mu[i];<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= lim; ++i) sum[i] = sum[i - <span class="hljs-number">1</span>] + mu[i];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>  n /= k, m /= k;<br>  <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r; l &lt;= <span class="hljs-built_in">min</span>(n, m); l = r + <span class="hljs-number">1</span>) &#123;<br>    r = <span class="hljs-built_in">min</span>(n / (n / l), m / (m / l));<br>    ret += (sum[r] - sum[l - <span class="hljs-number">1</span>]) * (n / l) * (m / l);<br>  &#125;<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">getMu</span>();<br>  <span class="hljs-type">int</span> T = <span class="hljs-built_in">ty</span>(), a, b, c, d, k;<br>  <span class="hljs-keyword">while</span> (T--) &#123;<br>    a = <span class="hljs-built_in">ty</span>(), b = <span class="hljs-built_in">ty</span>(), c = <span class="hljs-built_in">ty</span>(), d = <span class="hljs-built_in">ty</span>(), k = <span class="hljs-built_in">ty</span>();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">calc</span>(b, d, k) - <span class="hljs-built_in">calc</span>(a - <span class="hljs-number">1</span>, d, k) - <span class="hljs-built_in">calc</span>(b, c - <span class="hljs-number">1</span>, k) +<br>                       <span class="hljs-built_in">calc</span>(a - <span class="hljs-number">1</span>, c - <span class="hljs-number">1</span>, k));<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>省选</tag>
      
      <tag>莫比乌斯反演</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>莫比乌斯反演</title>
    <link href="/2020/06/13/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    <url>/2020/06/13/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/</url>
    
    <content type="html"><![CDATA[<p><em><strong>2020&#x2F;06&#x2F;13</strong></em></p><p>开坑莫比乌斯反演（只是一个平平无奇的搬运工罢了）。</p><p><strong>参考：</strong> <a href="https://oi-wiki.org/math/mobius/#_18">莫比乌斯反演 - OI Wiki</a></p><p><a href="https://www.cnblogs.com/lfri/p/11688297.html">积性函数与Dirichlet卷积 - Rogn</a></p><hr><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="引理1"><a href="#引理1" class="headerlink" title="引理1"></a>引理1</h2><p>$$<br>\forall a, b, c \in \mathbb{Z}, \lfloor \frac{a}{bc} \rfloor &#x3D; \lfloor \frac{\lfloor \frac{a}{b} \rfloor}{c} \rfloor<br>$$</p><p><strong>证明：</strong></p><p>设<br>$$<br>\frac{a}{b} &#x3D; \lfloor \frac{a}{b} \rfloor + r (0 \le r &lt; 1)<br>$$<br>所以<br>$$<br>\begin{split}<br>\lfloor \frac{a}{bc} \rfloor &amp;&#x3D; \lfloor \frac{\lfloor \frac{a}{b} \rfloor + r}{c} \rfloor \<br>                             &amp;&#x3D; \lfloor \frac{\lfloor \frac{a}{b} \rfloor}{c} + \frac{r}{c} \rfloor \<br>                             &amp;&#x3D; \lfloor \frac{\lfloor \frac{a}{b} \rfloor}{c} \rfloor<br>\end{split}<br>$$</p><h2 id="引理2"><a href="#引理2" class="headerlink" title="引理2"></a>引理2</h2><p>$$<br>\forall n \in \mathbb{N}, \left| \lfloor \frac{n}{d} \rfloor \mid d\in \mathbb{N} \right| \le 2 \sqrt{n}<br>$$</p><p> <strong>略证：</strong></p><p>对于 $d \le \sqrt{n}$，$\lfloor \frac{n}{d} \rfloor$ 有 $\sqrt{n}$ 种取值；</p><p>对于 $d &gt; \sqrt{n}$，由于 $\lfloor \frac{n}{d} \rfloor \le \sqrt{n}$，所以也只有 $\sqrt{n}$ 种取值。</p><p>综上，得证。</p><h2 id="数论分块"><a href="#数论分块" class="headerlink" title="数论分块"></a>数论分块</h2><p>$\Rightarrow$ <a href="https://www.cnblogs.com/newbielyx/p/13050267.html">传送门</a></p><h1 id="积性函数"><a href="#积性函数" class="headerlink" title="积性函数"></a>积性函数</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>若 $\gcd(a,b) &#x3D; 1$ 且 $f(xy) &#x3D; f(x)f(y)$ ，则称 $f(x)$ 为积性函数。</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>若 $f(x)$ 和 $g(x)$ 为积性函数，则以下函数也为积性函数：<br>$$<br>\begin{align}<br>h(x) &amp;&#x3D; f(x^p) \<br>h(x) &amp;&#x3D; f^p(x) \<br>h(x) &amp;&#x3D; f(x)g(x) \<br>h(x) &amp;&#x3D; \sum \limits_{d\mid x} f(d) g(\frac{x}{d})<br>\end{align}<br>$$<br><strong>证明：</strong></p><p>前三个显然，下面证明 $h(x) &#x3D; \sum \limits_{d\mid x} f(d) g(\frac{x}{d})$ <em>（两个积性函数的 Dirichlet 卷积还是积性函数）</em>：<br>$$<br>\begin{split}<br>h(x)h(y) &amp;&#x3D; \left( \sum \limits_{d\mid x} f(d) g(\frac{x}{d}) \right) \left( \sum \limits_{d\mid y} f(d) g(\frac{y}{d}) \right) \<br>&amp;&#x3D; \sum \limits_{d\mid xy} f(d) g(\frac{xy}{d}) \<br>&amp;&#x3D; h(xy)<br>\end{split}<br>$$</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ol><li><p>单位函数：$\epsilon(1) &#x3D; \left[ n &#x3D; 1 \right]$</p></li><li><p>恒等函数：$\operatorname{id}_k(n)&#x3D;n^k$，$\operatorname{id}_1(n)$ 通常记作 $\operatorname{id}(n)$</p></li><li><p>常数函数：$1(n)&#x3D;1$</p></li><li><p>除数函数：$\sigma_k(n) &#x3D; \sum \limits_{d \mid n} d^k$，$\sigma_0(n)$ 通常记作 $\operatorname{d}(n)$ 或 $\tau(n)$ <em>（即约数的个数）</em>，$\sigma_1(n)$ 通常记作 $\sigma(n)$</p></li><li><p>欧拉函数：$\varphi(n) &#x3D; \sum \limits_{i&#x3D;1}^{n} \left[ \gcd(i,n) &#x3D; 1 \right]$，即小于等于 $n$ 的数中与 $n$ 互质的数的个数</p></li><li><p>莫比乌斯函数：$\mu(n) &#x3D; \begin{cases} 1 &amp; n&#x3D;1\ 0 &amp; \exists d &gt; 1, \operatorname{s.t.} d^2 \mid n \ -1^{\omega(n)} &amp; otherwise \ \end{cases}$</p><blockquote><p>$\exists d &gt; 1, \operatorname{s.t.} d^2 \mid n$ 即存在一个质因子出现了两次以上。</p><p>$\omega(n)$ 表示 $n$ 的本质不同的质因子的个数。</p></blockquote></li></ol><h1 id="Dirichlet-卷积"><a href="#Dirichlet-卷积" class="headerlink" title="Dirichlet 卷积"></a>Dirichlet 卷积</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>定义两个数论函数的 Dirichlet 卷积为<br>$$<br>(f \ast g) (x) &#x3D; \sum \limits_{d \mid x} f(d)g(\frac{x}{d})<br>$$</p><h2 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h2><p>Dirichlet 卷积满足交换律和结合律。</p><p>其中 $\varepsilon$ 为 Dirichlet 卷积的单位元，即对任意数论函数 $f(x)$，都有 $f(x) \ast \varepsilon &#x3D; f(x)$</p><h2 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h2><h1 id="莫比乌斯函数"><a href="#莫比乌斯函数" class="headerlink" title="莫比乌斯函数"></a>莫比乌斯函数</h1><h2 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h2><p>$\mu$ 为莫比乌斯函数，其定义为<br>$$<br>\mu(n) &#x3D; \begin{cases}<br>1, &amp; n&#x3D;1 \<br>0, &amp; \exists d &gt; 1, \operatorname{s.t.} d^2 \mid n \<br>-1^{\omega(n)}, &amp; otherwise \<br>\end{cases}<br>$$</p><h2 id="性质-2"><a href="#性质-2" class="headerlink" title="性质"></a>性质</h2><p>莫比乌斯函数是积性函数，且它还有以下性质：<br>$$<br>\sum \limits_{d \mid n} \mu(d) &#x3D; \begin{cases}<br>1, &amp; n &#x3D; 1 \<br>0, &amp; n \ne 1<br>\end{cases}<br>$$<br>即 $\sum \limits_{d \mid n} \mu(d) &#x3D; \varepsilon(n)$，即 $\mu \ast 1 &#x3D; \varepsilon$</p><h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><p>设 $n &#x3D; \prod \limits_{i&#x3D;1}^{k} p_{i}^{c_i}, n’&#x3D;\prod \limits_{i&#x3D;1}^{k} p_{i}$，</p><p>那么 $\sum \limits_{d \mid n} \mu(d) &#x3D; \sum \limits_{d \mid n’} \mu(d) &#x3D; \sum \limits_{i&#x3D;1}^{k} \binom{k}{i} \cdot (-1)^{i}$，</p><p>根据二项式定理，可以知道 $\sum \limits_{i&#x3D;1}^{k} \binom{k}{i} \cdot (-1)^{i} &#x3D; \left[1+(-1)\right]^{k}$。</p><p>所以 $\sum \limits_{d \mid n} \mu(d)$ 在 $k&#x3D;0$ 时等于 $1$，否则等于 $0$，即 $\sum \limits_{d \mid n} \mu(d) &#x3D; \varepsilon(n)$。</p><h2 id="补充结论"><a href="#补充结论" class="headerlink" title="补充结论"></a>补充结论</h2><p>反演结论：$\left[ gcd(i,j) &#x3D; 1 \right] \iff \sum \limits_{d \mid gcd(i,j)} \mu(d)$</p><p><strong>证明：</strong>直接用上面的结论推导即可。</p><h2 id="线性筛"><a href="#线性筛" class="headerlink" title="线性筛"></a>线性筛</h2><p>线性筛几乎可以筛所有的积性函数，$\mu$ 也不例外。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getMu</span><span class="hljs-params">()</span> </span>&#123;<br>  mu[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= N; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (!vis[i]) p[++tot] = i, mu[i] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= tot &amp;&amp; i * p[j] &lt;= N; ++j) &#123;<br>      vis[i * p[j]] = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">if</span> (i % p[j] == <span class="hljs-number">0</span>) &#123;<br>        mu[i * p[j]] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>      mu[i * p[j]] = -mu[i];<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="莫比乌斯反演"><a href="#莫比乌斯反演" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h1><h2 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h2><p>对于两个数论函数 $f(n),g(n)$，若<br>$$<br>f(n) &#x3D; \sum \limits_{d \mid n} g(d)<br>$$<br>则<br>$$<br>g(n) &#x3D; \sum \limits_{d \mid n} \mu(d) f(\frac{n}{d})<br>$$</p><h2 id="证明-1"><a href="#证明-1" class="headerlink" title="证明"></a>证明</h2><p><strong>法一：运用数论变换</strong><br>$$<br>\sum \limits_{d \mid n} \mu(d) f(\frac{n}{d}) &#x3D; \sum \limits_{d \mid n} \mu(d) \sum \limits_{k \mid \frac{n}{d}} g(k) &#x3D; \sum \limits_{k \mid n} g(k) \sum \limits_{d \mid \frac{n}{k}} \mu(d)<br>$$<br>然后由 $\sum \limits_{d \mid n} \mu(d) &#x3D; \varepsilon(n)$ 可知，只有当 $n&#x3D;k$ 时，最后一步中的 $\sum \limits_{d \mid \frac{n}{k}}$ 才等于 $1$，所以 $\sum \limits_{k \mid n} g(k) \sum \limits_{d \mid \frac{n}{k}} \mu(d) &#x3D; \sum \limits_{d \mid n} \mu(d) f(\frac{n}{d}) &#x3D; g(n)$ 。</p><p>证毕。</p><p><strong>法二：利用卷积</strong></p><p>原问题为：已知 $f &#x3D; g\ast 1$，证明 $g &#x3D; f \ast \mu$</p><p>$f \ast \mu &#x3D; g \ast 1 \ast \mu &#x3D; g$ （其中 $1\ast \mu &#x3D; \varepsilon$）</p><h2 id="非卷积形式"><a href="#非卷积形式" class="headerlink" title="非卷积形式"></a>非卷积形式</h2><p>对于数论函数 $f,g$ 和完全非积性函数 $t$，且 $t(1)&#x3D;1$，则<br>$$<br>f(n) &#x3D; \sum \limits_{i&#x3D;1}^{n} \mu(i) t(i) g(\lfloor \frac{n}{i} \rfloor) \<br>\iff g(n) &#x3D; \sum \limits_{i&#x3D;1}^{n} \mu(i) t(i) f(\lfloor \frac{n}{i} \rfloor)<br>$$</p><p><del>证明留作习题。</del></p><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><ol><li><a href="https://www.cnblogs.com/newbielyx/p/13126415.html">[HAOI2011]Problem b</a></li><li><a href="https://www.cnblogs.com/newbielyx/p/13127268.html">[UR #5]怎样跑得更快</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>莫比乌斯反演</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>整除分块</title>
    <link href="/2020/06/05/%E6%95%B4%E9%99%A4%E5%88%86%E5%9D%97/"/>
    <url>/2020/06/05/%E6%95%B4%E9%99%A4%E5%88%86%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><p>一开始是在写<a href="https://www.luogu.com.cn/problem/P6583">洛谷月赛题</a>的，后来发现需要用到整除分块，然后发现这东西似乎在莫比乌斯反演中会用到？所以就突然决定要学<del>莫比鸟斯</del>反演。</p><h1 id="CQOI2007-余数求和"><a href="#CQOI2007-余数求和" class="headerlink" title="[CQOI2007]余数求和"></a>[CQOI2007]余数求和</h1><p>先来康康这道<a href="https://www.luogu.com.cn/problem/P2261">例题</a>：</p><p>给出正整数 $n$ 和 $k$，请计算<br>$$<br>G(n, k) &#x3D; \sum_{i &#x3D; 1}^n k \bmod i<br>$$<br>其中 $k\bmod i$ 表示 $k$ 除以 $i$ 的余数。$1 \leq n, k \leq 10^9$</p><p>直接算肯定是<del>布星</del>的，先来稍微将<del>柿子</del>变换<del>亿</del>下：<br>$$<br>G(n, k) &#x3D; \sum_{i &#x3D; 1}^n k \bmod i &#x3D; \sum_{i&#x3D;1}^{n} k - i * \lfloor \frac{n}{i} \rfloor &#x3D; n * k - \sum_{i&#x3D;1}^{n} i * \lfloor \frac{n}{i} \rfloor<br>$$<br>这样就转变成了计算 $\sum \limits_{i&#x3D;1}^{n} i * \lfloor \frac{n}{i} \rfloor$</p><h1 id="整除分块"><a href="#整除分块" class="headerlink" title="整除分块"></a>整除分块</h1><p>$$<br>\sum \limits_{i&#x3D;1}^{n} \lfloor \frac{n}{i} \rfloor<br>$$</p><p>可以发现上面这个式子中有很多连续的块的取值都是一样的，所以我们可以一次性将整块的信息处理出来，即：</p><p>对于任意一个 $i$，我们需要找到一个最大的 $j$，使得 $\lfloor \frac{n}{i} \rfloor \le \lfloor \frac{n}{j} \rfloor$，而 $j &#x3D; \lfloor \frac{n}{\lfloor \frac{n}{i} \rfloor} \rfloor$。</p><p><strong>略证：</strong><br>$$<br>\begin{split}<br>&amp;\lfloor \frac{n}{i} \rfloor \le \frac{n}{i} \<br>&amp;\implies \lfloor \frac{n}{\lfloor \frac{n}{i} \rfloor} \rfloor \ge \lfloor \frac{n}{\frac{n}{i}} \rfloor &#x3D; \lfloor i \rfloor &#x3D; i \<br>&amp;\implies i \le \lfloor \frac{n}{\lfloor \frac{n}{i} \rfloor} \rfloor<br>\end{split}<br>$$<br>即<br>$$<br>j &#x3D; \lfloor \frac{n}{\lfloor \frac{n}{i} \rfloor} \rfloor<br>$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> N, ans;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  cin &gt;&gt; N;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r; l &lt;= N; l = r + <span class="hljs-number">1</span>) &#123;<br>    r = N / (N / l);<br>    ans += (r - l + <span class="hljs-number">1</span>) * (N / l);<br>    cout &lt;&lt; l &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; r &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ans &lt;&lt; endl;<br>  &#125;<br>  cout &lt;&lt; ans &lt;&lt; endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>整除分块</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多项式全家桶</title>
    <link href="/2020/01/20/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    <url>/2020/01/20/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%85%A8%E5%AE%B6%E6%A1%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="多项式乘法"><a href="#多项式乘法" class="headerlink" title="多项式乘法"></a>多项式乘法</h1><p>$FFT \Rightarrow$ <a href="https://www.cnblogs.com/newbielyx/p/12076067.html">传送门</a></p><p>$NTT \Rightarrow$ <a href="https://www.cnblogs.com/newbielyx/p/12080076.html">传送门</a></p><p>$FFT$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">FFT</span><span class="hljs-params">(<span class="hljs-type">int</span> lim, Complex *a, <span class="hljs-type">int</span> op)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i)<br><span class="hljs-keyword">if</span> (i &lt; r[i]) <span class="hljs-built_in">swap</span>(a[i], a[r[i]]);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">2</span>; len &lt;= lim; len &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-type">int</span> mid = len &gt;&gt; <span class="hljs-number">1</span>;<br>Complex Wn = &#123;<span class="hljs-built_in">cos</span>(Pi / mid), op * <span class="hljs-built_in">sin</span>(Pi / mid)&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; i += len) &#123;<br>Complex w = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; mid; ++j, w = w * Wn) &#123;<br>Complex x = a[i + j], y = w * a[i + j + mid];<br>a[i + j] = x + y;<br>a[i + j + mid] = x - y;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>$NTT$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">ll <span class="hljs-title">root</span><span class="hljs-params">(<span class="hljs-type">const</span> ll p)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= p; ++i) &#123;<br><span class="hljs-type">int</span> x = p - <span class="hljs-number">1</span>;<br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">2</span>; k * k &lt;= p - <span class="hljs-number">1</span>; ++k) <span class="hljs-keyword">if</span> (!(x % k)) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">ksm</span>(i, (p - <span class="hljs-number">1</span>) / k) == <span class="hljs-number">1</span>) &#123;<br>flag = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">while</span> (!(x % k)) x /= k;<br>&#125;<br><span class="hljs-keyword">if</span> (flag &amp;&amp; (x == <span class="hljs-number">1</span> || <span class="hljs-built_in">ksm</span>(i, (p - <span class="hljs-number">1</span>) / x) != <span class="hljs-number">1</span>)) <span class="hljs-keyword">return</span> i;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">NTT</span><span class="hljs-params">(<span class="hljs-type">int</span> lim, ll *a, <span class="hljs-type">int</span> op)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i)<br><span class="hljs-keyword">if</span> (i &lt; r[i]) <span class="hljs-built_in">swap</span>(a[i], a[r[i]]);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">2</span>; len &lt;= lim; len &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-type">int</span> mid = len &gt;&gt; <span class="hljs-number">1</span>;<br>ll Wn = <span class="hljs-built_in">ksm</span>(op == <span class="hljs-number">1</span> ? G : Gx, (mod - <span class="hljs-number">1</span>) / len);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; i += len) &#123;<br>ll w = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; mid; ++j, w = (w * Wn) % mod) &#123;<br>ll x = a[i + j], y = w * a[i + j + mid] % mod;<br>a[i + j] = (x + y) % mod;<br>a[i + j + mid] = (x - y + mod) % mod;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="多项式求逆"><a href="#多项式求逆" class="headerlink" title="多项式求逆"></a>多项式求逆</h1><p>当多项式只有一项时，那么显然 $G_0$ 就是 $F_0$ 的逆元。</p><p>考虑一般情况下，如果我们已知 $F(x) H(x) \equiv 1 (\mod x^{\lceil \frac{n}{2} \rceil})$ ，如何求出 $F(X)G(x) \equiv 1(\mod x^n)$</p><p>已知 $F(x) H(x) \equiv 1 (\mod x^{\lceil \frac{n}{2} \rceil})$</p><p>又显然 $F(X)G(x) \equiv 1(\mod x^{\lceil \frac{n}{2} \rceil})$</p><blockquote><p>模 $x ^ n$ 相当于将次数大于等于 $n$ 的项舍去了，模 $x^{\lceil \frac{n}{2} \rceil}$ 则相当于舍去了更多的项，所以前者满足，后者一定满足。</p></blockquote><p>将两个式子相减 $F(x)\left[ G(x) - H(x) \right] \equiv 0 (\mod x ^ {\lceil \frac{n}{2} \rceil})$</p><p>即 $G(x) - H(x) \equiv 0 (\mod x ^ {\lceil \frac{n}{2} \rceil})$</p><p>然后将两边·平方一下<br>$$<br>G^2(x) - 2G(x)H(x)+ H^2(x) \equiv 0 (\mod x^{\lceil \frac{n}{2} \rceil})<br>$$<br>由于 $G(x)-H(x)$ 在 模 $x^{\lceil \frac{n}{2} \rceil}$ 下为 $0$，所以这个式子的结果的 $0$ 到 $\lceil \frac{n}{2} \rceil - 1$ 次项系数都为 $0$。</p><p>而平方之后，对于结果的 $i$ 次项（$0 \le i \le 2 \times \lceil \frac{n}{2} \rceil - 1$），其系数 $a_i&#x3D;\sum \limits_{j&#x3D;0}^{i} a_j a_{i-j}$， 其中 $a_j$ 和 $a_{i-j}$ 必定至少有一项小于等于 $\lceil \frac{n}{2} \rceil - 1$，所以可以得知，平方之后的式子在模 $x^n$ 意义下也为 $0$。<br>$$<br>G^2(x) - 2G(x)H(x)+ H^2(x) \equiv 0 (\mod x^{n})<br>$$<br>给式子乘上一个 $F(x)$，得到<br>$$<br>F(x)G^2(x) - 2F(x)G(x)H(x)+ F(x)H^2(x) \equiv 0 (\mod x^{n})<br>$$<br>由多项式乘法逆的定义 $F(x)G(x)\equiv 0(\mod x ^n)$可以得到<br>$$<br>G(x) - 2H(x)+ F(x)H^2(x) \equiv 0 (\mod x^{n})<br>$$<br>再移项<br>$$<br>G(x) \equiv 2H(x)+ F(x)H^2(x) (\mod x^{n})<br>$$<br>于是就可以不断倍增，求出多项式乘法逆。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">polyinv</span><span class="hljs-params">(<span class="hljs-type">int</span> len, <span class="hljs-type">int</span> *A, <span class="hljs-type">int</span> * B)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (len == <span class="hljs-number">1</span>) &#123;<br>B[<span class="hljs-number">0</span>] = <span class="hljs-built_in">fpow</span>(A[<span class="hljs-number">0</span>], P - <span class="hljs-number">2</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> tmp[_];<br><span class="hljs-built_in">polyinv</span>((len + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>, A, B);<br><span class="hljs-type">int</span> lim = <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (lim &lt; (len &lt;&lt; <span class="hljs-number">1</span>)) lim &lt;&lt;= <span class="hljs-number">1</span>, ++k;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) r[i] = (r[i &gt;&gt; <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">1</span>) | ((i &amp; <span class="hljs-number">1</span>) &lt;&lt; (k - <span class="hljs-number">1</span>));<br><span class="hljs-built_in">copy</span>(A, A + len, tmp);<br><span class="hljs-built_in">fill</span>(tmp + len, tmp + lim, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">NTT</span>(lim, tmp, <span class="hljs-number">1</span>);<br><span class="hljs-built_in">NTT</span>(lim, B, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i)<br>B[i] = (<span class="hljs-number">2ll</span> - <span class="hljs-number">1ll</span> * B[i] * tmp[i] % P + P) * B[i] % P;<br><span class="hljs-built_in">NTT</span>(lim, B, <span class="hljs-number">-1</span>);<br><span class="hljs-built_in">fill</span>(B + len, B + lim, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="多项式除法"><a href="#多项式除法" class="headerlink" title="多项式除法"></a>多项式除法</h1><p>给定一个 $n$ 次多项式 $F(x)$ 和一个 $m$ 次多项式  $G(x)$ ，求出多项式 $Q(x)$, $R(x)$，满足：</p><ul><li>$Q(x)$ 次数为 $n-m$，$R(x)$ 次数小于 $m$</li><li>$F(x) &#x3D; Q(x) * G(x) + R(x)$</li></ul><p>首先考虑一种操作 $R$ ，使得<br>$$<br>A^R(x) &#x3D; x^n A(\frac{1}{x})<br>$$<br>这个操作实际上是将 $A(x)$ 的系数反转。</p><p>接下来，考虑将 $F(x) &#x3D; Q(x) * G(x) + R(x)$ 中的 $x$ 全部用 $\frac{1}{x}$ 替代，然后等式两边同时乘上 $x ^ n$，得到<br>$$<br>x^n F(\frac{1}{x}) &#x3D; x^n Q(x) * G(x) + x^n R(x) \<br>x^n F(\frac{1}{x}) &#x3D; x^{n-m} Q(x) * x^m G(x) + x^{n-m+1} x^{m-1} R(x)<br>$$<br>即<br>$$<br>F^R(x) &#x3D; Q^R(x) G^R(x) + x^{n-m+1} R^R(x)<br>$$<br>比较难搞的是 $R(x)$，考虑怎么消掉它。</p><p>仔细观察一下，可以发现，$Q(x)$ 反转后次数不会高于 $n-m$，而 $x^{n-m+1} R^R(x)$ 的最低次项次数高于 $n-m$，因此，将上面的式子放到模 $x^{n-m+1}$ 意义下，$R(x)$ 就被消掉了。而由于 $F(x),G(x)$ 是已知的元素，因此不会有任何问题。</p><p>所以<br>$$<br>F^R(x) &#x3D; Q^R(x) G^R(x) (\mod x^{n-m+1})<br>$$<br>即<br>$$<br>Q^R(x) \equiv F^R(x)G^R(x)^{-1} (\mod x^{n-m+1})<br>$$<br>系数反转可以直接 $\text{reverse}$ 实现，只要求出 $G^R(x)$，就可以得到 $Q^R(x)$，然后反转回来回代，就得到了 $R(x)$。时间复杂度 $O(N\log N)$。</p><h1 id="多项式开方"><a href="#多项式开方" class="headerlink" title="多项式开方"></a>多项式开方</h1><p>已知 $F(x)$ ，求 $G(x)$ 使得 $G^2\equiv F\pmod{x^n}$。</p>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多项式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>积性函数与筛法</title>
    <link href="/2020/01/20/%E7%A7%AF%E6%80%A7%E5%87%BD%E6%95%B0%E4%B8%8E%E7%AD%9B%E6%B3%95/"/>
    <url>/2020/01/20/%E7%A7%AF%E6%80%A7%E5%87%BD%E6%95%B0%E4%B8%8E%E7%AD%9B%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="积性函数"><a href="#积性函数" class="headerlink" title="积性函数"></a>积性函数</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>积性函数</strong>：若一个定义在正整数域上的函数，$\forall \gcd(x,y)&#x3D;1, f(xy) &#x3D; f(x)f(y)$，则称 $f(x)$ 为积性函数。</p><blockquote><p><strong>常见的积性函数</strong></p><p>$\mu(n)$：莫比乌斯函数</p><p>$\varphi(n)$：欧拉函数</p><p>$\gcd(n,k)$：k为定值</p><p>$d(n)$：$n$ 的约数个数</p><p>$\sigma(n)$：$n$ 的约数和</p><p>$\sigma_k(n)$：因子函数，$n$ 的所有正因子的 $k$ 次幂之和，当中 $k$ 可为任何复数。</p></blockquote><p><strong>完全积性函数</strong>：若一个定义在正整数域上的函数，$\forall x,y,f(xy)&#x3D;f(x)f(y)$，则称 $f(x)$ 为完全积性函数。</p><blockquote><p><strong>常见的完全积性函数</strong></p><p>$I(n)&#x3D;1$：不变的函数</p><p>$Id(n)&#x3D;n$：单位函数</p><p>$Id_k(n)&#x3D;n^k$：幂函数</p><p>$\epsilon(n)$：若 $n&#x3D;1$，$\epsilon(n)&#x3D;1$；若 $n &gt; 1$，$\epsilon(n)&#x3D;0$。别称为“对于狄利克雷卷积的乘法单位”。</p></blockquote><h2 id="狄利克雷卷积"><a href="#狄利克雷卷积" class="headerlink" title="狄利克雷卷积"></a>狄利克雷卷积</h2><p><strong>两个积性函数的狄利克雷卷积还是积性函数</strong>。</p><blockquote><p>狄利克雷卷积：$F(n) &#x3D; \sum \limits_{d|n} f(d) g(\frac{n}{d})$</p></blockquote><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p><strong>任意</strong>积性函数都可以线性筛。</p><h1 id="线性筛"><a href="#线性筛" class="headerlink" title="线性筛"></a>线性筛</h1><p>线性筛可以在严格 $O(n)$ 的时间内筛出积性函数的值。</p><h2 id="一些约定"><a href="#一些约定" class="headerlink" title="一些约定"></a>一些约定</h2><p>在下文中如无特殊说明，默认 $p_i$ 表示 $n$ 质因数分解之后第 $i$ 个质数，$a_i$ 表示 $p_i$ 的指数</p><h2 id="线性筛素数"><a href="#线性筛素数" class="headerlink" title="线性筛素数"></a>线性筛素数</h2><p>保证每个数只会被它的最小质因子给筛掉，所有线性筛积性函数都必须基于线性筛素数。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">prime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">if</span> (!vis[i]) &#123;<br>vis[i] = i;<br>p[++cnt] = i;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= cnt; ++j) &#123;<br><span class="hljs-keyword">if</span> (p[j] &gt; vis[i] || i * p[j] &gt; n) <span class="hljs-keyword">break</span>;<br>vis[i * p[j]] = p[j];<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线性筛莫比乌斯函数"><a href="#线性筛莫比乌斯函数" class="headerlink" title="线性筛莫比乌斯函数"></a>线性筛莫比乌斯函数</h2><p>根据莫比乌斯函数的定义：<br>$$<br>\mu(n) &#x3D; \begin{cases}1, &amp; n&#x3D;1 \(-1)^k, &amp; k为n的本质不同质因子个数 \0, &amp; n含有平方因子\end{cases}<br>$$<br>直接筛即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getMu</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>mu[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">if</span> (!vis[i]) p[++cnt] = i, mu[i] = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= cnt &amp;&amp; i * p[j] &lt;= n; ++j) &#123;<br>vis[i * p[j]] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (i % p[j]) mu[i * p[j]] = - mu[i];<br><span class="hljs-keyword">else</span> &#123;<br>mu[i * p[j]] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="线性筛欧拉函数"><a href="#线性筛欧拉函数" class="headerlink" title="线性筛欧拉函数"></a>线性筛欧拉函数</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getPhi</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>phi[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">if</span> (!vis[i]) p[++cnt] = i, phi[i] = i - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= cnt &amp;&amp; i * p[j] &lt;= n; ++j) &#123;<br>vis[i * p[j]] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (i % p[j] == <span class="hljs-number">0</span>) &#123;<br>phi[i * p[j]] = phi[i] * p[j];<br><span class="hljs-keyword">break</span>;<br>&#125;<br>phi[i * p[j]] = phi[i] * phi[p[j]];<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="线性筛约数个数"><a href="#线性筛约数个数" class="headerlink" title="线性筛约数个数"></a>线性筛约数个数</h1>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>积性函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim日常配置</title>
    <link href="/2020/01/19/vim%E6%97%A5%E5%B8%B8%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/01/19/vim%E6%97%A5%E5%B8%B8%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">set</span> guifont=Monaco\ <span class="hljs-number">11</span><br><span class="hljs-keyword">syntax</span> <span class="hljs-keyword">on</span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">number</span><br><span class="hljs-keyword">set</span> showmatch<br><span class="hljs-keyword">set</span> autoindent<br><span class="hljs-keyword">set</span> smartindent<br><span class="hljs-keyword">set</span> tabstop=<span class="hljs-number">2</span><br><span class="hljs-keyword">set</span> <span class="hljs-built_in">shiftwidth</span>=<span class="hljs-number">2</span><br><span class="hljs-keyword">set</span> mouse=<span class="hljs-keyword">a</span><br><span class="hljs-keyword">set</span> autoread<br><span class="hljs-keyword">set</span> nowrap<br><span class="hljs-keyword">set</span> hlsearch<br><span class="hljs-keyword">map</span> <span class="hljs-symbol">&lt;F5&gt;</span> : <span class="hljs-keyword">call</span> Compile() <span class="hljs-symbol">&lt;CR&gt;</span><br>func! Compile()<br>  exec <span class="hljs-string">&#x27;w&#x27;</span><br>  exec <span class="hljs-string">&#x27;!g++ % -lm -Wall -std=c++11 -O2 -o %&lt;&#x27;</span><br>  exec <span class="hljs-string">&#x27;!time ./%&lt;&#x27;</span><br>endfunc<br><br><span class="hljs-keyword">autocmd</span> BufNewFile *.cpp,*.<span class="hljs-keyword">cc</span> exec <span class="hljs-string">&quot;:call SetTitle()&quot;</span> <br><br>func SetTitle() <br>    <span class="hljs-keyword">call</span> <span class="hljs-built_in">setline</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;#include &lt;bits/stdc++.h&gt;&quot;</span>)<br><span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">0</span>, <span class="hljs-string">&quot;using namespace std;&quot;</span>)<br><span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>, <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">2</span>, <span class="hljs-string">&quot;int main() &#123;&quot;</span>)<br><span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">3</span>, <span class="hljs-string">&quot;#ifndef ONLINE_JUDGE&quot;</span>)<br><span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">4</span>, <span class="hljs-string">&quot;freopen(\&quot;.in\&quot;, \&quot;r\&quot;, stdin);&quot;</span>)<br><span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">5</span>, <span class="hljs-string">&quot;freopen(\&quot;.out\&quot;, \&quot;w\&quot;, stdout);&quot;</span>)<br><span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">6</span>, <span class="hljs-string">&quot;#endif&quot;</span>)<br><span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">7</span>, <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">8</span>, <span class="hljs-string">&quot;return 0;&quot;</span>)<br><span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">9</span>, <span class="hljs-string">&quot;&#125;&quot;</span>)<br><span class="hljs-keyword">autocmd</span> BufNewFile * <span class="hljs-keyword">normal</span> G<br>endfunc<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[SCOI2015]小凸玩矩阵 - 二分 + 二分图最大匹配 + 最大流</title>
    <link href="/2020/01/18/SCOI2015%E5%B0%8F%E5%87%B8%E7%8E%A9%E7%9F%A9%E9%98%B5-%E4%BA%8C%E5%88%86-%E4%BA%8C%E5%88%86%E5%9B%BE%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D-%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    <url>/2020/01/18/SCOI2015%E5%B0%8F%E5%87%B8%E7%8E%A9%E7%9F%A9%E9%98%B5-%E4%BA%8C%E5%88%86-%E4%BA%8C%E5%88%86%E5%9B%BE%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D-%E6%9C%80%E5%A4%A7%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给定一个 $n \times m$ 的矩阵，从中选出 $n$ 个数，使得任意两数不在同一行或同一列。问第 $k$ 大数字的最小值是多少。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>二分答案，将大于等于 $mid$ 的数看作 $1$，将小于 $mid$ 的数看作 $0$，然后 $\text{check}$ 一下最大匹配是否超过 $K$ 即可。</p><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><p>于是满心欢喜地提交，听取 $WA$ 声一片。你真以为就这么简单？\cy</p><p>发现这样求出来的是第 $K$ 大数字的最大值，因为每次二分需要尽量的减少为 $1$ 的数，也就是说，我们的答案是尽量地往上“怼”的。</p><p>只要将第 $K$ 大转化为第 $N - K + 1$ 小即可。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">int</span> N, M, K, A[<span class="hljs-number">255</span>][<span class="hljs-number">255</span>], T[<span class="hljs-number">255</span>][<span class="hljs-number">255</span>];<br><span class="hljs-type">int</span> tot, head[_], to[_ &lt;&lt; <span class="hljs-number">1</span>], nxt[_ &lt;&lt; <span class="hljs-number">1</span>], edge[_ &lt;&lt; <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> z)</span> </span>&#123;<br>to[++tot] = y, edge[tot] = z, nxt[tot] = head[x], head[x] = tot;<br>to[++tot] = x, edge[tot] = <span class="hljs-number">0</span>, nxt[tot] = head[y], head[y] = tot;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> netFlow &#123;<br><span class="hljs-type">int</span> S, T, d[_], cur[_];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">memset</span>(d, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(d));<br><span class="hljs-built_in">copy</span>(head, head + N + M + <span class="hljs-number">2</span>, cur);<br>queue&lt;<span class="hljs-type">int</span>&gt; q;<br>q.<span class="hljs-built_in">push</span>(S);<br>d[S] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>()) &#123;<br><span class="hljs-type">int</span> x = q.<span class="hljs-built_in">front</span>();<br>q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i])<br><span class="hljs-keyword">if</span> (edge[i] &amp;&amp; !d[to[i]]) &#123;<br>d[to[i]] = d[x] + <span class="hljs-number">1</span>;<br>q.<span class="hljs-built_in">push</span>(to[i]);<br><span class="hljs-keyword">if</span> (to[i] == T) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> flow)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (x == T) <span class="hljs-keyword">return</span> flow;<br><span class="hljs-type">int</span> rest = flow, k;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> &amp;i = cur[x]; i; i = nxt[i])<br><span class="hljs-keyword">if</span> (edge[i] &amp;&amp; d[to[i]] == d[x] + <span class="hljs-number">1</span>) &#123;<br>k = <span class="hljs-built_in">dfs</span>(to[i], <span class="hljs-built_in">min</span>(rest, edge[i]));<br><span class="hljs-keyword">if</span> (!k) d[to[i]] = <span class="hljs-number">0</span>;<br>edge[i] -= k;<br>edge[i ^ <span class="hljs-number">1</span>] += k;<br>rest -= k;<br>&#125;<br><span class="hljs-keyword">return</span> flow - rest;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dinic</span><span class="hljs-params">(<span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t)</span> </span>&#123;<br>S = s, T = t;<br><span class="hljs-type">int</span> flow = <span class="hljs-number">0</span>, maxFlow = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>())<br><span class="hljs-keyword">while</span> (flow = <span class="hljs-built_in">dfs</span>(S, INF)) maxFlow += flow;<br><span class="hljs-keyword">return</span> maxFlow;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> mid)</span> </span>&#123;<br>tot = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">memset</span>(head, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(head));<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i)<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= M; ++j)<br><span class="hljs-keyword">if</span> (A[i][j] &lt;= mid) <span class="hljs-built_in">addEdge</span>(i, j + N, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) <span class="hljs-built_in">addEdge</span>(<span class="hljs-number">0</span>, i, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= M; ++j) <span class="hljs-built_in">addEdge</span>(j + N, N + M + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> netFlow::<span class="hljs-built_in">dinic</span>(<span class="hljs-number">0</span>, N + M + <span class="hljs-number">1</span>) &gt;= K;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;matrix.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;matrix.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br>cin &gt;&gt; N &gt;&gt; M &gt;&gt; K;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i)<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= M; ++j) &#123;<br>cin &gt;&gt; A[i][j];<br>r = <span class="hljs-built_in">max</span>(r, A[i][j]);<br>&#125;<br>K = N - K + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (l &lt; r) &#123;<br><span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) r = mid;<br><span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>&#125;<br>cout &lt;&lt; l &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>图论</category>
      
      <category>网络流</category>
      
    </categories>
    
    
    <tags>
      
      <tag>省选</tag>
      
      <tag>二分图最大匹配</tag>
      
      <tag>网络流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些数据结构杂题简要题解</title>
    <link href="/2020/01/18/%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%9D%82%E9%A2%98%E7%AE%80%E8%A6%81%E9%A2%98%E8%A7%A3/"/>
    <url>/2020/01/18/%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%9D%82%E9%A2%98%E7%AE%80%E8%A6%81%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="POI2015-Kinoman"><a href="#POI2015-Kinoman" class="headerlink" title="[POI2015] Kinoman"></a>[POI2015] Kinoman</h1><p>二维数点问题，常用套路是，<strong>枚举其中一个端点，然后维护到每个端点的区间的值</strong>。</p><p>设一部电影上一个播放日为 $pre_i$，下一个播放日为 $nxt_i$，发现每场电影 $i$ 只有在 $l &gt; pre_i,r&lt;nxt_i$ 的区间中对答案有贡献。</p><p>所以我们先将所有区间按照 $pre_i$ 从小到大排序，从左到右枚举左端点，维护一棵以右端点为下标的线段树，每次将 $pre_i&lt;l$ 的点在区间 $[i,nxt_i)$ 加入贡献，并将 $pre_i&lt;l$ 的点的贡献删除，每次取全局最大值即可。</p><p><a href="https://www.luogu.com.cn/record/29192875">代码</a></p><h1 id="ARC068E-Snuke-Line"><a href="#ARC068E-Snuke-Line" class="headerlink" title="ARC068E Snuke Line"></a>ARC068E Snuke Line</h1><p>对于每个 $d$，如果一个商品的区间长度 $\ge d$，那么这个商品一定会至少覆盖一个为 $d$ 的倍数的点，所以直接计入贡献，而对于那些区间长度 $&lt;d$ 的商品，最多只会覆盖一个点，所以不会算重，直接树状数组进行区间修改、单点查询即可。</p><p><a href="https://www.luogu.com.cn/record/29195828">代码</a></p><h1 id="CF749E-Inversions-After-Shuffle"><a href="#CF749E-Inversions-After-Shuffle" class="headerlink" title="CF749E Inversions After Shuffle"></a>CF749E Inversions After Shuffle</h1><p><strong>题意</strong>：给出一个 $1 \sim n$ 的排列，从中等概率的选取一个连续段 $[l,r]$，设其长度为 $l$。对连续段重新进行等概率的全排列，求排列后整个原序列的逆序对的期望个数。</p><p>直接计算区间的期望不太好计算，由于期望的线性性，考虑计算每一组点对 $(i,j)$ 的贡献。</p><ol><li><p>$[l,r]$ 完全包含 $(i,j)$，逆序对的期望个数为 $0.5$。对答案的贡献为<br>$$<br>\frac{\sum \limits_{i&#x3D;1}^{n} \sum \limits_{j&#x3D;i+1}^{n} 0.5\times i (n-j+1)}{\frac{n(n+1)}{2}}<br>&#x3D; \frac{\sum \limits_{i&#x3D;1}^{n} \frac{i(n-i+1)(n-i)}{2}}{n(n+1)}<br>$$<br>于是就可以 $O(n)$ 地算出来了。</p></li><li><p>$[l,r]$ 不完全包含 $(i,j)$。若 $w_i &lt; w_j$ ，则对答案的贡献为 $0$。若 $w_i &gt; w_j$ ，逆序对的期望个数则为 $1$，所以对答案的贡献为<br>$$<br>\frac{\sum \limits_{i&#x3D;1}^{n} \sum \limits_{j&#x3D;i+1}^{n} \frac{n(n+1)}{2} - i (n-j+1)}{\frac{n(n+1)}{2}} \<br>&#x3D; 1- \frac{\sum \limits_{i&#x3D;1}^{n} \sum \limits_{j&#x3D;i+1}^{n} i (n-j+1)}{\frac{n(n-1)}{2}} \<br>&#x3D; 1- \frac{\sum \limits_{i&#x3D;1}^{n} i\sum \limits_{j&#x3D;i+1}^{n}(n+1-j)}{\frac{n(n+1)}{2}},且w_i&gt;w_j<br>$$<br>所以这部分只需要对每个位置用树状数组维护其后面比它小的数的数量以及位置的和即可。</p></li></ol><p><a href="https://www.luogu.com.cn/record/29199533">代码</a></p><h1 id="CF901C-Bipartite-Segments"><a href="#CF901C-Bipartite-Segments" class="headerlink" title="CF901C Bipartite Segments"></a>CF901C Bipartite Segments</h1><p>首先，“不含偶环的无向图”是仙人掌，而二分图的充要条件是不含奇环，所以诱导子图必须是不含环。</p><p>先用 $\text{Tarjan}$ 缩点，求出每个环的编号范围 $[l,r]$，那么考虑对每个端点求出最大的合法的右端点 $nxt_i$。</p><p>对于每个询问，二分出使得 $nxt_i$ 大于 $y$ 的临界点。然后在临界点后的肯定无论如何都是合法的，直接计算即可。在临界点前的，利用 $nxt_i$ 加个前缀和进行计算即可。</p><p><a href="https://www.luogu.com.cn/record/29207891">代码</a></p><h1 id="CF903G-Yet-Another-Maxflow-Problem"><a href="#CF903G-Yet-Another-Maxflow-Problem" class="headerlink" title="CF903G Yet Another Maxflow Problem"></a>CF903G Yet Another Maxflow Problem</h1><p>首先将最大流转化为最小割。</p><p>显然 $A_i$ 和 $B_i$ 都最多只会割一条边，枚举割 $A_i$，如果割 $B_j$，那么对于所有的边 $(x,y),x\le i, y\ge j$ 都必须割掉。那么我们可以枚举 $A_i$，然后维护一棵以 $B_j$ 为下标的线段树，依次将与 $A_i$相连的边加入线段树中，查询每一个 $A_i$ 的答案取 $\min$ 即可。</p><p>然后对于修改操作，由于只修改 $A_i$ 的边，所以每个 $A_i$ 所对应的最优的 $B_j$ 是不会变的，所以只需要将每个 $A_i$ 的答案用线段树维护，单点修改，查询全局最小值即可。</p><p><a href="https://www.luogu.com.cn/record/29229279">代码</a></p><h1 id="HEOI2016-x2F-TJOI2016-排序"><a href="#HEOI2016-x2F-TJOI2016-排序" class="headerlink" title="[HEOI2016&#x2F;TJOI2016] 排序"></a>[HEOI2016&#x2F;TJOI2016] 排序</h1><p>考虑二分，每次二分出一个 $mid$ 时，将大于等于 $mid$ 的数记为 $1$，小于 $mid$ 的数记为 $0$，这样对于 $01$ 串每次排序就只是 $\log n$ 的了。最后再看一下第 $q$ 位是否为 $1$，如果为 $1$ 说明答案可以更大。</p><p><a href="https://www.luogu.com.cn/record/29220818">代码</a></p><h1 id="SCOI2016-萌萌哒"><a href="#SCOI2016-萌萌哒" class="headerlink" title="[SCOI2016] 萌萌哒"></a>[SCOI2016] 萌萌哒</h1><p>第一想法是线段树优化连边，但是由于线段树的可能会让两个对应区间的切割方式不一样，所以还是 $O(N^2)$ 的。</p><p>考虑用 $ST$ 表优化连边，令 $fa[i][j]$ 表示 $i$ 往后长度为 $j$ 的区间在并查集上的父亲。然后标记下放即可。</p><p><a href="https://www.luogu.com.cn/record/29242283">代码</a></p><h1 id="2017-山东二轮集训-Day7-国王"><a href="#2017-山东二轮集训-Day7-国王" class="headerlink" title="[2017 山东二轮集训 Day7] 国王"></a>[2017 山东二轮集训 Day7] 国王</h1><p>设 $A$ 为两个端点都在 $[l,r]$ 中的合法路径条数，$B$ 为两个端点都不在 $[l,r]$ 中的合法路径的条数，$C$ 为两个端点不在同一个区间内的合法条数。</p><p>我们这里要求的是 $A-B$，显然直接求不太好求，考虑我们求出 $f_i$ 表示以 $i$ 为其中一个端点的路径数，$sum$ 表示总路径数，那么<br>$$<br>2A + C &#x3D; \sum\limits_{i&#x3D;l}^{r} f_i \<br>2B + C &#x3D; 2 \times sum - \sum\limits_{i&#x3D;l}^{r} f_i<br>$$<br>所以<br>$$<br>A - B &#x3D; \sum \limits_{i&#x3D;l}^{r} f_i - sum<br>$$<br>还是枚举左端点，显然合法的右端点是单调递增的。然后 $f_i$ 可以利用点分治求。</p>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二分图</tag>
      
      <tag>AtCoder</tag>
      
      <tag>Codeforces</tag>
      
      <tag>省选</tag>
      
      <tag>POI</tag>
      
      <tag>网络流</tag>
      
      <tag>二维数点</tag>
      
      <tag>树状数组</tag>
      
      <tag>点分治</tag>
      
      <tag>线段树优化连边</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络流24题</title>
    <link href="/2020/01/18/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/"/>
    <url>/2020/01/18/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center">序号</th><th align="center">名称</th><th align="center">标签</th><th align="center">状态</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">飞行员配对方案问题</td><td align="center">二分图最大匹配 -&gt; 最大流</td><td align="center">$\surd$</td></tr><tr><td align="center">2</td><td align="center">太空飞行计划问题</td><td align="center">最大权闭合子图 -&gt; 最小割</td><td align="center">$\surd$</td></tr><tr><td align="center">3</td><td align="center">最小路径覆盖问题</td><td align="center">DAG最小路径覆盖 -&gt; 二分图最大匹配 -&gt; 最大流</td><td align="center">$\surd$</td></tr><tr><td align="center">4</td><td align="center">魔术球问题</td><td align="center">DAG最小路径覆盖 -&gt; 二分图最大匹配 -&gt; 最大流</td><td align="center">$\surd$</td></tr><tr><td align="center">5</td><td align="center">圆桌问题</td><td align="center">二分图多重匹配 -&gt; 最大流</td><td align="center">$\surd$</td></tr><tr><td align="center">6</td><td align="center">最长不下降子序列问题</td><td align="center">最多不相交路径 -&gt; 最大流</td><td align="center">$\surd$</td></tr><tr><td align="center">7</td><td align="center">试题库问题</td><td align="center">二分图多重匹配 -&gt; 最大流</td><td align="center">$\surd$</td></tr><tr><td align="center">8</td><td align="center">机器人路径规划问题</td><td align="center">（未解决）</td><td align="center">$\times$</td></tr><tr><td align="center">9</td><td align="center">方格取数问题</td><td align="center">二分图点权最大独立集 -&gt; 最小点覆盖 -&gt; 最小割</td><td align="center">$\surd$</td></tr><tr><td align="center">10</td><td align="center">餐巾计划问题</td><td align="center">线性规划网络优化 -&gt; 费用流</td><td align="center">$\surd$</td></tr><tr><td align="center">11</td><td align="center">航空路线问题</td><td align="center">最长不相交路径 -&gt; 费用流</td><td align="center">$\surd$</td></tr><tr><td align="center">12</td><td align="center">软件补丁问题</td><td align="center">最小转移代价 -&gt; 最短路</td><td align="center">$\surd$</td></tr><tr><td align="center">13</td><td align="center">星际转移问题</td><td align="center">最大流</td><td align="center">$\surd$</td></tr><tr><td align="center">14</td><td align="center">孤岛营救问题</td><td align="center">BFS</td><td align="center">$\surd$</td></tr><tr><td align="center">15</td><td align="center">汽车加油行驶问题</td><td align="center">分层图最短路(SPFA) -&gt; 费用流</td><td align="center">$\surd$</td></tr><tr><td align="center">16</td><td align="center">数字梯形问题</td><td align="center">最大权不相交路径 -&gt; 费用流</td><td align="center">$\surd$</td></tr><tr><td align="center">17</td><td align="center">运输问题</td><td align="center">费用流</td><td align="center">$\surd$</td></tr><tr><td align="center">18</td><td align="center">分配问题</td><td align="center">二分图最佳匹配 -&gt; 费用流</td><td align="center">$\surd$</td></tr><tr><td align="center">19</td><td align="center">负载平衡问题</td><td align="center">最小代价供求 -&gt; 费用流</td><td align="center">$\surd$</td></tr><tr><td align="center">20</td><td align="center">深海机器人问题</td><td align="center">线性规划网络优化 -&gt; 最大费用最大流</td><td align="center">$\surd$</td></tr><tr><td align="center">21</td><td align="center">最长k可重区间集问题</td><td align="center">最大权不相交路径 -&gt; 最大费用最大流</td><td align="center">$\surd$</td></tr><tr><td align="center">22</td><td align="center">最长k可重线段集问题</td><td align="center">最大权不相交路径 -&gt; 最大费用最大流</td><td align="center">$\surd$</td></tr><tr><td align="center">23</td><td align="center">火星探险问题</td><td align="center">线性规划网络优化 -&gt; 最大费用最大流</td><td align="center">$\surd$</td></tr><tr><td align="center">24</td><td align="center">骑士共存问题</td><td align="center">二分图最大独立集 -&gt; 最小点覆盖 -&gt; 最小割</td><td align="center">$\surd$</td></tr></tbody></table><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>咕咕咕。</p>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>网络流</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络流</tag>
      
      <tag>网络流24题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AGC005D ~K Perm Counting - dp、计数</title>
    <link href="/2020/01/14/AGC005D-K-Perm-Counting-dp%E3%80%81%E8%AE%A1%E6%95%B0/"/>
    <url>/2020/01/14/AGC005D-K-Perm-Counting-dp%E3%80%81%E8%AE%A1%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Desciption"><a href="#Desciption" class="headerlink" title="Desciption"></a>Desciption</h1><p>如果一个排列 $P$ 满足对于所有的 $i$ 都有 $|Pi-i|\ne k$，则称排列 $P$ 为合法的。现给出排列长度 $n$ 和 $k$，求有多少种合法的排列，答案 $924844033$ 取模。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>考虑将排列放到棋盘上。例如 $n&#x3D;6,k&#x3D;2$ 时，如下图所示，红色是不能选择的格子。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/3bid7m6e.png">然后由于合法的方案不太好计算，考虑容斥，计算不合法的方案。</p><p>设 $f_i$ 表示选了 $i$ 个不合法的数的方案数，答案即为<br>$$<br>\sum \limits_{i&#x3D;0}^{n} (-1)^i f_i (n-i)!<br>$$</p><p>发现相互冲突的格子之间形成了 $2k$ 条链，且链与链之间是相互独立的，于是我们可以把这些链拼起来，进行 $dp$。</p><p>设 $f_{i,j,0&#x2F;1}$ 表示前 $i$ 个点，选了 $j$ 条边，当前这个点与前面的点连边&#x2F;不连边的方案数，则<br>$$<br>f_{i,j,0} &#x3D; f_{i-1,j,0} + f_{i-1,j,1} \f_{i,j,1} &#x3D; f_{i-1,j-1,0},i与i-1在同一条链上<br>$$<br>注意选择的点不能在同一行或同一列，也就是说在同一条链上不能有两个点相邻。</p><p>时间复杂度 $O(N^2)$，可以用生成函数和 $NTT$ 优化到 $O(N\log N)$，但我太菜了，不会。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">4e3</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> ll mod = <span class="hljs-number">924844033</span>;<br><span class="hljs-type">int</span> tot, N, K, edge[_];<br>ll f[_][_][<span class="hljs-number">2</span>], fac[_], ans = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;count.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;count.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;N, &amp;K);<br>fac[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) fac[i] = fac[i - <span class="hljs-number">1</span>] * i % mod;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= K; ++i)<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">1</span>; t &lt;= <span class="hljs-number">2</span>; ++t)<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= N; j += K) &#123;<br>++tot;<br><span class="hljs-keyword">if</span> (j != i) edge[tot] = <span class="hljs-number">1</span>;<br>&#125;<br>f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N * <span class="hljs-number">2</span>; ++i) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= i / <span class="hljs-number">2</span>; ++j) &#123;<br>f[i][j][<span class="hljs-number">0</span>] = (f[i][j][<span class="hljs-number">0</span>] + f[i - <span class="hljs-number">1</span>][j][<span class="hljs-number">0</span>] + f[i - <span class="hljs-number">1</span>][j][<span class="hljs-number">1</span>]) % mod;<br><span class="hljs-keyword">if</span> (edge[i] &amp;&amp; j &gt; <span class="hljs-number">0</span>) f[i][j][<span class="hljs-number">1</span>] = (f[i][j][<span class="hljs-number">1</span>] + f[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>]) % mod;<br>&#125;<br>&#125;<br>ll p = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= N; ++i) &#123;<br>ans = (ans + p * (f[N * <span class="hljs-number">2</span>][i][<span class="hljs-number">0</span>] + f[N * <span class="hljs-number">2</span>][i][<span class="hljs-number">1</span>]) % mod * fac[N - i] % mod + mod) % mod;<br>p *= <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计数dp</tag>
      
      <tag>AtCoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>loj6089 小Y的背包计数问题 - 背包、计数</title>
    <link href="/2020/01/11/loj6089-%E5%B0%8FY%E7%9A%84%E8%83%8C%E5%8C%85%E8%AE%A1%E6%95%B0%E9%97%AE%E9%A2%98-dp%E3%80%81%E8%AE%A1%E6%95%B0%E3%80%81%E8%83%8C%E5%8C%85/"/>
    <url>/2020/01/11/loj6089-%E5%B0%8FY%E7%9A%84%E8%83%8C%E5%8C%85%E8%AE%A1%E6%95%B0%E9%97%AE%E9%A2%98-dp%E3%80%81%E8%AE%A1%E6%95%B0%E3%80%81%E8%83%8C%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>小 $\text{Y}$ 有一个大小为 $n$ 的背包，并且小 $\text{Y}$ 有 $n$ 种物品。</p><p>对于第 $i$ 种物品，共有 $i$ 个可以使用，并且对于每一个 $i$ 物品，体积均为 $i$。</p><p>求小 $\text{Y}$ 把该背包装满的方案数为多少，答案对于 $23333333$ 取模。</p><p>定义两种不同的方案为：当且仅当至少存在一种物品的使用数量不同。 </p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>考虑将物品分为两类，一类是小于等于 $\sqrt{N}$ 的物品，另一类式大于 $\sqrt{N}$ 的物品。</p><p>小于等于 $\sqrt{N}$ 的物品，直接跑一个多重背包，前缀和优化即可。</p><p>大于 $\sqrt{N}$ 的物品，由于每种物品不可能放入超过 $\sqrt{N}$ 个，因此可以视为无限个物品，跑一遍完全背包。</p><p>但是直接跑完全背包是 $O(N^2)$ 的，转移时有一个技巧，由于这里的物品体积都是连续的，所以转移可以分两种，一是给全部物品的体积加 $1$，二是插入一个 $\sqrt{N}+1$ 体积的物品，可以保证，这样一定能够构造出所有的方案。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> __ = <span class="hljs-number">320</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> ll mod = <span class="hljs-number">23333333</span>;<br><span class="hljs-type">int</span> N, M;<br>ll f[_], g[__][_], sum[_], ans;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;backpack.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;backpack.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;N);<br>M = <span class="hljs-built_in">sqrt</span>(N);<br>f[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= M; ++i) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; ++j) &#123;<br><span class="hljs-type">int</span> now = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = j; k &lt;= N; k += i) sum[++now] = f[k];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= now; ++k) sum[k] = (sum[k] + sum[k - <span class="hljs-number">1</span>]) % mod;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = j, p = <span class="hljs-number">1</span>; k &lt;= N; k += i, ++p)<br>f[k] = (sum[p] - sum[<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, p - i - <span class="hljs-number">1</span>)] + mod) % mod;<br>&#125;<br>&#125;<br><span class="hljs-built_in">memset</span>(sum, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(sum));<br>g[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>sum[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= M; ++i) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-built_in">min</span>(i, M + <span class="hljs-number">1</span>); j &lt;= N; ++j) &#123;<br><span class="hljs-keyword">if</span> (j &gt;= i) g[i][j] = (g[i][j] + g[i][j - i]) % mod;<br><span class="hljs-keyword">if</span> (j &gt;= M + <span class="hljs-number">1</span>) g[i][j] = (g[i][j] + g[i - <span class="hljs-number">1</span>][j - M - <span class="hljs-number">1</span>]) % mod;<br>sum[j] = (sum[j] + g[i][j]) % mod;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= N; ++i) ans = (ans + f[i] * sum[N - i] % mod) % mod;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计数dp</tag>
      
      <tag>背包</tag>
      
      <tag>LibreOJ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CF932E Team Work - 斯特林数、组合数学</title>
    <link href="/2020/01/11/CF932E-Team-Work-%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0%E3%80%81%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    <url>/2020/01/11/CF932E-Team-Work-%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0%E3%80%81%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<p>别人推公式用纸和笔，我推公式用 $\text{typora}$（确信</p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>求<br>$$<br>\sum \limits_{i&#x3D;1}^{n} \binom{n}{i} i^k<br>$$</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>首先要知道一个经典的公式<br>$$<br>n^k &#x3D; \sum \limits_{i&#x3D;0}^{k} \binom{n}{i} \begin{Bmatrix} k \ i \end{Bmatrix} i!<br>$$<br>这个式子的组合意义：左边表示将 $k$ 个有标号的球任意放入 $n$ 个有标号的盒子里；右边则是组合数枚举有多少个空盒，然后将球放入非空的盒子里，最后由于盒子不同，还要乘上一个阶乘。</p><p>然后就可以大力推式子了<br>$$<br>\sum \limits_{i&#x3D;1}^{n} \binom{n}{i} i^k &#x3D; \sum \limits_{i&#x3D;1}^{n} \binom{n}{i} \sum \limits_{j&#x3D;0}^{k} \binom{i}{j} \begin{Bmatrix} k \ j \end{Bmatrix} j! \&#x3D; \sum \limits_{i&#x3D;1}^{n} \sum \limits_{j&#x3D;0}^{k} \binom{n}{i} \binom{i}{j} \begin{Bmatrix} k \ j \end{Bmatrix} j! \&#x3D; \sum \limits_{i&#x3D;1}^{n} \sum \limits_{j&#x3D;0}^{k} \binom{n}{j} \binom{n-j}{i-j} \begin{Bmatrix} k \ j \end{Bmatrix} j! \&#x3D; \sum \limits_{i&#x3D;1}^{n} \sum \limits_{j&#x3D;0}^{k} \frac{n!}{j!(n-j)!} \binom{n-j}{n-i} \begin{Bmatrix} k \ j \end{Bmatrix} j! \&#x3D; \sum \limits_{i&#x3D;1}^{n} \sum \limits_{j&#x3D;0}^{k} \frac{n!}{(n-j)!} \binom{n-j}{n-i} \begin{Bmatrix} k \ j \end{Bmatrix} \&#x3D; \sum \limits_{j&#x3D;0}^{k} \begin{Bmatrix} k \ j \end{Bmatrix} \frac{n!}{(n-j)!} \sum \limits_{i&#x3D;1}^{n} \binom{n-j}{n-i} \&#x3D; \sum \limits_{j&#x3D;0}^{k} \begin{Bmatrix} k \ j \end{Bmatrix} \frac{n!}{(n-j)!} 2^{n-j}<br>$$<br>然后就可以直接算了。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">5000</span> + <span class="hljs-number">10</span>;<br>ll N, K, S[_][_], ans;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>S[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= K; ++i)<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; ++j)<br>S[i][j] = (S[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + S[i - <span class="hljs-number">1</span>][j] * j % mod) % mod;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">ksm</span><span class="hljs-params">(ll a, ll b)</span> </span>&#123;<br>ll ret = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> ( ; b; b &gt;&gt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) ret = ret * a % mod;<br>a = a * a % mod;<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;work.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;work.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;N, &amp;K);<br><span class="hljs-built_in">init</span>();<br>ll _2 = <span class="hljs-built_in">ksm</span>(<span class="hljs-number">2</span>, N), inv = <span class="hljs-built_in">ksm</span>(<span class="hljs-number">2</span>, mod - <span class="hljs-number">2</span>), fac = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= K; ++i) &#123;<br>ans = (ans + fac * S[K][i] % mod * _2 % mod) % mod;<br>_2 = _2 * inv % mod;<br>fac = fac * (N - i) % mod;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>斯特林数</tag>
      
      <tag>Codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组合数学相关</title>
    <link href="/2020/01/11/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6%E7%9B%B8%E5%85%B3/"/>
    <url>/2020/01/11/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/blog/wohaocaia/zu-ge-shuo-xue-di-yi-suo-xiao-zhi-shi-zong-jie-wei-wan-post">咕咕咕</a></p>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>组合数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20200109 WC模拟考试 覆盖 - dp + 计数 + bitset</title>
    <link href="/2020/01/09/20200109-WC%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95-%E8%A6%86%E7%9B%96-dp-%E8%AE%A1%E6%95%B0-bitset/"/>
    <url>/2020/01/09/20200109-WC%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95-%E8%A6%86%E7%9B%96-dp-%E8%AE%A1%E6%95%B0-bitset/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>求 $n$ 个节点的有相无环图使得最小点覆盖为 $k$ 的方案数，答案对 $2$ 取模。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>首先将最小点覆盖的模型转化为最大独立集。</p><p>由于答案对 $2$ 取模，所以解决这个问题的关键是对称性。</p><p>考虑钦定两个点，若两个点的连边情况不同，那么显然我们可以将两个点调换，这样新的图由于形态相同，所以最小点覆盖数一样，这样在模 $2$ 意义下就抵消了，对答案没有贡献。</p><p>所以我们只需考虑两个点向外连边相同的情况。</p><p>首先，我们给每个点都赋上一个权值，最初全部为 $1$，并且转化为求带权最大独立集。</p><p>考虑若两个点 $x$ 之间没有连边，那么两个点要么同时选，要么同时不选，此时可以将两个点合并，并加入一个<strong>巨大点</strong> $2x$。</p><p>若两个点 $x$ 之间有连边，则两个点只能选其一，所以去掉其中一个 $x$，对答案没有影响。</p><p>于是我们得到了转移：</p><p>设 $f[S]$ 表示点权的集合为 $S$ 时最大独立集为 $k$ 的图的个数。</p><p>那么<br>$$<br>f[S] \leftarrow f[S \backslash {x}] + f[S \backslash {x,x} \cup {2x}]<br>$$<br>若集合中有两个相同的权值，所以说我们每次有两种操作：</p><ol><li>丢掉一个权值</li><li>将两个相同的权值 $x$ 合并为 $2x$</li></ol><p>由于我们初始的点权全部为 $1$，所以最终我们得到的集合，也是 $dp$ 的边界情况，一定会是若干个互不相同的 $2$ 的正整数次幂，${2^{k_1},2^{k_2},\dots,2^{k_m}}$。</p><p>接下来是分类讨论，首先我们可以将 $k$ 二进制分解，且可以知道它的分解是唯一的。</p><p>也就是说 $S &amp; k \ne k$，即 $k$ 不是 $S$ 的子集，那么肯定是不合法的情况。</p><p>容易知道 $S &#x3D; k$ 时，方案数为 $1$。</p><p>再考虑 $k \subseteq S$ 时，$S$ 最多只能比 $k$ 多一个元素，因为若大于等于 $2$，那么这些点间两两连边或不连边最大独立集数不变，且一一对应，所以在模 $2$ 时对答案没有贡献。</p><p>否则，设 $S &#x3D; k\cup { x }$，若 $x&gt; \min k$，由于 $x$ 可以和比它小的那些边所以连边，所以方案数是 $2^w$，所以对答案贡献为 $0$。所以 $x &lt; \min k$ 时，为了使 $x$ 不被选上，必须和那些权值比它的点连边，方案数为 $2^m-1$，所以对答案的贡献为 $1$。</p><p>由此我们得到结论，$f[S]&#x3D;1$ 当且仅当 $S&#x3D;k$ 或 $s &#x3D; k + 2^x$，且 $2^{x+1} | k$。</p><p>所以我们可以设 $g[i][j]$ 表示 $i$ 个点权为 $1$ 的点，变成 $j$ 的二进制分解的方案数。</p><p>转移时枚举所有满足 $g[i-1][k]&#x3D;1$ 的 $k$，考虑加入一个点权为 $1$ 的点后，可以不断的与地位连续的一段 $1$ 合并然后扔掉，这样就枚举出 $k$ 可能到达的状态。</p><p>最后这样复杂度是 $O(N^2)$ 的，加入 $bitset$ 后就玄学的过了。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">14</span>) + <span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">14</span>;<br>bitset&lt;_&gt; f[_];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pre</span><span class="hljs-params">()</span> </span>&#123;<br>  f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; N; ++i) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; ++j) &#123;<br>      <span class="hljs-keyword">if</span> (!f[i - <span class="hljs-number">1</span>][j]) <span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = j, k = <span class="hljs-number">1</span>;; k &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br>        t ^= k &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (t &amp; k)<br>          f[i].<span class="hljs-built_in">flip</span>(t);<br>        <span class="hljs-keyword">else</span> &#123;<br>          f[i].<span class="hljs-built_in">flip</span>(t | k);<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>  <span class="hljs-type">int</span> ans = f[n][k];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; !(k &amp; (<span class="hljs-number">1</span> &lt;&lt; i)); ++i) ans ^= f[n][k ^ (<span class="hljs-number">1</span> &lt;&lt; i)];<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;cover.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;cover.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br>  <span class="hljs-built_in">pre</span>();<br>  <span class="hljs-type">int</span> T, n, k;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;T);<br>  <span class="hljs-keyword">while</span> (T--) &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);<br>    k = n - k;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">solve</span>(n, k));<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>考试</category>
      
      <category>WC2020</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计数dp</tag>
      
      <tag>bitset</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SPOJ REPEATS - Repeats - 后缀数组</title>
    <link href="/2020/01/08/SPOJ-REPEATS-Repeats-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    <url>/2020/01/08/SPOJ-REPEATS-Repeats-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>求一个字符串内重复次数最多的连续字串。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p><a href="https://hihocoder.com/problemset/problem/1419">丢一个hihocoder的链接</a></p><p>先考虑如何如何求一个串给定的串的最大重复次数，枚举一个可能的循环节长度 $l$，然后求原串和原串去掉前 $l$ 个字符后两个串的 $lcp$（最长公共前缀），如果能完全匹配上，就是一个循环节，且循环次数为 $lcp(l,i)&#x2F;l + 1$。</p><p>所以我们可以先枚举一个可能的长度 $l$，然后再枚举起点 $i$，然后通过求 $suf[i],suf[i+l]$ 的 $lcp$ 进行判断。但是其实并不需要枚举每个 $i$，只需要枚举 $l$ 的整数倍。</p><p>如果最优串的开始位置恰好在 $l$ 的倍数上，那我们找到的最大的 $k$ 就是正确答案。</p><p>如果不在 $l$ 的倍数上，那么只可能是在 $i-(l-lcp(i,i+l)% l)$。（具体证明戳上面的链接）</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">int</span> N, rk[_], sa[_], height[_];<br><span class="hljs-type">char</span> s[_];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SA</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> M = <span class="hljs-number">125</span>, p;<br>  <span class="hljs-type">static</span> <span class="hljs-type">int</span> buc[_], id[_], fir[_], oldrk[_];<br>  <span class="hljs-built_in">fill</span>(buc + <span class="hljs-number">1</span>, buc + M + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) ++buc[rk[i] = s[i]];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= M; ++i) buc[i] += buc[i - <span class="hljs-number">1</span>];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = N; i &gt;= <span class="hljs-number">1</span>; --i) sa[buc[rk[i]]--] = i;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">1</span>; len &lt; N; len &lt;&lt;= <span class="hljs-number">1</span>, M = p) &#123;<br>    p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = N; i &gt; N - len; --i) id[++p] = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i)<br>      <span class="hljs-keyword">if</span> (sa[i] &gt; len) id[++p] = sa[i] - len;<br>    <span class="hljs-built_in">fill</span>(buc + <span class="hljs-number">1</span>, buc + M + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) ++buc[fir[i] = rk[id[i]]];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= M; ++i) buc[i] += buc[i - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = N; i &gt;= <span class="hljs-number">1</span>; --i) sa[buc[fir[i]]--] = id[i];<br>    <span class="hljs-built_in">copy</span>(rk + <span class="hljs-number">1</span>, rk + N + <span class="hljs-number">1</span>, oldrk + <span class="hljs-number">1</span>);<br>    p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br>      <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>)<br>        rk[sa[i]] = ++p;<br>      <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> x = sa[i], y = sa[i - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> (oldrk[x] == oldrk[y] &amp;&amp; oldrk[x + len] == oldrk[y + len])<br>          rk[sa[i]] = p;<br>        <span class="hljs-keyword">else</span><br>          rk[sa[i]] = ++p;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p == N) <span class="hljs-keyword">break</span>;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>; i &lt;= N; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (rk[i] == <span class="hljs-number">1</span>)<br>      k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">0</span>) --k;<br>      <span class="hljs-type">int</span> j = sa[rk[i] - <span class="hljs-number">1</span>];<br>      <span class="hljs-keyword">while</span> (i + k &lt;= N &amp;&amp; j + k &lt;= N &amp;&amp; s[i + k] == s[j + k]) ++k;<br>    &#125;<br>    height[rk[i]] = k;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> ST &#123;<br><span class="hljs-type">int</span> st[_][<span class="hljs-number">21</span>], lg[_];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>  lg[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) st[i][<span class="hljs-number">0</span>] = height[i], lg[i] = lg[i &gt;&gt; <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">20</span>; ++j)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i + (<span class="hljs-number">1</span> &lt;&lt; j) - <span class="hljs-number">1</span> &lt;= N; ++i)<br>      st[i][j] = <span class="hljs-built_in">min</span>(st[i][j - <span class="hljs-number">1</span>], st[i + (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>))][j - <span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (x &gt; y) <span class="hljs-built_in">swap</span>(x, y);<br>  ++x;<br>  <span class="hljs-type">int</span> s = lg[y - x + <span class="hljs-number">1</span>];<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(st[x][s], st[y - (<span class="hljs-number">1</span> &lt;&lt; s) + <span class="hljs-number">1</span>][s]);<br>&#125;<br>&#125;  <span class="hljs-comment">// namespace ST</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lcp</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>  <span class="hljs-type">int</span> x = rk[l], y = rk[r];<br>  <span class="hljs-keyword">return</span> ST::<span class="hljs-built_in">query</span>(x, y);<br>&#125;<br><br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> L = <span class="hljs-number">1</span>; L &lt;= N; L++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i + L &lt;= N; i += L) &#123;<br>      <span class="hljs-type">int</span> R = <span class="hljs-built_in">lcp</span>(i, i + L);<br>      ans = <span class="hljs-built_in">max</span>(ans, R / L + <span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">if</span> (i &gt;= L - R % L) &#123;<br>        ans = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">lcp</span>(i - L + R % L, i + R % L) / L + <span class="hljs-number">1</span>, ans);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;repeat.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;repeat.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-type">int</span> T;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;T);<br>  <span class="hljs-keyword">while</span> (T--) &#123;<br>    ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;N);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br>      <span class="hljs-type">char</span> tmp[<span class="hljs-number">5</span>];<br>      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, tmp);<br>      s[i] = tmp[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-built_in">SA</span>();<br>    ST::<span class="hljs-built_in">init</span>();<br>    <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>字符串</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后缀数组</tag>
      
      <tag>SA</tag>
      
      <tag>SPOJ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[SDOI2008]Sandy的卡片 - 后缀数组</title>
    <link href="/2020/01/07/SDOI2008Sandy%E7%9A%84%E5%8D%A1%E7%89%87-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    <url>/2020/01/07/SDOI2008Sandy%E7%9A%84%E5%8D%A1%E7%89%87-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>$Sandy$ 和 $Sue$ 的热衷于收集干脆面中的卡片。</p><p>然而，$Sue$ 收集卡片是因为卡片上漂亮的人物形象，而 $Sandy$ 则是为了积攒卡片兑换超炫的人物模型。</p><p>每一张卡片都由一些数字进行标记，第 $i$ 张卡片的序列长度为 $M_i$，要想兑换人物模型，首先必须要集够 $N$ 张卡片，对于这 $N$ 张卡片，如果他们都有一个相同的子串长度为 $k$，则可以兑换一个等级为 $k$ 的人物模型。相同的定义为：两个子串长度相同且一个串的全部元素加上一个数就会变成另一个串。</p><p>$Sandy$ 的卡片数远远小于要求的 $N$，于是 $Sue$ 决定在 $Sandy$ 的生日将自己的卡片送给 $Sandy$，在 $Sue$ 的帮助下，$Sandy$ 终于集够了N张卡片，但是，$Sandy$ 并不清楚他可以兑换到哪个等级的人物模型，现在，请你帮助 $Sandy$ 和 $Sue$，看看他们最高能够得到哪个等级的人物模型。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>对每个字符串差分后直接求最长公共子串。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ty</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _  = <span class="hljs-number">1000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> __ = _ * _;<br><span class="hljs-type">int</span> N, n, s[__], belong[__], rnk[__], sa[__], height[__];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SA</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> t[__], a[__], buc[__], fir[__], sec[__], tmp[__];<br><span class="hljs-built_in">copy</span>(s + <span class="hljs-number">1</span>, s + N + <span class="hljs-number">1</span>, t + <span class="hljs-number">1</span>);<br><span class="hljs-built_in">sort</span>(t + <span class="hljs-number">1</span>, t + N + <span class="hljs-number">1</span>);<br><span class="hljs-type">int</span> *end = <span class="hljs-built_in">unique</span>(t + <span class="hljs-number">1</span>, t + N + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) a[i] = <span class="hljs-built_in">lower_bound</span>(t + <span class="hljs-number">1</span>, end, s[i]) - t;<br><span class="hljs-built_in">fill</span>(buc + <span class="hljs-number">1</span>, buc + N + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) ++buc[a[i]];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) buc[i] += buc[i - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) rnk[i] = buc[a[i] - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">1</span>; len &lt;= N; len &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br>fir[i] = rnk[i];<br>sec[i] = i + len &gt; N ? <span class="hljs-number">0</span> : rnk[i + len];<br>&#125;<br><span class="hljs-built_in">fill</span>(buc + <span class="hljs-number">1</span>, buc + N + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) ++buc[sec[i]];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) buc[i] += buc[i - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) tmp[N - --buc[sec[i]]] = i;<br><span class="hljs-built_in">fill</span>(buc + <span class="hljs-number">1</span>, buc + N + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) ++buc[fir[i]];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) buc[i] += buc[i - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j; i &lt;= N; ++i) &#123;<br>j = tmp[i];<br>sa[buc[fir[j]]--] = j;<br>&#125;<br><span class="hljs-type">bool</span> uni = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j, last = <span class="hljs-number">0</span>; i &lt;= N; ++i) &#123;<br>j = sa[i];<br><span class="hljs-keyword">if</span> (!last) rnk[j] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fir[j] == fir[last] &amp;&amp; sec[j] == sec[last])<br>rnk[j] = rnk[last], uni = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">else</span> rnk[j] = rnk[last] + <span class="hljs-number">1</span>;<br>last = j;<br>&#125;<br><span class="hljs-keyword">if</span> (uni) <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>; i &lt;= N; ++i) &#123;<br><span class="hljs-keyword">if</span> (rnk[i] == <span class="hljs-number">1</span>) k = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">0</span>) --k;<br><span class="hljs-type">int</span> j = sa[rnk[i] - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">while</span> (i + k &lt;= N &amp;&amp; j + k &lt;= N &amp;&amp; a[i + k] == a[j + k]) ++k;<br>&#125;<br>height[rnk[i]] = k;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> </span>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> tot, vis[_];<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>++tot;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br><span class="hljs-keyword">if</span> (height[i] &lt; k) ++tot, cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (vis[belong[sa[i]]] != tot)<br>++cnt, vis[belong[sa[i]]] = tot;<br><span class="hljs-keyword">if</span> (vis[belong[sa[i - <span class="hljs-number">1</span>]]] != tot)<br>++cnt, vis[belong[sa[i - <span class="hljs-number">1</span>]]] = tot;<br><span class="hljs-keyword">if</span> (cnt == n) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;sandy.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;sandy.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> t[_];<br>n = <span class="hljs-built_in">ty</span>();<br><span class="hljs-type">int</span> now = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>++now;<br><span class="hljs-type">int</span> m = <span class="hljs-built_in">ty</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) t[j] = <span class="hljs-built_in">ty</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) t[j] = t[j + <span class="hljs-number">1</span>] - t[j];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = now; j &lt;= now + m - <span class="hljs-number">1</span>; ++j)<br>s[j] = t[j - now + <span class="hljs-number">1</span>], belong[j] = i;<br>now += m - <span class="hljs-number">1</span>;<br>s[++now] = <span class="hljs-number">128</span> + i;<br>&#125;<br>N = now;<br><span class="hljs-built_in">SA</span>();<br><span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = N;<br><span class="hljs-keyword">while</span> (l &lt; r) &#123;<br><span class="hljs-type">int</span> mid = (l + r + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) l = mid;<br><span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, l + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>字符串</category>
      
    </categories>
    
    
    <tags>
      
      <tag>省选</tag>
      
      <tag>后缀数组</tag>
      
      <tag>SA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[POI2000]公共串 - 后缀数组</title>
    <link href="/2020/01/07/POI2000%E5%85%AC%E5%85%B1%E4%B8%B2-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    <url>/2020/01/07/POI2000%E5%85%AC%E5%85%B1%E4%B8%B2-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<p><strong>Update 2018.1.8：</strong>sto lsy orz 给出了一个 $O(n)$ 的做法。</p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>求若干个串的最长的公共子串的长度。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>考虑将这若干个串全部拼起来，中间用一些不在字符集内的符号隔开。</p><p>然后二分答案 $K$，如果连续的一段 $height$ 都大于等于 $K$，且每个串都出现了至少一次，则是可行的。</p><h2 id="O-N"><a href="#O-N" class="headerlink" title="O(N)"></a>O(N)</h2><p>并没有必要二分答案，前面是二分长度，然后 $check$ 一下是否有一段连续的 $height$ 区间使得每个值都大于等于 $K$，且每个串都出现至少一次。</p><p>反过来，我们可以枚举左端点，然后不断向右扩展右端点，当每种串都出现恰好至少一次时，就对把答案和这一段区间的 $\min$ 取个 $\max$，然后区间的 $\min$ 用单调队列维护即可。</p><p>然后可能是由于我的代码比较丑陋，且在洛谷上此题数据范围比较小，我的 $O(N)$ 居然跑得比 $O(N\log N)$ 慢。（笑</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><h2 id="O-NlogN-​"><a href="#O-NlogN-​" class="headerlink" title="O(NlogN)​"></a>O(NlogN)​</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> N, n, s[_], belong[_];<br><span class="hljs-type">int</span> rnk[_], sa[_], height[_];<br><span class="hljs-type">char</span> str[_];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SA</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> t[_], a[_], buc[_], fir[_], sec[_], tmp[_];<br><span class="hljs-built_in">copy</span>(s + <span class="hljs-number">1</span>, s + N + <span class="hljs-number">1</span>, t + <span class="hljs-number">1</span>);<br><span class="hljs-built_in">sort</span>(t + <span class="hljs-number">1</span>, t + N + <span class="hljs-number">1</span>);<br><span class="hljs-type">int</span> *end = <span class="hljs-built_in">unique</span>(t + <span class="hljs-number">1</span>, t + N + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) a[i] = <span class="hljs-built_in">lower_bound</span>(t + <span class="hljs-number">1</span>, end, s[i]) - t;<br><span class="hljs-built_in">fill</span>(buc + <span class="hljs-number">1</span>, buc + N + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) ++buc[a[i]];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) buc[i] += buc[i - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) rnk[i] = buc[a[i] - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">1</span>; len &lt;= N; len &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br>fir[i] = rnk[i];<br>sec[i] = i + len &gt; N ? <span class="hljs-number">0</span> : rnk[i + len];<br>&#125;<br><span class="hljs-built_in">fill</span>(buc + <span class="hljs-number">1</span>, buc + N + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) ++buc[sec[i]];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) buc[i] += buc[i - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) tmp[N - --buc[sec[i]]] = i;<br><span class="hljs-built_in">fill</span>(buc + <span class="hljs-number">1</span>, buc + N + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) ++buc[fir[i]];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) buc[i] += buc[i - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i, j = <span class="hljs-number">1</span>; j &lt;= N; ++j) &#123;<br>i = tmp[j];<br>sa[buc[fir[i]]--] = i;<br>&#125;<br><span class="hljs-type">bool</span> same = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i, j = <span class="hljs-number">1</span>, last = <span class="hljs-number">0</span>; j &lt;= N; ++j) &#123;<br>i = sa[j];<br><span class="hljs-keyword">if</span> (!last) rnk[i] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fir[i] == fir[last] &amp;&amp; sec[i] == sec[last])<br>rnk[i] = rnk[last], same = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> rnk[i] = rnk[last] + <span class="hljs-number">1</span>;<br>last = i;<br>&#125;<br><span class="hljs-keyword">if</span> (!same) <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>; i &lt;= N; ++i) &#123;<br><span class="hljs-keyword">if</span> (rnk[i] == <span class="hljs-number">1</span>) k = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">0</span>) --k;<br><span class="hljs-type">int</span> j = sa[rnk[i] - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">while</span> (i + k &lt;= N &amp;&amp; j + k &lt;= N &amp;&amp; a[i + k] == a[j + k]) ++k;<br>&#125;<br>height[rnk[i]] = k;<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> </span>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> vis[_], tot = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>++tot;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br><span class="hljs-keyword">if</span> (height[i] &lt; k) cnt = <span class="hljs-number">0</span>, ++tot;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (vis[belong[sa[i]]] != tot)<br>vis[belong[sa[i]]] = tot, ++cnt;<br><span class="hljs-keyword">if</span> (vis[belong[sa[i - <span class="hljs-number">1</span>]]] != tot)<br>vis[belong[sa[i - <span class="hljs-number">1</span>]]] = tot, ++cnt;<br><span class="hljs-keyword">if</span> (cnt == n) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;string.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;string.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><span class="hljs-type">int</span> now = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>++now;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(str);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = now; j &lt;= now + len - <span class="hljs-number">1</span>; ++j)<br>s[j] = str[j - now] - <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">1</span>, belong[j] = i;<br>now += len - <span class="hljs-number">1</span>;<br>s[++now] = i + <span class="hljs-number">26</span>;<br>&#125;<br>N = now;<br><span class="hljs-built_in">SA</span>();<br><span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = N;<br><span class="hljs-keyword">while</span> (l &lt; r) &#123;<br><span class="hljs-type">int</span> mid = (l + r + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) l = mid;<br><span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, l);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="O-N-1"><a href="#O-N-1" class="headerlink" title="O(N)"></a>O(N)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">int</span> N, n, s[_], belong[_];<br><span class="hljs-type">int</span> rk[_], sa[_], height[_];<br><span class="hljs-type">char</span> str[_];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">SA</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> M = <span class="hljs-number">125</span>, p = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 字符集</span><br>  <span class="hljs-type">static</span> <span class="hljs-type">int</span> buc[_], id[_], fir[_], t[_], oldrk[_];<br>  <span class="hljs-built_in">copy</span>(s + <span class="hljs-number">1</span>, s + N + <span class="hljs-number">1</span>, t + <span class="hljs-number">1</span>);<br>  <span class="hljs-built_in">sort</span>(t + <span class="hljs-number">1</span>, t + N + <span class="hljs-number">1</span>);<br>  <span class="hljs-type">int</span> *end = <span class="hljs-built_in">unique</span>(t + <span class="hljs-number">1</span>, t + N + <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) s[i] = <span class="hljs-built_in">lower_bound</span>(t + <span class="hljs-number">1</span>, end, s[i]) - t;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) ++buc[rk[i] = s[i]];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= M; ++i) buc[i] += buc[i - <span class="hljs-number">1</span>];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = N; i &gt;= <span class="hljs-number">1</span>; --i) sa[buc[rk[i]]--] = i;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> w = <span class="hljs-number">1</span>; w &lt; N; w &lt;&lt;= <span class="hljs-number">1</span>, M = p) &#123;<br>    p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = N; i &gt; N - w; --i) id[++p] = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i)<br>      <span class="hljs-keyword">if</span> (sa[i] &gt; w) id[++p] = sa[i] - w;<br>    <span class="hljs-built_in">fill</span>(buc + <span class="hljs-number">1</span>, buc + M + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) ++buc[fir[i] = rk[id[i]]];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= M; ++i) buc[i] += buc[i - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = N; i &gt;= <span class="hljs-number">1</span>; --i) sa[buc[fir[i]]--] = id[i];<br>    <span class="hljs-built_in">copy</span>(rk + <span class="hljs-number">1</span>, rk + N + <span class="hljs-number">1</span>, oldrk + <span class="hljs-number">1</span>);<br>    p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br>      <span class="hljs-type">int</span> x = sa[i], y = sa[i - <span class="hljs-number">1</span>];<br>      rk[sa[i]] =<br>          (oldrk[x] == oldrk[y] &amp;&amp; oldrk[x + w] == oldrk[y + w]) ? p : ++p;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p == N) <span class="hljs-keyword">break</span>;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>; i &lt;= N; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (rk[i] == <span class="hljs-number">1</span>)<br>      k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">0</span>) --k;<br>      <span class="hljs-type">int</span> j = sa[rk[i] - <span class="hljs-number">1</span>];<br>      <span class="hljs-keyword">while</span> (i + k &lt;= N &amp;&amp; j + k &lt;= N &amp;&amp; s[i + k] == s[j + k]) ++k;<br>    &#125;<br>    height[rk[i]] = k;<br>  &#125;<br>&#125;<br><br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">static</span> <span class="hljs-type">int</span> vis[_], cnt = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">static</span> <span class="hljs-type">int</span> q[_];<br>  <span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r &amp;&amp; q[l] &lt; i) ++l;<br>    <span class="hljs-keyword">while</span> (j &lt;= N &amp;&amp; cnt &lt; n) &#123;<br>      <span class="hljs-keyword">if</span> (!vis[belong[sa[j]]]) ++cnt;<br>      ++vis[belong[sa[j]]];<br>      <span class="hljs-keyword">while</span> (l &lt; r &amp;&amp; height[q[r - <span class="hljs-number">1</span>]] &gt;= height[j]) --r;<br>      q[r++] = j;<br>      ++j;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (cnt == n)<br>      ans = <span class="hljs-built_in">max</span>(ans, height[q[l]]);<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (i - <span class="hljs-number">1</span> &gt; <span class="hljs-number">0</span>) &#123;<br>      --vis[belong[sa[i - <span class="hljs-number">1</span>]]];<br>      <span class="hljs-keyword">if</span> (!vis[belong[sa[i - <span class="hljs-number">1</span>]]]) --cnt;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;string.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;string.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>  <span class="hljs-type">int</span> now = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>    ++now;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = now; j &lt;= now + len - <span class="hljs-number">1</span>; ++j)<br>      s[j] = str[j - now] - <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">1</span>, belong[j] = i;<br>    now += len - <span class="hljs-number">1</span>;<br>    s[++now] = i + <span class="hljs-number">26</span>;<br>  &#125;<br>  N = now;<br>  <span class="hljs-built_in">SA</span>();<br>  <span class="hljs-built_in">solve</span>();<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>字符串</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后缀数组</tag>
      
      <tag>SA</tag>
      
      <tag>POI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[USACO5.1]乐曲主题Musical Themes - 后缀数组</title>
    <link href="/2020/01/07/USACO5-1%E4%B9%90%E6%9B%B2%E4%B8%BB%E9%A2%98Musical-Themes-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    <url>/2020/01/07/USACO5-1%E4%B9%90%E6%9B%B2%E4%B8%BB%E9%A2%98Musical-Themes-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>求字符串的最长不可重叠重复子串。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>如果有两个子串相同，那么也就是有两个后缀的 $lcp$ 相同。</p><p>所以考虑二分答案 $K$，如果有连续一段的 $height$ 都不小于 $K$，那么这一段区间内，两两后缀的 $lcp$ 都不小于 $K$，那么记录一下区间的 $\max{sa_i}$ 和 $\min{sa_i}$，如果 $\max{sa_i}-\min{sa_i}\ge K$，那么就说明两个子串不重叠。</p><p>另外这题有一个“转调”的问题，只要差分一下就可以解决。不过需要注意的是，差分之后二分时的判断条件应该是 $\max{sa_i}-\min{sa_i}&gt; K$。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ty</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">5000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">int</span> N, s[_], rnk[_], sa[_], height[_];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SA</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> t[_], a[_], buc[_], fir[_], sec[_], tmp[_];<br><span class="hljs-built_in">copy</span>(s + <span class="hljs-number">1</span>, s + N + <span class="hljs-number">1</span>, t + <span class="hljs-number">1</span>);<br><span class="hljs-built_in">sort</span>(t + <span class="hljs-number">1</span>, t + N + <span class="hljs-number">1</span>);<br><span class="hljs-type">int</span> *end = <span class="hljs-built_in">unique</span>(t + <span class="hljs-number">1</span>, t + N + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) a[i] = <span class="hljs-built_in">lower_bound</span>(t + <span class="hljs-number">1</span>, end, s[i]) - t;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) ++buc[a[i]];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) buc[i] += buc[i - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) rnk[i] = buc[a[i] - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">1</span>; len &lt;= N; len &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br>fir[i] = rnk[i];<br>sec[i] = i + len &gt; N ? <span class="hljs-number">0</span> : rnk[i + len];<br>&#125;<br><span class="hljs-built_in">fill</span>(buc + <span class="hljs-number">1</span>, buc + N + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) ++buc[sec[i]];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) buc[i] += buc[i - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) tmp[N - --buc[sec[i]]] = i;<br><span class="hljs-built_in">fill</span>(buc + <span class="hljs-number">1</span>, buc + N + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) ++buc[fir[i]];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) buc[i] += buc[i - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i, j = <span class="hljs-number">1</span>; j &lt;= N; ++j) &#123;<br>i = tmp[j];<br>sa[buc[fir[i]]--] = i;<br>&#125;<br><span class="hljs-type">bool</span> same = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i, j = <span class="hljs-number">1</span>, last = <span class="hljs-number">0</span>; j &lt;= N; ++j) &#123;<br>i = sa[j];<br><span class="hljs-keyword">if</span> (!last) rnk[i] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fir[i] == fir[last] &amp;&amp; sec[i] == sec[last]) rnk[i] = rnk[last], same = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> rnk[i] = rnk[last] + <span class="hljs-number">1</span>;<br>last = i;<br>&#125;<br><span class="hljs-keyword">if</span> (!same) <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>; i &lt;= N; ++i) &#123;<br><span class="hljs-keyword">if</span> (rnk[i] == <span class="hljs-number">1</span>) k = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">0</span>) --k;<br><span class="hljs-type">int</span> j = sa[rnk[i] - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">while</span> (i + k &lt;= N &amp;&amp; j + k &lt;= N &amp;&amp; a[i + k] == a[j + k]) ++k;<br>&#125;<br>height[rnk[i]] = k;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> mid)</span> </span>&#123;<br><span class="hljs-type">int</span> minsa = INF, maxsa = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br><span class="hljs-keyword">if</span> (height[i] &lt; mid) minsa = maxsa = sa[i];<br><span class="hljs-keyword">else</span> &#123;<br>minsa = <span class="hljs-built_in">min</span>(minsa, sa[i]);<br>maxsa = <span class="hljs-built_in">max</span>(maxsa, sa[i]);<br><span class="hljs-keyword">if</span> (maxsa - minsa &gt; mid) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;theme.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;theme.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>N = <span class="hljs-built_in">ty</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) s[i] = <span class="hljs-built_in">ty</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) s[i] = s[i + <span class="hljs-number">1</span>] - s[i] + <span class="hljs-number">100</span>;<br><span class="hljs-built_in">SA</span>();<br><span class="hljs-comment">// for (int i = 1; i &lt;= N; ++i) printf(&quot;%d &quot;, height[i]);</span><br><span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = N;<br><span class="hljs-keyword">while</span> (l &lt; r) &#123;<br><span class="hljs-type">int</span> mid = (l + r + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) l = mid;<br><span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, l &gt;= <span class="hljs-number">4</span> ? l + <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>字符串</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后缀数组</tag>
      
      <tag>SA</tag>
      
      <tag>USACO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[USACO06DEC]牛奶模式Milk Patterns - 后缀数组</title>
    <link href="/2020/01/07/USACO06DEC-%E7%89%9B%E5%A5%B6%E6%A8%A1%E5%BC%8FMilk-Patterns-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    <url>/2020/01/07/USACO06DEC-%E7%89%9B%E5%A5%B6%E6%A8%A1%E5%BC%8FMilk-Patterns-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>求字符串 $s$ 的最长可重叠重复 $k$ 次子串。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>重复出现了 $k$ 次，相当于我们选择了 $k$ 个后缀，求他们的 $lcp$。</p><p>显然 $k$ 个后缀的 $rank$ 是连续的，所以重复出现 $k$ 次的前缀就是 $min(height[l+1\dots l+k-1])$。</p><p>所以我们需枚举 $i$，然后用一个递增的单调队列维护 $height[i-k+2\dots i]$ 即可。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rg register</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ty</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">2e4</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> N, K, s[_], ans = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> rnk[_], sa[_], height[_];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SA</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> t[_], a[_], buc[_], fir[_], sec[_], tmp[_];<br><span class="hljs-built_in">copy</span>(s + <span class="hljs-number">1</span>, s + N + <span class="hljs-number">1</span>, t + <span class="hljs-number">1</span>);<br><span class="hljs-built_in">sort</span>(t + <span class="hljs-number">1</span>, t + N + <span class="hljs-number">1</span>);<br><span class="hljs-type">int</span> *end = <span class="hljs-built_in">unique</span>(t + <span class="hljs-number">1</span>, t + N + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) a[i] = <span class="hljs-built_in">lower_bound</span>(t + <span class="hljs-number">1</span>, end, s[i]) - t;<br><span class="hljs-built_in">fill</span>(buc + <span class="hljs-number">1</span>, buc + N + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) ++buc[a[i]];<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) buc[i] += buc[i - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) rnk[i] = buc[a[i] - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> len = <span class="hljs-number">1</span>; len &lt;= N; len &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br>fir[i] = rnk[i];<br>sec[i] = i + len &gt; N ? <span class="hljs-number">0</span> : rnk[i + len];<br>&#125;<br><span class="hljs-built_in">fill</span>(buc + <span class="hljs-number">1</span>, buc + N + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) ++buc[sec[i]];<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) buc[i] += buc[i - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) tmp[N - --buc[sec[i]]] = i;<br><span class="hljs-built_in">fill</span>(buc + <span class="hljs-number">1</span>, buc + N + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) ++buc[fir[i]];<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) buc[i] += buc[i - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i, j = <span class="hljs-number">1</span>; j &lt;= N; ++j) &#123;<br>i = tmp[j];<br>sa[buc[fir[i]]--] = i;<br>&#125;<br><span class="hljs-type">bool</span> same = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i, j = <span class="hljs-number">1</span>, last = <span class="hljs-number">0</span>; j &lt;= N; ++j) &#123;<br>i = sa[j];<br><span class="hljs-keyword">if</span> (!last) rnk[i] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fir[i] == fir[last] &amp;&amp; sec[i] == sec[last]) rnk[i] = rnk[last], same = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> rnk[i] = rnk[last] + <span class="hljs-number">1</span>;<br>last = i;<br>&#125;<br><span class="hljs-keyword">if</span> (!same) <span class="hljs-keyword">break</span>;<br>&#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>; i &lt;= N; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (rnk[i] == <span class="hljs-number">1</span>)<br>      k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">0</span>) --k;<br>      <span class="hljs-type">int</span> j = sa[rnk[i] - <span class="hljs-number">1</span>];<br>      <span class="hljs-keyword">while</span> (i + k &lt;= N &amp;&amp; j + k &lt;= N &amp;&amp; a[i + k] == a[j + k]) ++k;<br>    &#125;<br>    height[rnk[i]] = k;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;milk.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;milk.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>N = <span class="hljs-built_in">ty</span>(), K = <span class="hljs-built_in">ty</span>();<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) s[i] = <span class="hljs-built_in">ty</span>();<br><span class="hljs-built_in">SA</span>();<br><span class="hljs-comment">/*for (int i = 1; i &lt;= N; ++i) printf(&quot;%d &quot;, height[i]);</span><br><span class="hljs-comment">puts(&quot;&quot;);*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> q[_], l, r;<br>q[l = r = <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br><span class="hljs-keyword">while</span> (l &lt; r &amp;&amp; q[l] &lt;= i - K + <span class="hljs-number">1</span>) ++l;<br><span class="hljs-keyword">while</span> (l &lt; r &amp;&amp; height[q[r - <span class="hljs-number">1</span>]] &gt;= height[i]) --r;<br>q[r++] = i;<br><span class="hljs-keyword">if</span> (i &gt;= K) ans = <span class="hljs-built_in">max</span>(ans, height[q[l]]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>字符串</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后缀数组</tag>
      
      <tag>SA</tag>
      
      <tag>USACO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>POJ2774 Long Long Message - 后缀数组</title>
    <link href="/2020/01/06/POJ2774-Long-Long-Message-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    <url>/2020/01/06/POJ2774-Long-Long-Message-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>求两个字符串的最长公共子串。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>把两个字符串拼起来，问题就转化为了求任意两个后缀的 $lcp$ 的最大长度。</p><p>显然这个最大长度是 $height_i$ 的值，$\text{SA}$ 求解即可。</p><p>需要注意的是，对于 $height_i$ 需要判断一下 $SA_i$ 和 $SA_{i-1}$ 是否在不同的串中。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> N, n, m, rnk[_], sa[_], height[_];<br><span class="hljs-type">char</span> s[_];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SA</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> a[_], buc[_], fir[_], sec[_], tmp[_];<br><span class="hljs-type">static</span> <span class="hljs-type">char</span> t[_];<br><span class="hljs-built_in">copy</span>(s + <span class="hljs-number">1</span>, s + N + <span class="hljs-number">1</span>, t + <span class="hljs-number">1</span>);<br><span class="hljs-built_in">sort</span>(t + <span class="hljs-number">1</span>, t + N + <span class="hljs-number">1</span>);<br><span class="hljs-type">char</span> *end  = <span class="hljs-built_in">unique</span>(t + <span class="hljs-number">1</span>, t + N + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) a[i] = <span class="hljs-built_in">lower_bound</span>(t + <span class="hljs-number">1</span>, end, s[i]) - t;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) ++buc[a[i]];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) buc[i] += buc[i - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) rnk[i] = buc[a[i] - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">1</span>; len &lt;= N; len &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br>fir[i] = rnk[i];<br>sec[i] = i + len &gt; N ? <span class="hljs-number">0</span> : rnk[i + len];<br>&#125;<br><span class="hljs-built_in">fill</span>(buc + <span class="hljs-number">1</span>, buc + N + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) ++buc[sec[i]];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) buc[i] += buc[i - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) tmp[N - --buc[sec[i]]] = i;<br><span class="hljs-built_in">fill</span>(buc + <span class="hljs-number">1</span>, buc + N + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) ++buc[fir[i]];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) buc[i] += buc[i - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i, j = <span class="hljs-number">1</span>; j &lt;= N; ++j) &#123;<br>i = tmp[j];<br>sa[buc[fir[i]]--] = i;<br>&#125;<br><span class="hljs-type">bool</span> only = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i, j = <span class="hljs-number">1</span>, last = <span class="hljs-number">0</span>; j &lt;= N; ++j) &#123;<br>i = sa[j];<br><span class="hljs-keyword">if</span> (!last) rnk[i] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fir[i] == fir[last] &amp;&amp; sec[i] == sec[last])<br>rnk[i] = rnk[last], only = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">else</span> rnk[i] = rnk[last] + <span class="hljs-number">1</span>;<br>last = i;<br>&#125;<br><span class="hljs-keyword">if</span> (only) <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>; i &lt;= N; ++i) &#123;<br><span class="hljs-keyword">if</span> (rnk[i] == <span class="hljs-number">1</span>) k = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">0</span>) --k;<br><span class="hljs-type">int</span> j = sa[rnk[i] - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">while</span> (i + k &lt;= N &amp;&amp; j + k &lt;= N &amp;&amp; a[i + k] == a[j + k]) ++k;<br>&#125;<br>height[rnk[i]] = k;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> </span>&#123;<br><span class="hljs-keyword">return</span> (i &lt;= n &amp;&amp; j &gt; n) | (i &gt; n &amp;&amp; j &lt;= n);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;message.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;message.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);<br>n = N = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + N + <span class="hljs-number">1</span>);<br>N = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br>m = N - n;<br><span class="hljs-built_in">SA</span>();<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= N; ++i)<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(sa[i], sa[i - <span class="hljs-number">1</span>])) ans = <span class="hljs-built_in">max</span>(ans, height[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>字符串</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后缀数组</tag>
      
      <tag>SA</tag>
      
      <tag>POJ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lyndon Word相关</title>
    <link href="/2020/01/06/Lyndon-Word%E7%9B%B8%E5%85%B3/"/>
    <url>/2020/01/06/Lyndon-Word%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="Lyndon-Word"><a href="#Lyndon-Word" class="headerlink" title="Lyndon Word"></a>Lyndon Word</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>对于字符串 $S$，若 $S$ 的最小后缀为其本身，那么称 $S$ 为 $\text{Lyndon}$ 串（$\text{Lyndon Word}$）</p><p>即<br>$$<br>S \in L \Rightarrow \begin{cases} S是严格最小循环 \ minsuf(s)&#x3D;s \end{cases}<br>$$</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>$Border(S)&#x3D;\varnothing$</p><h2 id="推论"><a href="#推论" class="headerlink" title="推论"></a>推论</h2><p>如果 $u,v \in L, u \prec v\Rightarrow uv \in L$。</p><p>$\mathcal{Proof.}$ </p><blockquote><p>$1) s&#x3D;u’v,u\triangleleft u’ \Rightarrow uv &lt; u’v$</p><p>$2) \text{to prove uv&lt;v}$</p><p>​$2.1) u \triangleleft v \Rightarrow uv&lt;v$</p><p>​$2.2) u \sqsubseteq v \Rightarrow v&#x3D;uv’,v&lt;v’ \Leftrightarrow uv&lt;uv’ \Leftrightarrow uv&lt;v$</p><p>$3) S&#x3D;v’,uv&lt;v&lt;v’$</p><p>$Q.E.D.$</p></blockquote><p><strong>PS：</strong> $\triangleleft$：严格小于，且不是前缀，必有一个字母不同，$\sqsubseteq$：前缀</p><p>$ex.$ 如果 $u,v\in L,u&lt;v \Rightarrow u^av^b\in L$</p><blockquote><p>显然。</p></blockquote><h1 id="Lyndon-分解-Lyndon-Factorization"><a href="#Lyndon-分解-Lyndon-Factorization" class="headerlink" title="Lyndon 分解 (Lyndon Factorization)"></a>Lyndon 分解 (Lyndon Factorization)</h1><p>任意字符串 $s$ 可以分解为 $s&#x3D;s_1s_2s_3\dots s_k$，其中 $s_i$ 是 $\text{Lyndon}$ 串，$s_i \ge s_{i+1}$，且这种分解方法是唯一的。</p><p>$\mathcal{Proof.}$ </p><blockquote><p>先证<strong>存在性</strong>：</p><p>初始时每段一个字符，然后不断地将相邻两段 $s_i&lt;s_{i+1}$ 合并。</p><p>再证<strong>唯一性</strong>：</p><p>若有两种方案，取第一次不同的位置，设 $|s_i| &gt; |s_i’|$，令 $s_i&#x3D;s_i’s_{i+1}’ \dots s_k’pre(s_{k+1}’,l)$，则<br>$$<br>s_i&lt;pre(s_{k+1}’,l)\le s_{k+1}’ \le s_i’ &lt; s_i,矛盾<br>$$</p></blockquote><h2 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h2><ol><li>$s_k$ 是最长的 $\text{Lyndon suffix}$</li><li>$s_1$ 是最长的 $\text{Lyndon prefix}$</li><li>$s_k&#x3D;minsuf(s)$</li></ol><p>$\mathcal{Proof.}$</p><blockquote><p>画图比划一下，容易（是真的）证得。</p></blockquote><h2 id="Duval-算法"><a href="#Duval-算法" class="headerlink" title="Duval 算法"></a>Duval 算法</h2><p>$\text{Duval}$ 算法可以 $O(n)$ 时间 $O(1)$ 额外空间内求出 $s[1\dots n]$ 的 $\text{Lyndon}$ 分解。</p><p>即<br>$$<br>CFL(s)&#x3D;s_1 s_2 \dots s_k, s.t. \begin{cases} 1. s_i \in L \ 2. s_1 \ge s_2 \ge \dots \ge s_k\end{cases}<br>$$</p><p>$\mathcal{Lemma.}$</p><p>若字符串 $v$ 和字符 $c$ 满足 $vc$ 是某个 $\text{Lyndon}$ 串的前缀，则对于字符 $d&gt;c$ 有 $vd$ 是$\text{Lyndon}$ 串。</p><p>也就是说，如果 $uav \in L$，那么对于 $(uav)^kua’$：</p><ol><li><p>如果 $a&lt;a’$，那么 $(uav)^kua’ \in L$</p></li><li><p>如果 $a&gt;a’$，那么 $\forall w,(uav)^kua’w \notin L$</p><p>$\Rightarrow CFL[(uav)^kua’w]&#x3D;(uav)^kCFL(ua’w)$</p></li></ol><p>因此，我们考虑下面这个算法过程：</p><p>用三个循环变量 $i,j,k$ 维持一个循环不变式：</p><ul><li>$s[1 \dots i-1] &#x3D; s_1 s_2 \cdots s_g$ 是已经固定下来的分解，满足 $s_l$ 是 $\text{Lyndon}$ 串，且 $s_l \le s_{l+1}$。</li><li>$j-i$ 是当前最长的 $\text{Lyndon prefix}$ 的长度，即 $s[j]$ 是 $s[k]$ 在 $\text{Lyndon Prefix}$ 中对应位置的字符。</li><li>$k$ 是当前读入的字符的位置。</li></ul><p>然后对于当前读入的字符 $a$</p><ul><li>若 $a&gt;s[j]$，则令直接令 $s[i\dots k]$ 成为新的 $\text{Lyndon Prefix}$</li><li>若 $a&#x3D;s[j]$，无法切割出新的划分，继续读入</li><li>若 $a&lt;s[j]$，则递归求解，先分解完 $s[i\dots t]$ ，即 $(uav)^k$，然后将指针指向 $t+1$ 重新进行算法过程。</li></ul><p><strong>Code</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> i, j, k;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= N; ) &#123;<br><span class="hljs-keyword">for</span> (k = i, j = k + <span class="hljs-number">1</span>; j &lt;= N &amp;&amp; s[j] &gt;= s[k]; ++j) &#123;<br><span class="hljs-keyword">if</span> (s[j] &gt; s[k]) k = i;<br><span class="hljs-keyword">else</span> ++k;<br>&#125;<br><span class="hljs-keyword">while</span> (i &lt;= k) &#123; lyndon[++cnt] = i + j - k - <span class="hljs-number">1</span>; i += j - k; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="“Runs”-Theorem"><a href="#“Runs”-Theorem" class="headerlink" title="“Runs” Theorem"></a>“Runs” Theorem</h1><p>先丢一个论文链接：<a href="https://arxiv.org/pdf/1406.0263.pdf">The” Runs” Theorem</a></p><h1 id="Lyndon-Array"><a href="#Lyndon-Array" class="headerlink" title="Lyndon Array"></a>Lyndon Array</h1><p>再说。</p><h1 id="ZJOI2017-字符串"><a href="#ZJOI2017-字符串" class="headerlink" title="[ZJOI2017] 字符串"></a>[ZJOI2017] 字符串</h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>维护一个动态字符串 $s[1\dots n]$，字符串的字符集是所有 $|x|\le 10^9$ 的整数。要求支持两个操作：</p><ol><li>输入 $l,r,d$，对于所有 $l\le i \le r$，将 $s[i]$ 修改为 $s[i]+d$，<strong>注意 $d$ 可能是负数</strong>。</li><li>输入 $l,r$，输出子串 s$[l\dots r]$ 的<strong>字典序最小的后缀</strong>的起点位置。即，如果最小后缀是 $s[p\dots r],(l\le p\le r)$，请输出 $p$。</li></ol><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lyndon Word</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>后缀自动机（SAM）</title>
    <link href="/2020/01/05/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA%EF%BC%88SAM%EF%BC%89/"/>
    <url>/2020/01/05/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA%EF%BC%88SAM%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文大部分内容来自于 <a href="https://hihocoder.com/problemset/problem/1441"><strong>hihoCoder</strong></a>，侵删。<br><strong>本文只是将其用更好的格式进行展现，希望对读者有帮助。</strong></p></blockquote><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p><strong>后缀自动机（$\text{Suffix Automaton}$，简称 $\text{SAM}$）。对于一个字符串 $S$，它对应的后缀自动机是一个最小的确定有限状态自动机（$\text{DFA}$），接受且只接受 $S$ 的后缀。</strong></p><p>比如对于字符串 $S &#x3D; \underline{aabbabd}$，它的后缀自动机是</p><img src="http://media.hihocoder.com/problem_images/20161203/14807564643248.png" alt="14807564643248.png" style="zoom: 67%;" /><p>其中 <font color="red">红色状态</font> 是终结状态。你可以发现对于 $S$ 的后缀，我们都可以从 $S$ 出发沿着字符标示的路径（<font color="blue">蓝色实线</font>）转移，最终到达终结状态。</p><p>特别的，对于 $S$ 的子串，最终会到达一个合法状态。而对于其他不是 $S$ 子串的字符串，最终会“无路可走”。</p><p>$\text{SAM}$ 本质上是一个 $\text{DFA}$，$\text{DFA}$ 可以用一个五元组 **&lt;字符集，状态集，转移函数、起始状态、终结状态集&gt;**来表示。至于 <font color="green">绿色虚线</font> 那些虽然不是 $\text{DFA}$ 的一部分，但却是 $\text{SAM}$ 的重要部分，有了这些链接 $\text{SAM}$ 是如虎添翼，这些后面将再细讲。</p><p>下面先介绍对于一个给定的字符串 $S$ 如何确定它对应的 <strong>状态集</strong> 和 <strong>转移函数</strong> 。</p><h2 id="SAM-的状态集-States"><a href="#SAM-的状态集-States" class="headerlink" title="SAM 的状态集 (States)"></a>SAM 的状态集 (States)</h2><p>首先先介绍一个概念 <strong>子串的结束位置集合</strong> $endpos$</p><p>对于 $S$ 的一个子串 $s$，$endpos(s) &#x3D; s$ 在 $S$ 中所有出现的结束位置集合。</p><p>以字符串 $S &#x3D; \underline{aabbabd}$ 为例</p><table><thead><tr><th align="left"><strong>状态</strong></th><th>子串</th><th>$endpos$</th></tr></thead><tbody><tr><td align="left">$S$</td><td>$\varnothing$</td><td>${0,1,2,3,4,5,6}$</td></tr><tr><td align="left">$1$</td><td>$a$</td><td>${1,2,}$</td></tr><tr><td align="left">$2$</td><td>$aa$</td><td>${2}$</td></tr><tr><td align="left">$3$</td><td>$aab$</td><td>${3}$</td></tr><tr><td align="left">$4$</td><td>$aabb,abb,bb$</td><td>${4}$</td></tr><tr><td align="left">$5$</td><td>$b$</td><td>${3,4,6}$</td></tr><tr><td align="left">$6$</td><td>$aabba,abba,bba,ba$</td><td>${5}$</td></tr><tr><td align="left">$7$</td><td>$aabbab,abbab,bbab,bab$</td><td>${6}$</td></tr><tr><td align="left">$8$</td><td>$ab$</td><td>${3,6}$</td></tr><tr><td align="left">$9$</td><td>$aabbabd,abbabd,bbabd,babd,abd,bd,d$</td><td>${7}$</td></tr></tbody></table><p>我们把 $S$ 的所有子串的 $endpos$ 都求出来。如果两个子串的 $endpos$ 相等，就把这两个子串归为一类。最终这些 $endpos$ 的等价类就构成了 $\text{SAM}$ 的状态集合。</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ol><li><p><strong>对于S的两个子串 $s1$ 和 $s2$，不妨设 $|s1| \le |s2|$，那么 $s1$ 是 $s2$ 的后缀当且仅当 $endpos(s1) \supseteq endpos(s2)$，$s1$ 不是 $s2$ 的后缀当且仅当 $endpos(s1) \cap endpos(s2) &#x3D; \varnothing$。</strong></p><blockquote><p>首先证明 $s1$ 是 $s2$ 的后缀 $\Rightarrow$ $endpos(s1) \supseteq endpos(s2)$。</p><p>既然 $s1$ 是 $s2$ 后缀，所以每次 $s2$ 出现时 $s1$ 也必然伴随出现，所以有 $endpos(s1) \supseteq endpos(s2)$。</p><p>再证明 $endpos(s1) \supseteq endpos(s2)$ $\Rightarrow$ $s1$ 是 $s2$ 的后缀。</p><p>我们知道对于 $S$ 的子串 $s2$，$endpos(s2)$不会是空集，所以 $endpos(s1) \supseteq endpos(s2)$ $\Rightarrow$ 存在结束位置 $x$ 使得 $s1$ 结束于 $x$，并且 $s2$ 也结束于 $x$，又 $|s1| \le |s2|$，所以 $s1$ 是 $s2$ 的后缀。</p><p>综上可知，$s1$ 是 $s2$ 的后缀当且仅当 $endpos(s1) \supseteq endpos(s2)$。</p><p>而 $s1$ 不是 $s2$ 的后缀当且仅当 $endpos(s1) \cap endpos(s2) &#x3D; \varnothing$是一个简单的推论，不再赘述。</p></blockquote></li><li><p>我们用 $substrings(st)$ 表示状态 $st$ 中包含的所有子串的集合，$longest(st)$ 表示 $st$ 包含的最长的子串，$shortest(st)$ 表示 $st$ 包含的最短的子串。</p><blockquote><p>例如对于状态 $7$，$substring(7)&#x3D;{aabbab,abbab,bbab,bab}$，$longest(7)&#x3D;aabbab$，$shortest(7)&#x3D;bab$。</p></blockquote></li><li><p><strong>$\text{SAM}$ 中的一个状态包含的子串都具有相同的 $endpos$，它们都互为后缀。</strong></p><blockquote><p>例如上图中状态 $4$，${bb,abb,aabb}$。 </p></blockquote></li><li><p><strong>对于一个状态 $st$，以及任意 $s \in substrings(st)$，都有 $s$ 是 $longest(st)$的后缀</strong>。</p><blockquote><p>因为 $endpos(s)&#x3D;endpos(longest(st))$，所以 $endpos(s) \supseteq endpos(longest(st))$，根据刚才证明的结论有 $s$ 是 $longest(st)$ 的后缀。</p></blockquote></li><li><p><strong>对于一个状态 $st$，以及任意的 $longest(st)$ 的后缀 $s$，如果 $s$ 的长度满足：$length(shortest(st)) \le length(s) \le length(longsest(st))$，那么 $s \in substrings(st)$。</strong></p><blockquote><p>因为 $length(shortest(st)) \le length(s) \le length(longsest(st))$</p><p>所以 $endpos(shortest(st)) \supseteq endpos(s) \supseteq endpos(longest(st))$</p><p>又 $endpos(shortest(st)) &#x3D; endpos(longest(st))$</p><p>所以 $endpos(shortest(st)) &#x3D; endpos(s) &#x3D; endpos(longest(st))$</p><p>所以 $s \in substrings(st)$。</p></blockquote></li></ol><p>也就是说，$substrings(st)$ 包含的是 $longest(st)$ 的一系列 <strong>连续</strong> 后缀。</p><h2 id="SAM-的后缀链接-Suffix-Links"><a href="#SAM-的后缀链接-Suffix-Links" class="headerlink" title="SAM 的后缀链接 (Suffix Links)"></a>SAM 的后缀链接 (Suffix Links)</h2><p>前面我们讲到 $substrings(st)$ 包含的是 $longest(st)$ 的一系列 <strong>连续</strong> 后缀。这连续的后缀在某个地方会“断掉”。</p><blockquote><p>比如状态 $7$，包含的子串依次是 $aabbab,abbab,bbab,bab$ 。按照连续的规律下一个子串应该是 $”ab”$，但是 $”ab”$ 没在状态 $7$ 里。</p></blockquote><p>这是为什么呢？</p><blockquote><p>$aabbab,abbab,bbab,bab$ 的 $endpos$ 都是 ${6}$，下一个 $”ab”$ 当然也在结束位置6出现过，但是 $”ab”$ 还在结束位置 $3$ 出现过，所以 $”ab”$ 比 $aabbab,abbab,bbab,bab$ 出现次数更多，于是就被分配到一个新的状态中。</p></blockquote><p>所以，当 $longest(st)$ 的某个后缀 $s$ 在新的位置出现时，就会“断掉”，$s$ 会属于新的状态。</p><p>于是我们可以发现一条状态序列：$7 \rightarrow 8 \rightarrow 5 \rightarrow S$。这个序列的意义是 $longest(7)$ 即 $aabbab$ 的后缀依次在状态 $7,8,5,S$ 中。我们用 后缀链接 ($\text{Suffix Link}$) 这一串状态链接起来，这条 $\text{link}$ 就是上图中的 <font color="green">绿色虚线</font>。</p><p>$\text{Suffix Links}$后面会有妙用，我们暂且按下不表。</p><h2 id="SAM-的转移函数-Transition-Function"><a href="#SAM-的转移函数-Transition-Function" class="headerlink" title="SAM 的转移函数 (Transition Function)"></a>SAM 的转移函数 (Transition Function)</h2><p>对于一个状态 $st$，我们首先找到从它开始下一个遇到的字符可能是哪些。我们将 $st$ 遇到的下一个字符集合记作 $next(st)$，有 $next(st) &#x3D; {S[i+1] | i \in endpos(st)}$。</p><blockquote><p>例如 $next(S)&#x3D;{S[1], S[2], S[3], S[4], S[5], S[6], S[7]}&#x3D;{a, b, d}$，$next(8)&#x3D;{S[4], S[7]}&#x3D;{b, d}$。</p></blockquote><p>对于一个状态 $st$ 来说和一个 $next(st)$ 中的字符 $c$，发现 $substrings(st)$ 中的所有子串后面接上一个字符 $c$ 之后，新的子串仍然都属于同一个状态。</p><blockquote><p>例如状态 $4$，$next(4)&#x3D;{a}$，$aabb,abb,bb$ 后面接上字符 $a$ 得到 $aabba,abba,bba$，这些子串都属于状态$6$。</p></blockquote><p>所以对于一个状态 $st$ 和一个字符 $c \in next(st)$，可以定义转移函数 $trans(st, c) &#x3D; x | longest(st) + c \in  substrings(x)$。</p><p>也就是说，在 $longest(st)$（因为无论哪个子串都会得到相同的结果）后面接上一个字符 $c$ 得到一个新的子串 $s$，找到包含 $s$ 的状态 $x$，那么 $trans(st, c)$ 就等于 $x$。</p><h1 id="算法构造"><a href="#算法构造" class="headerlink" title="算法构造"></a>算法构造</h1><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>使用 <strong>增量构造</strong> 的方法可以在 $O(|S|)$ 的时间和空间复杂度中构造出 $\text{SAM}$，也就是从初始状态开始，每次添加一个字符 $S[1], S[2], \dots S[n]$，依次构造可以识别 $S[1], S[1\dots 2], S[1\dots 3], … S[1\dots N]&#x3D;S$ 的 $\text{SAM}$。</p><p>首先，为了实现 $O(|S|)$ 的构造，每个状态肯定不能保存太多数据，例如 $substring(st)$ 肯定不能保存下来了。对于一个状态 $st$，只保存以下数据：</p><table><thead><tr><th align="center">数据</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">$maxlen[st]$</td><td align="center">$st$ 包含的最长子串的长度</td></tr><tr><td align="center">$minlen[st]$</td><td align="center">$st$ 包含的最短子串的长度</td></tr><tr><td align="center">$trans[st][1\dots c]$</td><td align="center">$st$ 的转移函数，$c$ 为字符集大小</td></tr><tr><td align="center">$slink[st]$</td><td align="center">$st$ 的后缀链接 $\text{(Suffix Link)}$</td></tr></tbody></table><p>假设已经构造好了 $S[1\dots i]$ 的 $\text{SAM}$，此时需要添加字符 $S[i+1]$，于是新增了 $i+1$ 个后缀需要识别：$S[1\dots i+1],S[2\dots i+1],\dots,S[i+1]$。由于这些新增状态分别是从$S[1\dots i],S[2\dots i],\dots,””$ 通过字符 $S[i+1]$ 转移过来的，所以我们还需要对这些状态添加相应的转移。</p><p>假设 $S[1\dots i]$ 对应的状态是 $u$，等价于 $S[1\dots i]\in substrings(u)$。根据前面的讨论我们知道 $S[1\dots i], S[2\dots i], S[3\dots i], \dots , S[i], “”$ 对应的状态集合恰好就是从 $u$ 到初始状态 $S$ 的由 $\text{Suffix Link}$ 连接起来路径上的所有状态，不妨称这条路径 (上所有状态集合) 是 $\text{suffix-path}(u\rightarrow S)$。</p><p>显然至少 $S[1\dots i+1]$ 这个子串不能被以前的 $\text{SAM}$ 识别，所以至少需要添加一个状态 $z$，$z$ 至少包含$S[1\dots i+1]$这个子串。</p><ol><li><p>首先考虑最简单的一种情况：<strong>对于 $\text{suffix-path}(u\rightarrow S)$ 的任意状态 $v$，都有 $trans[v][S[i+1]]&#x3D;NULL$。这时我们只要令 $trans[v][S[i+1]]&#x3D;z$，并且令 $slink[st]&#x3D;S$ 即可</strong>。</p><blockquote><p>例如已经得到 $”aa”$ 的 $\text{SAM}$，现在希望构造 $”aab”$ 的 $\text{SAM}$。</p><p>此时 $u&#x3D;2,z&#x3D;3$，$\text{suffix-path}(u\rightarrow S)$ 是桔色状态组成的路径 $2-1-S$。并且这 $3$ 个状态都没有对应字符 $b$ 的转移。所以我们只要添加红色转移 $trans[2][b]&#x3D;trans[1][b]&#x3D;trans[S][b]&#x3D;z$ 即可。以及 $slink[3]&#x3D;S$。</p><p><img src="http://media.hihocoder.com/problem_images/20161210/14813690859339.png"></p></blockquote></li><li><p>另一种复杂一点的情况是 $\text{suffix-path}(u\rightarrow S)$ 上有一个节点 $v$，使得 $trans[v][S[i+1]] \neq NULL$。</p><blockquote><p>先以下图为例。假设已经构造了 $”aabb”$ 的 $\text{SAM}$ 如图，现在我们要增加一个字符 $a$ 构造 $”aabba”$ 的 $\text{SAM}$。</p><p><img src="http://media.hihocoder.com/problem_images/20161210/14813699928939.png"></p><p>此时 $u&#x3D;4,z&#x3D;6$，$\text{suffix-path}(u\rightarrow S)$ 是桔色状态组成的路径 $4-5-S$。对于状态 $4$ 和状态 $5$，由于它们都没有对应字符 $a$ 的转移，所以我们只要添加红色转移 $trans[4][a]&#x3D;trans[5][a]&#x3D;z&#x3D;6$ 即可。但是 $trans[S][a]&#x3D;1$ 已经存在。</p></blockquote><p>不失一般性，我们可以认为在 $\text{suffix-path}(u\rightarrow S)$ 遇到的第一个状态v满足 $trans[v][S[i+1]]&#x3D;x$。这时我们需要讨论 $x$ 包含的子串的情况。如果 **$x$ 中包含的最长子串就是v中包含的最长子串接上字符S[i+1]，等价于maxlen(v)+1&#x3D;maxlen(x)**，比如在上面的例子里，$v&#x3D;S, x&#x3D;1$，$longest(v)$ 是空串，$longest(1)&#x3D;”a”$ 就是 $longest(v)+’a’$。这种情况比较简单，我们只要增加 $slink[z]&#x3D;x$ 即可。</p><p>如果**$x$ 中包含的最长子串不是 $v$ 中包含的最长子串接上字符 $S[i+1]$，等价于 $maxlen(v)+1 &lt; maxlen(x)$**，这种情况最为复杂，不失一般性，用下图表示这种情况，这时增加的字符是 $c$，状态是 $z$。</p><p><img src="http://media.hihocoder.com/problem_images/20161210/14813690856741.png"></p><p>在 $\text{suffix-path}(u\rightarrow S)$ 这条路径上，从u开始有一部分连续的状态满足 $trans[u..][c]&#x3D;NULL$，对于这部分状态我们只需增加 $trans[u..][c]&#x3D;z$。紧接着有一部分连续的状态 $v..w$ 满足 $trans[v..w][c]&#x3D;x$，并且 $longest(v)+c$ 不等于 $longest(x)$。这时我们需要从 $x$ 拆分出新的状态 $y$，并且把原来 $x$ 中长度小于等于 $longest(v)+c$ 的子串分给 $y$，其余字串留给 $x$。同时令 $trans[v..w][c]&#x3D;y$，$slink[y]&#x3D;slink[x], slink[x]&#x3D;slink[z]&#x3D;y$。</p><blockquote><p>举个例子。假设我们已经构造 $”aab”$ 的 $\text{SAM}$ 如图，现在我们要增加一个字符 $b$ 构造 $”aabb”$ 的$\text{SAM}$。</p><p><img src="http://media.hihocoder.com/problem_images/20161210/14813690864454.png"></p><p>当我们处理在 $\text{suffix-path}(u\rightarrow S)$ 上的状态 $S$ 时，遇到 $trans[S][b]&#x3D;3$。并且 $longest(3)&#x3D;”aab”$，$longest(S)+’b’&#x3D;”b”$，两者不相等。其实不相等意味增加了新字符后 $endpos(“aab”)$ 已经不等于 $endpos(“b”)$，势必这两个子串不能同属一个状态 $3$。这时我们就要从 $3$ 中新拆分出一个状态 $5$，把 $”b”$及其后缀分给 $5$，其余的子串留给 $3$。同时令 $trans[S][b]&#x3D;5, slink[5]&#x3D;slink[3]&#x3D;S, slink[3]&#x3D;slink[4]&#x3D;5$。</p><blockquote><p>此处加入一些个人理解：对于一条 $\text{suffix-path}(u\rightarrow S)$ 所包含的所有子串，其必然是连续的，也就是说，在路径上的同一个状态里内的子串，$append$ 字符 $S[i+1]$ 之后其 $endpos$ 集合都还是相等的。然后考虑当某个状态已经有了字符 $S[i+1]$ 的转移时，若对应 $append$ 字符 $S[i+1]$ 后所对应的子串其所在的状态的等价类最长的字符串，那么由于比它长的串都必定不在 $\text{suffix-path}(u\rightarrow S)$ 上的同一个状态内，所以它们的 $endpos$$ 集合也必定已经不同。</p></blockquote></blockquote></li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://hihocoder.com/problemset/problem/1441">hihoCoder</a></p>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后缀自动机</tag>
      
      <tag>SAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>后缀数组（SA）</title>
    <link href="/2020/01/05/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%EF%BC%88SA%EF%BC%89/"/>
    <url>/2020/01/05/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%EF%BC%88SA%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><strong>Update 2020.1.7</strong></p><p>看了 <a href="https://oi-wiki.org/string/sa/#onlogn">oiwiki</a> 忽然发现自己的模板代码是那样的丑陋，常数是那样的大，重新打了一遍。之前交的题都变快了，开心！</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>$S$：需要处理的字符串，长度为 $len$</p><p>$suf_i$：字符串$S$中下标为 $i \sim len$ 的连续子串（即后缀）</p><p>$rank_i$：$suf_i$在所有后缀中的排名</p><p>$SA_i$：后缀数组，排名为$i$的后缀在原串中的位置，满足 $suf_{SA_1} &lt; suf_{SA_2} &lt; \dots &lt; suf_{SA_{len}}$，与 $rank_i$ 为互逆运算</p><p>$height_i$：高度数组，排名<strong>相邻</strong>的两个后缀的最长公共前缀长度。<br>$$<br>height_i &#x3D;<br>\begin{cases}<br>0,  &amp; i&#x3D;0 \<br>lcp(suf_{SA_i}, suf_{SA_{i-1}}), &amp; i &gt; 0<br>\end{cases}<br>$$</p><p><img src="https://i.loli.net/2020/01/05/x41qZRFIwDOuygM.png"></p><h1 id="后缀数组的构造"><a href="#后缀数组的构造" class="headerlink" title="后缀数组的构造"></a>后缀数组的构造</h1><h2 id="倍增算法"><a href="#倍增算法" class="headerlink" title="倍增算法"></a>倍增算法</h2><p>倍增算法的主要思路是，每次利用上一次的结果，倍增计算出每个位置从 $i$ 开始的长度为 $2^k$ 的子串的排名。</p><p>例如，在算法的开始，我们有 <code>&quot;aabaaaab&quot;</code> ，长度为 $2^0&#x3D;1$ 的子串的排名分别为：</p><table><thead><tr><th align="center">$S_i$</th><th align="center">a</th><th align="center">a</th><th align="center">b</th><th align="center">a</th><th align="center">a</th><th align="center">a</th><th align="center">a</th><th align="center">b</th></tr></thead><tbody><tr><td align="center">$rank_i$</td><td align="center">1</td><td align="center">1</td><td align="center">2</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">2</td></tr></tbody></table><p>然后，为了求出长度为 $2^1&#x3D;2$ 的子串的排名，我们以每个位置 $i$ 开始，长度为 $2^0&#x3D;1$ 的子串的排名作为位置 $i$ 的<strong>第一关键字</strong>，以每个位置 $i$ 开始，长度为 $2^0&#x3D;1$ 的子串的排名作为位置 $i$ 的<strong>第二关键字</strong>，进行双关键字排序。</p><p>接下来，以此类推即可。</p><p><img src="https://i.loli.net/2020/01/05/pwVqTunDyYbJMgO.png"></p><p>如果使用使用快速排序，那么复杂度将是 $O(N\log^2 N)$ ，所以，我们在这里使用<strong>基数排序</strong>，复杂度将降为 $O(N\log N)$。</p><p><strong>Code</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">SA</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> M = <span class="hljs-number">122</span>, p = <span class="hljs-number">0</span>; <span class="hljs-comment">// 字符集</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> buc[_], id[_], fir[_], oldrk[_];<br><span class="hljs-type">static</span> <span class="hljs-type">char</span> t[_];<br><span class="hljs-built_in">copy</span>(s + <span class="hljs-number">1</span>, s + N + <span class="hljs-number">1</span>, t + <span class="hljs-number">1</span>);<br><span class="hljs-built_in">sort</span>(t + <span class="hljs-number">1</span>, t + N + <span class="hljs-number">1</span>);<br><span class="hljs-type">char</span> *end = <span class="hljs-built_in">unique</span>(t + <span class="hljs-number">1</span>, t + N + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) s[i] = <span class="hljs-built_in">lower_bound</span>(t + <span class="hljs-number">1</span>, end, s[i]) - t;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) ++buc[rk[i] = s[i]];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= M; ++i) buc[i] += buc[i - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = N; i &gt;= <span class="hljs-number">1</span>; --i) sa[buc[rk[i]]--] = i;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">1</span>; len &lt; N; len &lt;&lt;= <span class="hljs-number">1</span>, M = p) &#123;<br>p = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = N; i &gt; N - len; --i) id[++p] = i;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i)<br><span class="hljs-keyword">if</span> (sa[i] &gt; len) id[++p] = sa[i] - len;<br><span class="hljs-built_in">fill</span>(buc + <span class="hljs-number">1</span>, buc + M + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) ++buc[fir[i] = rk[id[i]]];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= M; ++i) buc[i] += buc[i - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = N; i &gt;= <span class="hljs-number">1</span>; --i) sa[buc[fir[i]]--] = id[i];<br><span class="hljs-built_in">copy</span>(rk + <span class="hljs-number">1</span>, rk + N + <span class="hljs-number">1</span>, oldrk + <span class="hljs-number">1</span>);<br>p = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) rk[sa[i]] = ++p;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">int</span> x = sa[i], y = sa[i - <span class="hljs-number">1</span>];<br>rk[sa[i]] = (oldrk[x] == oldrk[y] &amp;&amp; oldrk[x + len] == oldrk[y + len]) ? p : ++p;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (p == N) <span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="DC3算法"><a href="#DC3算法" class="headerlink" title="DC3算法"></a>DC3算法</h2><p>不会。</p><h1 id="高度数组的构造"><a href="#高度数组的构造" class="headerlink" title="高度数组的构造"></a>高度数组的构造</h1><p>如果直接按照定义构造高度数组，那么时间复杂度是 $O(N^2)$，难以承受，这就需要利用到高度数组的一个性质：</p><p>令 $h_i$ 表示表示从<strong>第 $i$ 个位置开始的后缀</strong>与排在其前一名的后缀的最长公共前缀，即当 $rank_i&gt;0$ 时<br>$$<br>h_i &#x3D; lcp(suf_{i}, suf_{SA_{rank_{i}-1}})&#x3D;height_{rank_i}<br>$$<br>对于 $h_i$，有一个结论<br>$$<br>h_i \ge h_{i-1}-1<br>$$<br>证明（来自$\mathrm{hihoCoder}$）</p><blockquote><p>设 $suf_k$ 是排在前 $suf_{i-1}$前 一名的后缀，<br>则它们的最长公共前缀是 $h_{i-1}$<br>那么将 $suf_{k+1}$ 排在 $suf_i$ 的前面<br>并且 $suf_{k+1}$ 和 $suf_i$ 的最长公共前缀是 $h_{i-1}-1$ ，<br>所以 $suf_i$ 和在它前一名的后缀的最长公共前缀至少是 $h_{i-1}-1$</p></blockquote><p><strong>Code</strong></p><p>有了上面的性质，我们可以按照 $height_{SA_i}$ 的顺序递推。 设 $k&#x3D;height_{rank_{i-1}}$ ，显然在计算每个 $height_{rank_i}$ 时，$k$ 每次减小$1$ ，最多增加到 $n$ ，所以这个过程的时间复杂度为 $O(n)$。 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>; i &lt;= N; ++i) &#123;<br>  <span class="hljs-keyword">if</span> (rnk[i] == <span class="hljs-number">1</span>)<br>    k = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">0</span>) --k;<br>    <span class="hljs-type">int</span> j = sa[rnk[i] - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span> (i + k &lt;= N &amp;&amp; j + k &lt;= N &amp;&amp; a[i + k] == a[j + k]) ++k;<br>  &#125;<br>  height[rnk[i]] = k;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h1><p>通过高度数组 $height_i$，我们可以得到排名相邻的两个后缀的最长公共前缀。</p><p>对于排名不相邻的两个后缀，它们的前缀的相似性比相邻后缀要差。显然排名不相邻的两个后缀的最长公共前缀长度<strong>一定不会</strong>比这两个后缀在后缀数组中确定的一段<strong>区间中任意两个</strong>相邻后缀的最长公共前缀长度<strong>更长</strong>。</p><p>所以，求出这段区间内最小的 $height$ 值即为这两个不相邻后缀的最长公共前缀长度。</p><p>问题转化为 $RMQ$ 问题，可以使用 $ST$ 表解决。</p><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> N, rnk[_], sa[_], height[_];<br><span class="hljs-type">char</span> s[_];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">SA</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> M = <span class="hljs-number">122</span>, p = <span class="hljs-number">0</span>; <span class="hljs-comment">// 字符集</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> buc[_], id[_], fir[_], oldrk[_];<br><span class="hljs-type">static</span> <span class="hljs-type">char</span> t[_];<br><span class="hljs-built_in">copy</span>(s + <span class="hljs-number">1</span>, s + N + <span class="hljs-number">1</span>, t + <span class="hljs-number">1</span>);<br><span class="hljs-built_in">sort</span>(t + <span class="hljs-number">1</span>, t + N + <span class="hljs-number">1</span>);<br><span class="hljs-type">char</span> *end = <span class="hljs-built_in">unique</span>(t + <span class="hljs-number">1</span>, t + N + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) s[i] = <span class="hljs-built_in">lower_bound</span>(t + <span class="hljs-number">1</span>, end, s[i]) - t;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) ++buc[rk[i] = s[i]];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= M; ++i) buc[i] += buc[i - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = N; i &gt;= <span class="hljs-number">1</span>; --i) sa[buc[rk[i]]--] = i;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">1</span>; len &lt; N; len &lt;&lt;= <span class="hljs-number">1</span>, M = p) &#123;<br>p = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = N; i &gt; N - len; --i) id[++p] = i;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i)<br><span class="hljs-keyword">if</span> (sa[i] &gt; len) id[++p] = sa[i] - len;<br><span class="hljs-built_in">fill</span>(buc + <span class="hljs-number">1</span>, buc + M + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) ++buc[fir[i] = rk[id[i]]];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= M; ++i) buc[i] += buc[i - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = N; i &gt;= <span class="hljs-number">1</span>; --i) sa[buc[fir[i]]--] = id[i];<br><span class="hljs-built_in">copy</span>(rk + <span class="hljs-number">1</span>, rk + N + <span class="hljs-number">1</span>, oldrk + <span class="hljs-number">1</span>);<br>p = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) rk[sa[i]] = ++p;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">int</span> x = sa[i], y = sa[i - <span class="hljs-number">1</span>];<br>rk[sa[i]] = (oldrk[x] == oldrk[y] &amp;&amp; oldrk[x + len] == oldrk[y + len]) ? p : ++p;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (p == N) <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>; i &lt;= N; ++i) &#123;<br><span class="hljs-keyword">if</span> (rk[i] == <span class="hljs-number">1</span>) k = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">0</span>) --k;<br><span class="hljs-type">int</span> j = sa[rk[i] - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">while</span> (i + k &lt;= N &amp;&amp; j + k &lt;= N &amp;&amp; s[i + k] == s[j + k]) ++k;<br>&#125;<br>height[rk[i]] = k;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="最长可重叠重复K次子串问题"><a href="#最长可重叠重复K次子串问题" class="headerlink" title="最长可重叠重复K次子串问题"></a>最长可重叠重复K次子串问题</h2><p>重复出现了 $k$ 次，相当于我们选择了 $k$ 个后缀，求他们的 $lcp$。</p><p>显然 $k$ 个后缀的 $rank$ 是连续的，所以重复出现 $k$ 次的前缀就是 $min(height[l+1\dots l+k-1])$。</p><p>所以我们需枚举 $i$，然后用一个递增的单调队列维护 $height[i-k+2\dots i]$ 即可。</p><p><a href="https://www.cnblogs.com/newbielyx/p/12159560.html">[USACO06DEC]牛奶模式Milk Patterns</a></p><h2 id="最长不可重叠重复子串问题"><a href="#最长不可重叠重复子串问题" class="headerlink" title="最长不可重叠重复子串问题"></a>最长不可重叠重复子串问题</h2><p>如果有两个子串相同，那么也就是有两个后缀的 $lcp$ 相同。</p><p>所以考虑二分答案 $K$，如果有连续一段的 $height$ 都不小于 $K$，那么这一段区间内，两两后缀的 $lcp$ 都不小于 $K$，那么记录一下区间的 $\max{sa_i}$ 和 $\min{sa_i}$，如果 $\max{sa_i}-\min{sa_i}\ge K$，那么就说明两个子串不重叠。</p><p><a href="https://www.cnblogs.com/newbielyx/p/12160165.html">[USACO5.1]乐曲主题Musical Themes</a></p><h2 id="最长公共子串问题"><a href="#最长公共子串问题" class="headerlink" title="最长公共子串问题"></a>最长公共子串问题</h2><p>考虑将这若干个串全部拼起来，中间用一些不在字符集内的符号隔开。</p><p>然后二分答案 $K$，如果连续的一段 $height$ 都大于等于 $K$，且每个串都出现了至少一次，则是可行的。</p><p><strong>Update 2018.1.8：</strong></p><p>其实并没有必要二分答案，我们可以枚举左端点，然后不断向右扩展右端点，当每种串都出现恰好至少一次时，就对把答案和这一段区间的 $\min$ 取个 $\max$，然后区间的 $\min$ 用单调队列维护即可。</p><p><a href="https://www.cnblogs.com/newbielyx/p/12158792.html">POJ2774 Long Long Message（两个串的最长公共子串）</a></p><p><a href="https://www.cnblogs.com/newbielyx/p/12160645.html">[POI2000]公共串</a></p><p><a href="https://www.cnblogs.com/newbielyx/p/12161485.html">[SDOI2008]Sandy的卡片</a></p><h2 id="重复次数最多的连续字串问题"><a href="#重复次数最多的连续字串问题" class="headerlink" title="重复次数最多的连续字串问题"></a>重复次数最多的连续字串问题</h2><p><a href="https://hihocoder.com/problemset/problem/1419">丢一个hihocoder的链接</a></p><p><a href="https://www.cnblogs.com/newbielyx/p/12166277.html">SPOJ REPEATS - Repeats</a></p>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后缀数组</tag>
      
      <tag>SA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[THUSC2016]补退选 - Trie</title>
    <link href="/2020/01/03/THUSC2016%E8%A1%A5%E9%80%80%E9%80%89-Trie/"/>
    <url>/2020/01/03/THUSC2016%E8%A1%A5%E9%80%80%E9%80%89-Trie/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>维护一个字符串集合，有三种事件，加入一个字符串，删除一个字符串，询问最早在哪个事件之后，以某个串为前缀的字符串数量超过$k$，强制在线。$n \le 100000,|S| \le 60$,输入中的所有字符串只会包含前$10$个小写字母。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>建立$Trie$树维护字符串集合，在$Trie$树上的每一个节点开一个$vector$，用来记录子树内的结束节点到达某个值的最早时刻，查询时直接找到前缀对应节点即可。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> N, tim;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ty</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>  <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>;<br>    ch = <span class="hljs-built_in">getchar</span>();<br>  &#125;<br>  <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>    x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    ch = <span class="hljs-built_in">getchar</span>();<br>  &#125;<br>  <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">getstr</span><span class="hljs-params">(<span class="hljs-type">char</span> *s)</span> </span>&#123;<br>  <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>  <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;j&#x27;</span>) &#123;<br>    s[++cnt] = ch;<br>    ch = <span class="hljs-built_in">getchar</span>();<br>  &#125;<br>  <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Trie</span> &#123;<br>  <span class="hljs-type">int</span> trie[_][<span class="hljs-number">10</span>], cnt[_], tot;<br>  vector&lt;<span class="hljs-type">int</span>&gt; num[_];<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">char</span> *s, <span class="hljs-type">int</span> len)</span> </span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; ++i) &#123;<br>      <span class="hljs-type">int</span> ch = s[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>      <span class="hljs-keyword">if</span> (!trie[x][ch]) trie[x][ch] = ++tot;<br>      x = trie[x][ch];<br>      ++cnt[x];<br>      <span class="hljs-keyword">if</span> (num[x].<span class="hljs-built_in">size</span>() &lt; cnt[x]) num[x].<span class="hljs-built_in">push_back</span>(tim);<br>    &#125;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">erase</span><span class="hljs-params">(<span class="hljs-type">char</span> *s, <span class="hljs-type">int</span> len)</span> </span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; ++i) &#123;<br>      <span class="hljs-type">int</span> ch = s[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>      x = trie[x][ch];<br>      --cnt[x];<br>    &#125;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">char</span> *s, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> len)</span> </span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; ++i) &#123;<br>      <span class="hljs-type">int</span> ch = s[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>      <span class="hljs-keyword">if</span> (!trie[x][ch]) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>      x = trie[x][ch];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (num[x].<span class="hljs-built_in">size</span>() &lt;= k)<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-keyword">return</span> num[x][k];<br>  &#125;<br>&#125; tr;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;select.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;select.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  N = <span class="hljs-built_in">ty</span>();<br>  <span class="hljs-type">int</span> last = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (tim = <span class="hljs-number">1</span>; tim &lt;= N; ++tim) &#123;<br>    <span class="hljs-type">int</span> op = <span class="hljs-built_in">ty</span>();<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">65</span>];<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">getstr</span>(s);<br>    <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)<br>      tr.<span class="hljs-built_in">insert</span>(s, len);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>)<br>      tr.<span class="hljs-built_in">erase</span>(s, len);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">3</span>) &#123;<br>      <span class="hljs-type">int</span> a = <span class="hljs-built_in">ty</span>(), b = <span class="hljs-built_in">ty</span>(), c = <span class="hljs-built_in">ty</span>();<br>      <span class="hljs-type">int</span> k = (<span class="hljs-number">1ll</span> * a * <span class="hljs-built_in">abs</span>(last) + b) % c;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, last = tr.<span class="hljs-built_in">query</span>(s, k, len));<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>字符串</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Trie</tag>
      
      <tag>THUSC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[HNOI2008]GT考试 - KMP + 矩阵快速幂</title>
    <link href="/2020/01/03/HNOI2008-GT%E8%80%83%E8%AF%95-KMP-%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <url>/2020/01/03/HNOI2008-GT%E8%80%83%E8%AF%95-KMP-%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>求有多少个长度为n的0-9的数字串不包含一个给定的长度为m的数字串。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p><del>在kmp自动机上dp</del></p><h2 id="40pts-kmp-dp"><a href="#40pts-kmp-dp" class="headerlink" title="40pts kmp + dp"></a>40pts kmp + dp</h2><p>考虑$dp$，设$f_{i,j}$表示前$i$个字符，匹配到给定串的第$j$位的方案数</p><p>转移时枚举下一位放什么字符，然后用$kmp$处理出会匹配到哪一位，然后从$f_{i,j}$转移到$f_{i,nxt}$。需要注意的是，如果匹配到的下一位为$m$，那么不需要进行转移。</p><p>最终答案为$\sum \limits_{i&#x3D;0}^{m-1} f[n][i]$。</p><p><strong>Code</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">20</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> __ = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> N, M, mod, nxt[_];<br><span class="hljs-type">char</span> s[_];<br><span class="hljs-type">int</span> f[__][_];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">kmp</span><span class="hljs-params">()</span> </span>&#123;<br>  nxt[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>, j = <span class="hljs-number">0</span>; i &lt;= M; ++i) &#123;<br>    <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; s[i] != s[j + <span class="hljs-number">1</span>]) j = nxt[j];<br>    <span class="hljs-keyword">if</span> (s[i] == s[j + <span class="hljs-number">1</span>]) ++j;<br>    nxt[i] = j;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;GT.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;GT.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;N, &amp;M, &amp;mod);<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);<br>  <span class="hljs-built_in">kmp</span>();<br><br>  f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= M; ++j) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-number">9</span>; ++k) &#123;<br>        <span class="hljs-type">int</span> tmp = j;<br>        <span class="hljs-keyword">while</span> (tmp &gt; <span class="hljs-number">0</span> &amp;&amp; k != s[tmp + <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>) tmp = nxt[tmp];<br>        <span class="hljs-keyword">if</span> (k == s[tmp + <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>) ++tmp;<br>        <span class="hljs-keyword">if</span> (tmp &lt; M) f[i + <span class="hljs-number">1</span>][tmp] = (f[i + <span class="hljs-number">1</span>][tmp] + f[i][j]) % mod;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; M; ++i) ans = (ans + f[N][i]) % mod;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="100pts-矩阵加速转移"><a href="#100pts-矩阵加速转移" class="headerlink" title="100pts 矩阵加速转移"></a>100pts 矩阵加速转移</h2><p>实际上，并不需要每次枚举字母，我们可以预处理出从一个匹配长度加一个字符变成另一个匹配长度的方案数，设为$g_{i,j}$</p><p>则<br>$$<br>f_{i,j}&#x3D;\sum \limits_{k&#x3D;0}^{m-1} f_{i-1,k} \times g_{k,j}<br>$$<br>这个式子显然是可以矩阵优化的，于是矩阵快速幂之后，就可以通过本题了。</p><p><strong>Code</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">23</span>;<br><span class="hljs-type">int</span> N, M, mod, nxt[_], cnt[_][_];<br><span class="hljs-type">char</span> s[_];<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Matrix</span> &#123;<br>  <span class="hljs-type">int</span> A[_][_];<br>  <span class="hljs-built_in">Matrix</span>() &#123; <span class="hljs-built_in">memset</span>(A, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(A)); &#125;<br>  Matrix <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> Matrix &amp;b) <span class="hljs-type">const</span> &#123;<br>    Matrix c;<br>    <span class="hljs-built_in">memset</span>(c.A, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(c.A));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; M; ++i)<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; M; ++j)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; M; ++k)<br>          c.A[i][j] = (c.A[i][j] + A[i][k] * b.A[k][j] % mod) % mod;<br>    <span class="hljs-keyword">return</span> c;<br>  &#125;<br>&#125; F, G;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">kmp</span><span class="hljs-params">()</span> </span>&#123;<br>  nxt[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>, j = <span class="hljs-number">0</span>; i &lt;= M; ++i) &#123;<br>    <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; s[i] != s[j + <span class="hljs-number">1</span>]) j = nxt[j];<br>    <span class="hljs-keyword">if</span> (s[i] == s[j + <span class="hljs-number">1</span>]) ++j;<br>    nxt[i] = j;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; M; ++i) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-string">&#x27;0&#x27;</span>; j &lt;= <span class="hljs-string">&#x27;9&#x27;</span>; ++j) &#123;<br>      <span class="hljs-type">int</span> k = i;<br>      <span class="hljs-keyword">while</span> (k &gt; <span class="hljs-number">0</span> &amp;&amp; j != s[k + <span class="hljs-number">1</span>]) k = nxt[k];<br>      <span class="hljs-keyword">if</span> (j == s[k + <span class="hljs-number">1</span>]) ++k;<br>      <span class="hljs-keyword">if</span> (k &lt; M) ++cnt[i][k];<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-function">Matrix <span class="hljs-title">ksm</span><span class="hljs-params">(Matrix a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>  Matrix ret;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; M; ++i) ret.A[i][i] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (; b; b &gt;&gt;= <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) ret = ret * a;<br>    a = a * a;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;GT.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;GT.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;N, &amp;M, &amp;mod);<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);<br>  <span class="hljs-built_in">kmp</span>();<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; M; ++i)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; M; ++j) G.A[i][j] = cnt[i][j];<br>  F.A[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  G = <span class="hljs-built_in">ksm</span>(G, N);<br>  F = F * G;<br>  <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; M; ++i) ans = (ans + F.A[<span class="hljs-number">0</span>][i]) % mod;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>字符串</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩阵快速幂</tag>
      
      <tag>省选</tag>
      
      <tag>kmp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CF1080E Sonya and Matrix Beauty - 哈希 + manacher</title>
    <link href="/2020/01/03/CF1080E-Sonya-and-Matrix-Beauty-%E5%93%88%E5%B8%8C-manacher/"/>
    <url>/2020/01/03/CF1080E-Sonya-and-Matrix-Beauty-%E5%93%88%E5%B8%8C-manacher/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给定一个 $n \times m$ 的字符矩阵，请求出有多少个子矩阵在重排子矩阵每一行的字符后，使得子矩阵的每行每列都是回文串。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>如果一行能构成回文串，那么最多只能有一种字符出现奇数次。</p><p>如果一个矩阵的每一行和每一列都是回文串，那么除了满足上面的要求外，第$i$行和第$n-i+1$的每种字母出现的次数必须都相同。</p><p>所以我们可以枚举两列，然后对每一行的字母把出现次数$hash$起来，然后就是求由每一行的哈希值构成的序列的回文子串个数，$manacher$解决即可。</p><p>另外要注意的是如果某一行不能构成回文串，那么不应该计入到$manacher$的统计中去。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">500</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> base = <span class="hljs-number">233</span>;<br><span class="hljs-type">const</span> ll mod = <span class="hljs-number">20190816170251</span>;<br><span class="hljs-type">int</span> N, M, cnt[_][_][<span class="hljs-number">30</span>], p[_];<br><span class="hljs-type">char</span> s[_][_];<br>ll H[_][_], val[_][_], t[_], ans;<br><br><span class="hljs-function">ll <span class="hljs-title">Hash</span><span class="hljs-params">(<span class="hljs-type">int</span> *a)</span> </span>&#123;<br>  ll ret = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">26</span>; ++i) ret = (ret * base % mod + a[i]) % mod;<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>  ll x = val[i][r] ^ val[i][l - <span class="hljs-number">1</span>];<br>  <span class="hljs-keyword">return</span> (!x) || (!(x - (x &amp; (-x))));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">manacher</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">memset</span>(p, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(p));<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, r = <span class="hljs-number">0</span>, mid = <span class="hljs-number">0</span>; i &lt;= N * <span class="hljs-number">2</span>; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (t[i] &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-keyword">if</span> (i &lt; r) p[i] = <span class="hljs-built_in">min</span>(r - i, p[mid * <span class="hljs-number">2</span> - i]);<br>    <span class="hljs-keyword">while</span> (i - p[i] &gt;= <span class="hljs-number">0</span> &amp;&amp; i + p[i] &lt;= N * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &amp;&amp; t[i - p[i]] == t[i + p[i]])<br>      ++p[i];<br>    <span class="hljs-keyword">if</span> (i + p[i] &gt; r) r = i + p[i] - <span class="hljs-number">1</span>, mid = i;<br>    <span class="hljs-comment">// printf(&quot;%d\n&quot;, p[i]);</span><br>    ans += p[i] / <span class="hljs-number">2</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;matrix.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;matrix.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s[i] + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= M; ++j) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">26</span>; ++k) cnt[i][j][k] = cnt[i][j - <span class="hljs-number">1</span>][k];<br>      ++cnt[i][j][s[i][j] - <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">1</span>];<br>      H[i][j] = <span class="hljs-built_in">Hash</span>(cnt[i][j]);<br>      val[i][j] = val[i][j - <span class="hljs-number">1</span>] ^ (<span class="hljs-number">1</span> &lt;&lt; (s[i][j] - <span class="hljs-string">&#x27;a&#x27;</span>));<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= M; ++i) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= M; ++j) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= N; ++k) &#123;<br>        t[k * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(k, i, j))<br>          t[k * <span class="hljs-number">2</span>] = (H[k][j] - H[k][i - <span class="hljs-number">1</span>] + mod) % mod;<br>        <span class="hljs-keyword">else</span><br>          t[k * <span class="hljs-number">2</span>] = <span class="hljs-number">-1ll</span> * k;<br>      &#125;<br>      <span class="hljs-built_in">manacher</span>();<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>字符串</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈希</tag>
      
      <tag>manacher</tag>
      
      <tag>Codeforcecs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[JSOI2008]火星人 - Splay、哈希</title>
    <link href="/2020/01/02/JSOI2008%E7%81%AB%E6%98%9F%E4%BA%BA-Splay/"/>
    <url>/2020/01/02/JSOI2008%E7%81%AB%E6%98%9F%E4%BA%BA-Splay/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>维护一个字符串，支持插入字符，修改字符，以及求两个后缀的$lcp$。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>建立一棵$Splay$来维护整个串，每个节点维护整个子树的哈希值。对于插入，直接在对应的位置插入；修改也直接修改就好；然后一路$update$。对于查询，考虑二分，然后每次查询对应区间的哈希值，$O(1)$判断即可。</p><p>查询某个区间的哈希值，用$Splay$写的话比较方便，对于区间$[l,r]$，直接把$l-1$旋转到根，把$r+1$旋转到根节点的右儿子，那么根节点的右儿子的左儿子的哈希值就是区间$[l,r]$的哈希值。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> __ = <span class="hljs-number">3e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> base = <span class="hljs-number">233</span>;<br><span class="hljs-type">char</span> s[_];<br><span class="hljs-type">int</span> N, M;<br>ull p[__];<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Splay</span> &#123;<br>  <span class="hljs-type">int</span> fa[__], son[__][<span class="hljs-number">2</span>], val[_], siz[_];<br>  ull h[_];<br>  <span class="hljs-type">int</span> tot, root;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">alloc</span><span class="hljs-params">(<span class="hljs-type">int</span> v, <span class="hljs-type">int</span> f)</span> </span>&#123;<br>    fa[++tot] = f, siz[tot] = <span class="hljs-number">1</span>;<br>    son[tot][<span class="hljs-number">0</span>] = son[tot][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    val[tot] = h[tot] = v;<br>    <span class="hljs-keyword">return</span> tot;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    siz[x] = siz[son[x][<span class="hljs-number">0</span>]] + siz[son[x][<span class="hljs-number">1</span>]] + <span class="hljs-number">1</span>;<br>    h[x] = h[son[x][<span class="hljs-number">1</span>]] + val[x] * p[siz[son[x][<span class="hljs-number">1</span>]]] +<br>           h[son[x][<span class="hljs-number">0</span>]] * p[siz[son[x][<span class="hljs-number">1</span>]] + <span class="hljs-number">1</span>];<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ident</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> son[fa[x]][<span class="hljs-number">1</span>] == x; &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">connect</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> k)</span> </span>&#123; fa[x] = f, son[f][k] = x; &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> y = fa[x], z = fa[y];<br>    <span class="hljs-keyword">if</span> (y == root) root = x;<br>    <span class="hljs-type">int</span> yson = <span class="hljs-built_in">ident</span>(x), zson = <span class="hljs-built_in">ident</span>(y);<br>    <span class="hljs-type">int</span> k = son[x][yson ^ <span class="hljs-number">1</span>];<br>    <span class="hljs-built_in">connect</span>(k, y, yson);<br>    <span class="hljs-built_in">connect</span>(y, x, yson ^ <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">connect</span>(x, z, zson);<br>    <span class="hljs-built_in">update</span>(y), <span class="hljs-built_in">update</span>(x);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">splay</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> to)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (fa[x] != to) &#123;<br>      <span class="hljs-type">int</span> y = fa[x], z = fa[y];<br>      <span class="hljs-keyword">if</span> (z != to) (<span class="hljs-built_in">ident</span>(x)) ^ (<span class="hljs-built_in">ident</span>(y)) ? <span class="hljs-built_in">rotate</span>(x) : <span class="hljs-built_in">rotate</span>(y);<br>      <span class="hljs-built_in">rotate</span>(x);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!to) root = x;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> u = root;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">if</span> (x == siz[son[u][<span class="hljs-number">0</span>]] + <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> u;<br>      <span class="hljs-keyword">if</span> (x &lt;= siz[son[u][<span class="hljs-number">0</span>]])<br>        u = son[u][<span class="hljs-number">0</span>];<br>      <span class="hljs-keyword">else</span><br>        x -= siz[son[u][<span class="hljs-number">0</span>]] + <span class="hljs-number">1</span>, u = son[u][<span class="hljs-number">1</span>];<br>    &#125;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!root) &#123;<br>      root = <span class="hljs-built_in">alloc</span>(v, <span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> u = <span class="hljs-built_in">find</span>(x);<br>    <span class="hljs-built_in">splay</span>(u, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (!son[u][<span class="hljs-number">1</span>]) &#123;<br>      son[u][<span class="hljs-number">1</span>] = <span class="hljs-built_in">alloc</span>(v, u);<br>      <span class="hljs-built_in">update</span>(u);<br>      <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      u = <span class="hljs-built_in">find</span>(x + <span class="hljs-number">1</span>);<br>      <span class="hljs-built_in">splay</span>(u, root);<br>      son[u][<span class="hljs-number">0</span>] = <span class="hljs-built_in">alloc</span>(v, u);<br>      <span class="hljs-built_in">update</span>(u), <span class="hljs-built_in">update</span>(root);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    <span class="hljs-type">int</span> u = <span class="hljs-built_in">find</span>(x);<br>    <span class="hljs-built_in">splay</span>(u, <span class="hljs-number">0</span>);<br>    val[u] = v;<br>    <span class="hljs-built_in">update</span>(u);<br>  &#125;<br>  <span class="hljs-function">ull <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-type">int</span> u = <span class="hljs-built_in">find</span>(l);<br>    <span class="hljs-built_in">splay</span>(u, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> val[u];<br>    u = <span class="hljs-built_in">find</span>(r);<br>    <span class="hljs-built_in">splay</span>(u, root);<br>    <span class="hljs-keyword">return</span> h[son[u][<span class="hljs-number">0</span>]] * p[<span class="hljs-number">1</span>] + val[u] + val[root] * p[siz[son[u][<span class="hljs-number">0</span>]] + <span class="hljs-number">1</span>];<br>  &#125;<br>&#125; tr;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> lim = <span class="hljs-number">3e5</span>)</span> </span>&#123;<br>  p[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= lim; ++i) p[i] = p[i - <span class="hljs-number">1</span>] * base;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) tr.<span class="hljs-built_in">insert</span>(i - <span class="hljs-number">1</span>, s[i] - <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> len)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> tr.<span class="hljs-built_in">query</span>(x, x + len - <span class="hljs-number">1</span>) == tr.<span class="hljs-built_in">query</span>(y, y + len - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-built_in">min</span>(N - x, N - y) + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>    <span class="hljs-type">int</span> mid = (l + r + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(x, y, mid))<br>      l = mid;<br>    <span class="hljs-keyword">else</span><br>      r = mid - <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> l;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;martian.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;martian.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%d&quot;</span>, s + <span class="hljs-number">1</span>, &amp;M);<br>  N = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br>  <span class="hljs-built_in">init</span>();<br>  <span class="hljs-type">char</span> op[<span class="hljs-number">3</span>], v[<span class="hljs-number">3</span>];<br>  <span class="hljs-type">int</span> x, y;<br>  <span class="hljs-keyword">while</span> (M--) &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%d&quot;</span>, op, &amp;x);<br>    <span class="hljs-keyword">if</span> (op[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;Q&#x27;</span>) &#123;<br>      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;y);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">calc</span>(x, y));<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;R&#x27;</span>) &#123;<br>      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, v);<br>      <span class="hljs-type">char</span> c = v[<span class="hljs-number">0</span>];<br>      tr.<span class="hljs-built_in">modify</span>(x, c - <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;I&#x27;</span>) &#123;<br>      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, v);<br>      <span class="hljs-type">char</span> c = v[<span class="hljs-number">0</span>];<br>      tr.<span class="hljs-built_in">insert</span>(x, c - <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">1</span>);<br>      ++N;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈希</tag>
      
      <tag>省选</tag>
      
      <tag>splay</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两道FFT题目略解 - [ZJOI2014]力、[AH2017/HNOI2017]礼物</title>
    <link href="/2020/01/02/%E4%B8%A4%E9%81%93FFT%E9%A2%98%E7%9B%AE%E7%95%A5%E8%A7%A3-ZJOI2014-%E5%8A%9B%E3%80%81-AH2017-HNOI2017-%E7%A4%BC%E7%89%A9/"/>
    <url>/2020/01/02/%E4%B8%A4%E9%81%93FFT%E9%A2%98%E7%9B%AE%E7%95%A5%E8%A7%A3-ZJOI2014-%E5%8A%9B%E3%80%81-AH2017-HNOI2017-%E7%A4%BC%E7%89%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="ZJOI2014-力"><a href="#ZJOI2014-力" class="headerlink" title="[ZJOI2014]力"></a>[ZJOI2014]力</h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>给出 $n$ 个数 $q_1,q_2, \dots q_n$，定义<br>$$<br>F_j &#x3D; \sum_{i &#x3D; 1}^{j - 1} \frac{q_i \times q_j}{(i - j)^2} - \sum_{i &#x3D; j + 1}^{n} \frac{q_i \times q_j}{(i - j)^2}<br>$$</p><p>$$E_i &#x3D; \frac{F_i}{q_i}$$</p><p>对 $1 \leq i \leq n$，求 $E_i$ 的值。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>$$<br>E_j &#x3D; \frac{F_j}{q_j} \<br>&#x3D;\sum_{i &#x3D; 1}^{j - 1} \frac{q_i}{(j - i)^2}<del>-</del>\sum_{i &#x3D; j + 1}^{n} \frac{q_i}{(i - j)^2}<br>$$</p><p>然后，我们令<br>$$<br>f_i &#x3D; \frac{1}{i!},g_i&#x3D;q_i<br>$$<br>设$g’<em>i$表示将$g_i$反向后的数组，那么原式就变成了<br>$$<br>E_j &#x3D;\sum</em>{i &#x3D; 1}^{j - 1} f_{j-i}g_i - \sum_{i &#x3D; 1}^{n-j}f_{j-i}g’_i<br>$$<br>很显然这是一个卷积的形式，直接$FFT$求即可。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ty</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">4e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> Pi = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>);<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Complex</span> &#123;<br><span class="hljs-type">double</span> x, y;<br>Complex <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Complex &amp;b) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> &#123;x + b.x, y + b.y&#125;; &#125;<br>Complex <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> Complex &amp;b) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> &#123;x - b.x, y - b.y&#125;; &#125;<br>Complex <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> Complex &amp;b) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> &#123;x * b.x - y * b.y, x * b.y + y * b.x&#125;; &#125;<br>&#125; F[_], G[_];<br><span class="hljs-type">int</span> N, lim = <span class="hljs-number">1</span>, pos[_];<br><span class="hljs-type">double</span> p[_], q[_], t[_], a[_], b[_];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(<span class="hljs-type">int</span> lim, Complex *a, <span class="hljs-type">int</span> op)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i)<br><span class="hljs-keyword">if</span> (i &lt; pos[i]) <span class="hljs-built_in">swap</span>(a[i], a[pos[i]]);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">2</span>; len &lt;= lim; len &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-type">int</span> mid = len &gt;&gt; <span class="hljs-number">1</span>;<br>Complex Wn = &#123; <span class="hljs-built_in">cos</span>(<span class="hljs-number">2.0</span> * Pi / len), op * <span class="hljs-built_in">sin</span>(<span class="hljs-number">2.0</span> * Pi / len) &#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; i += len) &#123;<br>Complex w = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; mid; ++j, w = w * Wn) &#123;<br>Complex x = a[i + j], y = w * a[i + j + mid];<br>a[i + j] = x + y;<br>a[i + j + mid] = x - y;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">work</span><span class="hljs-params">(<span class="hljs-type">double</span> *a, <span class="hljs-type">double</span> *b, <span class="hljs-type">double</span> *ret)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) &#123;<br>F[i].x = a[i], G[i].x = b[i];<br>F[i].y = G[i].y = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-built_in">fft</span>(lim, F, <span class="hljs-number">1</span>);<br><span class="hljs-built_in">fft</span>(lim, G, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) F[i] = F[i] * G[i];<br><span class="hljs-built_in">fft</span>(lim, F, <span class="hljs-number">-1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) ret[i] = F[i].x / lim;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;force.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;force.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;N);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>, &amp;p[i]);<br>q[i] = p[i], t[i] = <span class="hljs-number">1.0</span> / i / i;<br>&#125;<br><span class="hljs-built_in">reverse</span>(q + <span class="hljs-number">1</span>, q + N + <span class="hljs-number">1</span>);<br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; <span class="hljs-keyword">while</span> (lim &lt;= N + N) lim &lt;&lt;= <span class="hljs-number">1</span>, ++k;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) pos[i] = ((pos[i &gt;&gt; <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">1</span>)) | ((i &amp; <span class="hljs-number">1</span>) &lt;&lt; (k - <span class="hljs-number">1</span>));<br><span class="hljs-built_in">work</span>(p, t, a);<br><span class="hljs-built_in">work</span>(q, t, b);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.3lf\n&quot;</span>, a[i] - b[N - i + <span class="hljs-number">1</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="AH2017-x2F-HNOI2017-礼物"><a href="#AH2017-x2F-HNOI2017-礼物" class="headerlink" title="[AH2017&#x2F;HNOI2017]礼物"></a>[AH2017&#x2F;HNOI2017]礼物</h1><h2 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h2><p><a href="https://www.luogu.com.cn/problem/P3723">传送门</a></p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>考虑给数列加上一个增量后，将式子进行展开：<br>$$<br>\sum_{i&#x3D;1}^{n} (a_i-b_i+x)^2 &#x3D; \<br>\sum_{i&#x3D;1}^{n}a_i^2 + \sum_{i&#x3D;1}^{n}b_i^2 + nx^2 + 2x (\sum_{i&#x3D;1}^n a_i - \sum_{i&#x3D;1}^{n}b_i) - 2\sum_{i&#x3D;1}^{n} a_i b_i<br>$$<br>前面的项最小值是确定的，直接利用二次函数求解即可。</p><p>现在问题就变成了求$\sum_{i&#x3D;1}^{n} a_i b_i$的最大值。</p><p>另外还有关于环的问题，所以只需将$b_i$反向，然后倍长$a_i$，求出卷积后，取第$n+1$项到第$2n$项的最大值即可。</p><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">namespace</span> IO &#123;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> bufl = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">15</span>;<br><span class="hljs-type">char</span> buf[bufl], *s = buf, *t = buf;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">fetch</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (s == t) &#123;<br>    t = (s = buf) + <span class="hljs-built_in">fread</span>(buf, <span class="hljs-number">1</span>, bufl, stdin);<br>    <span class="hljs-keyword">if</span> (s == t) <span class="hljs-keyword">return</span> EOF;<br>  &#125;<br>  <span class="hljs-keyword">return</span> *s++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ty</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">int</span> b = <span class="hljs-number">1</span>, c = <span class="hljs-built_in">fetch</span>();<br>  <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) b ^= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">fetch</span>();<br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) a = a * <span class="hljs-number">10</span> + c - <span class="hljs-number">48</span>, c = <span class="hljs-built_in">fetch</span>();<br>  <span class="hljs-keyword">return</span> b ? a : -a;<br>&#125;<br>&#125;  <span class="hljs-comment">// namespace IO</span><br><span class="hljs-keyword">using</span> IO::ty;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> Pi = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>);<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Complex</span> &#123;<br><span class="hljs-type">double</span> x, y;<br>Complex <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Complex &amp;rhs) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> &#123; x + rhs.x, y + rhs.y &#125;; &#125;<br>Complex <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> Complex &amp;rhs) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> &#123; x - rhs.x, y - rhs.y &#125;; &#125;<br>Complex <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> Complex &amp;rhs) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> &#123; x * rhs.x - y * rhs.y, x * rhs.y + y * rhs.x &#125;; &#125;<br>&#125; a[_], b[_];<br><span class="hljs-type">int</span> N, M, MX, maxx, r[_];<br>ll ans, suma, sumb;<br><br><span class="hljs-keyword">inline</span> ll _2(ll x) &#123; <span class="hljs-keyword">return</span> x * x; &#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(<span class="hljs-type">int</span> lim, Complex *a, <span class="hljs-type">int</span> op)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i)<br><span class="hljs-keyword">if</span> (i &lt; r[i]) <span class="hljs-built_in">swap</span>(a[i], a[r[i]]);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">2</span>; len &lt;= lim; len &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-type">int</span> mid = len &gt;&gt; <span class="hljs-number">1</span>;<br>Complex Wn = &#123; <span class="hljs-built_in">cos</span>(Pi / mid), op * <span class="hljs-built_in">sin</span>(Pi / mid) &#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; i += len) &#123;<br>Complex w = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; mid; ++j, w = w * Wn) &#123;<br>Complex x = a[i + j], y = w * a[i + j + mid];<br>a[i + j] = x + y;<br>a[i + j + mid] = x - y;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;gift.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;gift.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>N = <span class="hljs-built_in">ty</span>(), MX = <span class="hljs-built_in">ty</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br>a[i + N].x = a[i].x = <span class="hljs-built_in">ty</span>();<br>ans += _2((ll)a[i].x);<br>suma += (ll)a[i].x;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = N; i &gt;= <span class="hljs-number">1</span>; --i) &#123;<br>b[i].x = <span class="hljs-built_in">ty</span>();<br>ans += _2((ll)b[i].x);<br>sumb += (ll)b[i].x;<br>&#125;<br>M = N, N &lt;&lt;= <span class="hljs-number">1</span>;<br><br>ll m1 = <span class="hljs-built_in">floor</span>(<span class="hljs-number">1.0</span> * (sumb - suma) / N);<br>ll m2 = <span class="hljs-built_in">ceil</span>(<span class="hljs-number">1.0</span> * (sumb - suma) / N);<br>ll t = suma - sumb;<br>ans += <span class="hljs-built_in">min</span>(<span class="hljs-number">2ll</span> * m1 * t + M * m1 * m1, <span class="hljs-number">2ll</span> * m2 * t + M * m2 * m2);<br><br><span class="hljs-type">int</span> lim = <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (lim &lt;= N + M) lim &lt;&lt;= <span class="hljs-number">1</span>, ++k;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) r[i] = (r[i &gt;&gt; <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">1</span>) | ((i &amp; <span class="hljs-number">1</span>) &lt;&lt; (k - <span class="hljs-number">1</span>));<br><span class="hljs-built_in">fft</span>(lim, a, <span class="hljs-number">1</span>);<br><span class="hljs-built_in">fft</span>(lim, b, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) a[i] = a[i] *  b[i];<br><span class="hljs-built_in">fft</span>(lim, a, <span class="hljs-number">-1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) a[i].x = (ll)(a[i].x / lim + <span class="hljs-number">0.5</span>);<br><br>ll maxx = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = M + <span class="hljs-number">1</span>; i &lt;= M + M; ++i) maxx = <span class="hljs-built_in">max</span>(maxx, (ll)a[i].x);<br>ans -= <span class="hljs-number">2</span> * maxx;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>多项式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>省选</tag>
      
      <tag>FFT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[WC2014]紫荆花之恋 - 动态点分治 + 平衡树</title>
    <link href="/2020/01/01/WC2014-%E7%B4%AB%E8%8D%86%E8%8A%B1%E4%B9%8B%E6%81%8B-%E5%8A%A8%E6%80%81%E7%82%B9%E5%88%86%E6%B2%BB-%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    <url>/2020/01/01/WC2014-%E7%B4%AB%E8%8D%86%E8%8A%B1%E4%B9%8B%E6%81%8B-%E5%8A%A8%E6%80%81%E7%82%B9%E5%88%86%E6%B2%BB-%E5%B9%B3%E8%A1%A1%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p><strong>PS：这篇博客我是从2019年12月29日开始写的</strong></p><h1 id="Task1-N-lt-x3D-1000"><a href="#Task1-N-lt-x3D-1000" class="headerlink" title="Task1 N&lt;&#x3D;1000"></a>Task1 N&lt;&#x3D;1000</h1><p>$O(n^2)$算法随便乱搞。</p><p><a href="https://www.luogu.com.cn/record/28868263">源代码</a></p><h1 id="Task2-N-lt-x3D-1e5-且为链"><a href="#Task2-N-lt-x3D-1e5-且为链" class="headerlink" title="Task2 N&lt;&#x3D; 1e5 且为链"></a>Task2 N&lt;&#x3D; 1e5 且为链</h1><span id="more"></span><p>考虑新加入一个节点后，因为是链，所以每个节点到新加入的节点的距离的增量是相同的。</p><p>观察一下两个小精灵能够成为好朋友的条件：<br>$$<br>dist(i,j)\le r_i + r_j<br>$$<br>移个项：<br>$$<br>dist(i,j) - r_j \le r_j<br>$$<br>于是可以用平衡树维护每个点的$dist(i,j)-r_j$，然后直接查询即可。</p><p>算法复杂度$O(N\log N)$。</p><p><a href="https://www.luogu.com.cn/record/28868384">源代码</a></p><h1 id="Task3-N-lt-x3D-1e5"><a href="#Task3-N-lt-x3D-1e5" class="headerlink" title="Task3 N&lt;&#x3D; 1e5"></a>Task3 N&lt;&#x3D; 1e5</h1><p>$r \le 10$，这意味着什么？这意味着新加入一个节点之后，最多只需要搜索到深度为20就够了，但是$1s$后我就发现了问题，这不是直接就被<strong>菊花图</strong>卡成$n$方了吗？</p><p>让我们再次考虑一下上面的<del>柿子</del>：<br>$$<br>dist(i,j)\le r_i + r_j<br>$$<br>设$dis_i$表示以$1$为根，从$1$到节点$i$的距离，那么：</p><p>考虑新加入一个节点$x$后，那么只需分两种情况讨论：</p><ol><li><p>与$x$在同一条链上的节点</p><p>$dis_x - dis_i\le r_x + r_i$</p><p>$dis_x - r_x \le r_i + dis_i$</p></li><li><p>与$x$不在同一条链上的节点</p><p>$dis_x + dis_i\le r_x + r_i$</p><p>$dis_x - r_x \le r_i - dis_i$</p></li></ol><p>现在的问题就在于怎么处理是否与$x$在同一条链上的情况。<del>每条链建一棵平衡树。</del></p><p>这就触及到我的知识盲区了。</p><p>但是我$jio$得暴力搞的话，可以过掉一些随机生成树的点。</p><p>好的，到这里，预计得分是$50pts$上下。</p><p>但是这个部分分我不想写了。。。</p><h1 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h1><p><strong>Update 2020.1.1</strong> 一年后（大雾，垃圾的$lyx$终于开始写这道题的正解了</p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>维护一棵树，每次需要执行以下两个操作：</p><ol><li>新增一个叶子节点</li><li>查询新增的叶子节点与原树上的多少个点满足两点的距离小于等于两点点权相加之和。</li></ol><p>强制在线。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h2><ol><li>高速平衡树（指除了$Fhq-Treap$和$Splay$以外的平衡树，或者你有高超的卡常技能也行）</li><li>动态点分治（替罪羊树式点分树）</li></ol><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于这道题涉及到的东西比较繁琐，所以接下来将分块讲解。</p><h2 id="动态点分治"><a href="#动态点分治" class="headerlink" title="动态点分治"></a>动态点分治</h2><p>首先，如果这道题不强制在线的话要怎么做，我们观察一下题目给出的关于条件的式子：<br>$$<br>dis_{i,j}\le r_i+r_j<br>$$<br>考虑重心$u$，那么式子就变成了<br>$$<br>dis_{i,u}+dis_{j,u}\le r_i + r_j<br>$$<br>移项<br>$$<br>dis_{i,u}-r_i\le r_j - dis_{j,u}<br>$$<br>所以如果不强制在线，应该就得到了一个比较显然的做法：建立点分树，对于每个点维护一棵平衡树，存储$dis_{i,u}-r_i$，对于一个新加入的点$x$，就在点分树上暴力跳祖先，并进行查询和更新。</p><p>然而，本题要求<strong>强制在线</strong>（说的就是你，毒瘤的强制在线！）。</p><h2 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h2><p>因为本题中所用到的平衡树功能比较单一，所以可以写高速平衡树。</p><p>博主查阅了部分博文，发现主要有以下几种平衡树：</p><ol><li><p>替罪羊树，重构因子为$0.86$时的时间复杂度比较优秀</p></li><li><p>$Splay$或$Fhq-Treap$，高超的卡常技巧</p></li><li><p>$SBT$</p></li><li><p>$Treap$</p></li></ol><p><strong>PS：当然，以上几种平衡树我并没有一一试验</strong></p><h2 id="替罪羊式点分树"><a href="#替罪羊式点分树" class="headerlink" title="替罪羊式点分树"></a>替罪羊式点分树</h2><p>前面说到离线的做法，既然强制在线，那我们就不能把点分树一次性全部建出来了。</p><p>那怎么办呢，<del>每次加一个点就重构一次点分树不就行了。</del></p><p><img src="https://i.loli.net/2020/01/01/wyZlkC5HPzAMsbf.png"></p><p>考虑点分治时的分治中心，之所以要选在重心，是因为选在重心时效率最高，那么分治中心如果不在重心，显然也是可以的，所以每次新加入一个节点时，可以就将它加入到其在原树的父亲节点下面。</p><p>然后，为了保证复杂度，我们可以仿照替罪羊树的思想，设定一个重构因子$\alpha$，当某个节点$x$的子树大小满足$size_x&gt;\alpha \cdot size_{fa_x}$时，就暴力重构$fa_x$在点分树上的子树。</p><h2 id="LCA"><a href="#LCA" class="headerlink" title="LCA"></a>LCA</h2><p>由于是动态加点，无法使用$RMQ$或树链剖分，只能使用倍增（倍增的胜利）。</p><h2 id="时间复杂度及一些细节"><a href="#时间复杂度及一些细节" class="headerlink" title="时间复杂度及一些细节"></a>时间复杂度及一些细节</h2><p>本题的时间复杂度主要在外层点分树的重构，以及由于重构外层点分树内层平衡树的信息都必须重建上。</p><p>对于外层点分树，重构的时间复杂度每次均摊$O(\log n)$。</p><p>对于内层平衡树的重建，因为每个平衡树平均$\log n$个节点，每次插入时间复杂度$O(\log n)$，所以重建一棵平衡树时间复杂度$O(\log^2 n)$。一次内层重建$\log n$棵平衡树时间复杂度是$O(\log n^3)$。</p><p>所以必须要使用高速平衡树，另外，由于一次重建的复杂度较高，经过不懈的尝试，我发现在我的程序里点分树的重建因子设成$0.76$时速度最快。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">namespace</span> IO &#123;<br><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">int</span> <span class="hljs-title">maxn</span><span class="hljs-params">((<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">21</span>) + <span class="hljs-number">1</span>)</span></span>;<br><span class="hljs-type">char</span> ibuf[maxn], *iS, *iT, obuf[maxn], *oS = obuf, *oT = obuf + maxn - <span class="hljs-number">1</span>, ch,<br>                                       st[<span class="hljs-number">55</span>];<br><span class="hljs-type">int</span> opt, tp;<br><span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">Getc</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> (iS == iT ? (iT = (iS = ibuf) + <span class="hljs-built_in">fread</span>(ibuf, <span class="hljs-number">1</span>, maxn, stdin),<br>                      (iS == iT ? EOF : *iS++))<br>                   : *iS++);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Flush</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">fwrite</span>(obuf, <span class="hljs-number">1</span>, oS - obuf, stdout);<br>  oS = obuf;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Putc</span><span class="hljs-params">(<span class="hljs-type">char</span> x)</span> </span>&#123;<br>  *oS++ = x;<br>  <span class="hljs-keyword">if</span> (oS == oT) <span class="hljs-built_in">Flush</span>();<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Int</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Input</span><span class="hljs-params">(Int&amp; x)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (opt = <span class="hljs-number">1</span>, ch = <span class="hljs-built_in">Getc</span>(); ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>; ch = <span class="hljs-built_in">Getc</span>())<br>    opt = ch == <span class="hljs-string">&#x27;-&#x27;</span> ? <span class="hljs-number">-1</span> : <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (x = <span class="hljs-number">0</span>; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span> &amp;&amp; ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">Getc</span>())<br>    x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (ch ^ <span class="hljs-number">48</span>);<br>  x *= opt;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Int</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(Int x)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (!x) <span class="hljs-built_in">Putc</span>(<span class="hljs-string">&#x27;0&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">Putc</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>  <span class="hljs-keyword">while</span> (x) st[++tp] = x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>, x /= <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">while</span> (tp) <span class="hljs-built_in">Putc</span>(st[tp--]);<br>&#125;<br>&#125;  <span class="hljs-comment">// namespace IO</span><br><span class="hljs-keyword">using</span> IO::Flush;<br><span class="hljs-keyword">using</span> IO::Input;<br><span class="hljs-keyword">using</span> IO::Print;<br><span class="hljs-keyword">using</span> IO::Putc;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span>;<br><span class="hljs-type">int</span> id, N, r[_];<br><span class="hljs-type">int</span> tot = <span class="hljs-number">1</span>, head[_], to[_ &lt;&lt; <span class="hljs-number">1</span>], nxt[_ &lt;&lt; <span class="hljs-number">1</span>], edge[_ &lt;&lt; <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">adde</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> z)</span> </span>&#123;<br>  to[++tot] = y;<br>  edge[tot] = z;<br>  nxt[tot] = head[x];<br>  head[x] = tot;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> lca &#123;<br><span class="hljs-type">int</span> dep[_], dis[_], fa[_][<span class="hljs-number">20</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> z)</span> </span>&#123;<br>  <span class="hljs-built_in">adde</span>(x, y, z);<br>  <span class="hljs-built_in">adde</span>(y, x, z);<br>  dep[y] = dep[x] + <span class="hljs-number">1</span>;<br>  dis[y] = dis[x] + z;<br>  fa[y][<span class="hljs-number">0</span>] = x;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">18</span>; ++i) fa[y][i] = fa[fa[y][i - <span class="hljs-number">1</span>]][i - <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (dep[x] &lt; dep[y]) <span class="hljs-built_in">swap</span>(x, y);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">18</span>; i &gt;= <span class="hljs-number">0</span>; --i)<br>    <span class="hljs-keyword">if</span> (dep[fa[x][i]] &gt;= dep[y]) x = fa[x][i];<br>  <span class="hljs-keyword">if</span> (x == y) <span class="hljs-keyword">return</span> x;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">18</span>; i &gt;= <span class="hljs-number">0</span>; --i)<br>    <span class="hljs-keyword">if</span> (fa[x][i] != fa[y][i]) x = fa[x][i], y = fa[y][i];<br>  <span class="hljs-keyword">return</span> fa[x][<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dist</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123; <span class="hljs-keyword">return</span> dis[x] + dis[y] - <span class="hljs-number">2</span> * dis[<span class="hljs-built_in">query</span>(x, y)]; &#125;<br>&#125;  <span class="hljs-comment">// namespace lca</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Treap</span> &#123;<br>  <span class="hljs-type">int</span> val, key, cnt, size;<br>  Treap *ls, *rs;<br>  <span class="hljs-type">static</span> stack&lt;Treap*&gt; bin;<br>  <span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-type">size_t</span>, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    Treap* ret;<br>    ret = bin.<span class="hljs-built_in">top</span>();<br>    bin.<span class="hljs-built_in">pop</span>();<br>    ret-&gt;val = v, ret-&gt;key = <span class="hljs-built_in">rand</span>();<br>    ret-&gt;cnt = ret-&gt;size = <span class="hljs-number">1</span>;<br>    ret-&gt;ls = ret-&gt;rs = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> ret;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-type">void</span>* t)</span> </span>&#123; bin.<span class="hljs-built_in">push</span>((Treap*)t); &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;<br>    size = cnt;<br>    <span class="hljs-keyword">if</span> (ls) size += ls-&gt;size;<br>    <span class="hljs-keyword">if</span> (rs) size += rs-&gt;size;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">zig</span><span class="hljs-params">(Treap*&amp; p)</span> </span>&#123;<br>    Treap* q = p-&gt;ls;<br>    p-&gt;ls = q-&gt;rs, q-&gt;rs = p;<br>    p-&gt;<span class="hljs-built_in">update</span>(), q-&gt;<span class="hljs-built_in">update</span>();<br>    p = q;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">zag</span><span class="hljs-params">(Treap*&amp; p)</span> </span>&#123;<br>    Treap* q = p-&gt;rs;<br>    p-&gt;rs = q-&gt;ls, q-&gt;ls = p;<br>    p-&gt;<span class="hljs-built_in">update</span>(), q-&gt;<span class="hljs-built_in">update</span>();<br>    p = q;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(Treap* p, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (v &lt; p-&gt;val)<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(p-&gt;ls, v);<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-keyword">return</span> p-&gt;cnt + (p-&gt;ls == <span class="hljs-literal">NULL</span> ? <span class="hljs-number">0</span> : p-&gt;ls-&gt;size) + <span class="hljs-built_in">query</span>(p-&gt;rs, v);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(Treap*&amp; p, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;<br>      p = <span class="hljs-built_in">new</span> (v) Treap;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (v == p-&gt;val) &#123;<br>      ++p-&gt;cnt;<br>      p-&gt;<span class="hljs-built_in">update</span>();<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (v &lt; p-&gt;val) &#123;<br>      <span class="hljs-built_in">insert</span>(p-&gt;ls, v);<br>      <span class="hljs-keyword">if</span> (p-&gt;key &lt; p-&gt;ls-&gt;key) <span class="hljs-built_in">zig</span>(p);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (v &gt; p-&gt;val) &#123;<br>      <span class="hljs-built_in">insert</span>(p-&gt;rs, v);<br>      <span class="hljs-keyword">if</span> (p-&gt;key &lt; p-&gt;rs-&gt;key) <span class="hljs-built_in">zag</span>(p);<br>    &#125;<br>    p-&gt;<span class="hljs-built_in">update</span>();<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(Treap*&amp; p)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">remove</span>(p-&gt;ls);<br>    <span class="hljs-built_in">remove</span>(p-&gt;rs);<br>    <span class="hljs-keyword">delete</span> p;<br>    p = <span class="hljs-literal">NULL</span>;<br>  &#125;<br>&#125;;<br>stack&lt;Treap*&gt; Treap::bin;<br>Treap node[_ &lt;&lt; <span class="hljs-number">7</span>];<br><br><span class="hljs-comment">// 动态点分治</span><br><span class="hljs-keyword">namespace</span> Tree &#123;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> alpha = <span class="hljs-number">0.76</span>;<br><span class="hljs-type">int</span> fa[_], vis[_], vis2[_], tim;<br><span class="hljs-type">int</span> mxsiz, totsiz, root, siz[_];<br>Treap *dist[_], *sub[_];<br>set&lt;<span class="hljs-type">int</span>&gt; son[_];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  vis[x] = tim;<br>  <span class="hljs-built_in">remove</span>(dist[x]);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> y : son[x]) &#123;<br>    <span class="hljs-built_in">remove</span>(y);<br>    <span class="hljs-built_in">remove</span>(sub[y]);<br>  &#125;<br>  son[x].<span class="hljs-built_in">clear</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">calcsiz</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f)</span> </span>&#123;<br>  siz[x] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (vis[y] != tim || vis2[y] == tim || y == f) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">calcsiz</span>(y, x);<br>    siz[x] += siz[y];<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getroot</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f)</span> </span>&#123;<br>  <span class="hljs-type">int</span> maxx = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (vis[y] != tim || vis2[y] == tim || y == f) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">getroot</span>(y, x);<br>    maxx = <span class="hljs-built_in">max</span>(maxx, siz[y]);<br>  &#125;<br>  maxx = <span class="hljs-built_in">max</span>(maxx, totsiz - siz[x]);<br>  <span class="hljs-keyword">if</span> (maxx &lt; mxsiz) mxsiz = maxx, root = x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reinsert</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> dis, Treap*&amp; p)</span> </span>&#123;<br>  <span class="hljs-built_in">insert</span>(p, dis - r[x]);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i], z = edge[i];<br>    <span class="hljs-keyword">if</span> (y == f || vis[y] != tim || vis2[y] == tim) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">reinsert</span>(y, x, dis + z, p);<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-built_in">calcsiz</span>(x, <span class="hljs-number">0</span>);<br>  totsiz = siz[x], mxsiz = INF, root = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">getroot</span>(x, <span class="hljs-number">0</span>);<br>  vis2[x = root] = tim;<br>  <span class="hljs-built_in">reinsert</span>(x, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, dist[x]);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i], z = edge[i];<br>    <span class="hljs-keyword">if</span> (vis[y] != tim || vis2[y] == tim) <span class="hljs-keyword">continue</span>;<br>    Treap* p = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">reinsert</span>(y, <span class="hljs-number">0</span>, z, p);<br>    <span class="hljs-type">int</span> rt = <span class="hljs-built_in">divide</span>(y);<br>    fa[rt] = x, son[x].<span class="hljs-built_in">insert</span>(rt);<br>    sub[rt] = p;<br>  &#125;<br>  <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rebuild</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  ++tim;<br>  <span class="hljs-built_in">remove</span>(x);<br>  <span class="hljs-type">int</span> f = fa[x];<br>  Treap* p = sub[x];<br>  sub[x] = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-keyword">if</span> (f) son[f].<span class="hljs-built_in">erase</span>(x);<br>  x = <span class="hljs-built_in">divide</span>(x);<br>  fa[x] = f, sub[x] = p;<br>  <span class="hljs-keyword">if</span> (f) son[f].<span class="hljs-built_in">insert</span>(x);<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f)</span> </span>&#123;<br>  fa[x] = f, son[f].<span class="hljs-built_in">insert</span>(x);<br>  ll ans = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">insert</span>(dist[x], -r[x]);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; fa[i]; i = fa[i]) &#123;<br>    <span class="hljs-type">int</span> d = lca::<span class="hljs-built_in">dist</span>(x, fa[i]);<br>    <span class="hljs-built_in">insert</span>(dist[fa[i]], d - r[x]);<br>    <span class="hljs-built_in">insert</span>(sub[i], d - r[x]);<br>    ans += <span class="hljs-built_in">query</span>(dist[fa[i]], r[x] - d);<br>    ans -= <span class="hljs-built_in">query</span>(sub[i], r[x] - d);<br>  &#125;<br>  <span class="hljs-type">int</span> xx = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; fa[i]; i = fa[i])<br>    <span class="hljs-keyword">if</span> (dist[i]-&gt;size &gt; dist[fa[i]]-&gt;size * alpha) xx = fa[i];<br>  <span class="hljs-keyword">if</span> (xx) <span class="hljs-built_in">rebuild</span>(xx);<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br>&#125;  <span class="hljs-comment">// namespace Tree</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;flower.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;flower.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-built_in">srand</span>(<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (_ &lt;&lt; <span class="hljs-number">7</span>); ++i) Treap::bin.<span class="hljs-built_in">push</span>(node + i);<br>  <span class="hljs-built_in">Input</span>(id), <span class="hljs-built_in">Input</span>(N);<br>  ll last = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) &#123;<br>    <span class="hljs-type">int</span> x, z, v;<br>    <span class="hljs-built_in">Input</span>(x), <span class="hljs-built_in">Input</span>(z), <span class="hljs-built_in">Input</span>(v);<br>    x = x ^ (last % mod);<br>    lca::<span class="hljs-built_in">insert</span>(x, i, z);<br>    r[i] = v;<br>    last += Tree::<span class="hljs-built_in">insert</span>(i, x);<br>    <span class="hljs-built_in">Print</span>(last), <span class="hljs-built_in">Putc</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Flush</span>(), <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态点分治</tag>
      
      <tag>平衡树</tag>
      
      <tag>WC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ZJOI2015]幻想乡战略游戏 - 动态点分治</title>
    <link href="/2020/01/01/ZJOI2015-%E5%B9%BB%E6%83%B3%E4%B9%A1%E6%88%98%E7%95%A5%E6%B8%B8%E6%88%8F-%E5%8A%A8%E6%80%81%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    <url>/2020/01/01/ZJOI2015-%E5%B9%BB%E6%83%B3%E4%B9%A1%E6%88%98%E7%95%A5%E6%B8%B8%E6%88%8F-%E5%8A%A8%E6%80%81%E7%82%B9%E5%88%86%E6%B2%BB/</url>
    
    <content type="html"><![CDATA[<p><strong>先考虑无修要怎么操作。</strong></p><span id="more"></span><p><img src="https://i.loli.net/2019/12/31/om8dMzWnZLF3PsH.png" alt="graph (2).png"></p><p>发现在无修的情况下，我们可以用一个换根$dp$解决。</p><p><strong>那么带修改的情况要怎么办呢？</strong></p><p>每次修改重新$dp$一遍不就行了（雾。</p><p>好的，让我们先来敲一个$O(N^2)$的$dp$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">ty</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>(); ll x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br>  <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br>  <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> ll INF = <span class="hljs-number">1e18</span>;<br><span class="hljs-type">int</span> tot, head[_], to[_ &lt;&lt; <span class="hljs-number">1</span>], nxt[_ &lt;&lt; <span class="hljs-number">1</span>], edge[_ &lt;&lt; <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">adde</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> z)</span> </span>&#123;<br>  to[++tot] = y;<br>  edge[tot] = z;<br>  nxt[tot] = head[x];<br>  head[x] = tot;<br>&#125;<br><br><span class="hljs-type">int</span> N, M;<br>ll val[_], g[_], f[_], sum, ans;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> fa, ll d)</span> </span>&#123;<br>  f[<span class="hljs-number">1</span>] += d * val[x];<br>  g[x] = val[x];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i], z = edge[i];<br>    <span class="hljs-keyword">if</span> (y == fa) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">dfs</span>(y, x, d + z);<br>    g[x] += g[y];<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> fa)</span> </span>&#123;<br>  ans = <span class="hljs-built_in">min</span>(ans, f[x]);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i], z = edge[i];<br>    <span class="hljs-keyword">if</span> (y == fa) <span class="hljs-keyword">continue</span>;<br>    f[y] = f[x] - g[y] * z + (sum - g[y]) * z;<br>    <span class="hljs-built_in">dp</span>(y, x);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>  f[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>, ans = INF;<br>  <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);  <span class="hljs-comment">//先以1为根，求出答案，然后进行换根dp</span><br>  <span class="hljs-built_in">dp</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;fantasy.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;fantasy.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  N = <span class="hljs-built_in">ty</span>(), M = <span class="hljs-built_in">ty</span>();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; ++i) &#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-built_in">ty</span>(), y = <span class="hljs-built_in">ty</span>(), z = <span class="hljs-built_in">ty</span>();<br>    <span class="hljs-built_in">adde</span>(x, y, z);<br>    <span class="hljs-built_in">adde</span>(y, x, z);<br>  &#125;<br>  <span class="hljs-keyword">while</span> (M--) &#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-built_in">ty</span>(), y = <span class="hljs-built_in">ty</span>();<br>    val[x] += y, sum += y;<br>    <span class="hljs-built_in">work</span>();  <span class="hljs-comment">// 每修改一次，就重新dp一次2333</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后就是这样的盛况：</p><p><img src="https://i.loli.net/2019/12/31/MYNHOiRVhXpwGP6.png"></p><p><del>“没事，卡卡常就过了。”</del><a href="https://www.luogu.com.cn/user/113695">@mzx</a></p><p>因为我太菜了，所以并没有把$O(N^2)$卡常卡成$O(N \log N)$的能力。</p><p>先考虑一下这个$dp$的本质是什么，考虑从一个点$x$移动到点$y$，那么花费值的变化亮就是<br>$$<br>dis_{x,y} \times (sum - 2 \times g_y)<br>$$<br>所以我们发现，当$sum-2\times g_y$为负数的时候，答案便会减小，且可以证明每次这样的点唯一，所以实际上，我们可以从$root$开始出发，每次往$sum - 2 \times g_y$为负数的那个方向走，直到走不动时，就得到了最优解。</p><p><strong>下面是动态点分治的内容了</strong></p><p>发现主要是每次修改后，都需要从$root$节点重新开始寻找最优解，最坏情况下还是会达到$O(N^2)$的复杂度，所以考虑如何优化这个过程。此时，就应该扯上点分树了。</p><p>假设我们能利用点分树求得答案，因为在点分树上只需要访问$\log$个点，所以一次修改的复杂度就降到了$\log$级别。</p><p>此时，正确的做法似乎逐渐浮出了水面：</p><p>假设当前所在的节点为$x$，那么我们枚举$x$在原树上的边，假设这条边的另一端为$y$，然后用$O(\log N)$的复杂度暴力计算出如果移动到$y$，花费是多少，如果花费减小，那么跳到点分树中对应的块上，然后再在对应的块里面求解，若不存在这样的边，那么肯定就是最优解。</p><p>现在思考一下这个做法需要维护哪些东西：</p><ol><li>每个块的点权和$sum_x$（点分树上$O(\log N)$修改）</li><li>$dist_x$：$x$在点分树上对应的联通块所有的点跳到$x$的花费</li><li>$sub_x$：$x$在点分树上对应的联通块所有的点跳到$x$在点分树上的父亲$fa_x$的花费</li></ol><p>然后查询和修改不断暴跳父亲就好了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ty</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">int</span> N, M;<br><span class="hljs-type">int</span> tot, head[_], to[_ &lt;&lt; <span class="hljs-number">1</span>], nxt[_ &lt;&lt; <span class="hljs-number">1</span>], edge[_ &lt;&lt; <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">adde</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> z)</span> </span>&#123;<br>to[++tot] = y;<br>edge[tot] = z;<br>nxt[tot] = head[x];<br>head[x] = tot;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> lca &#123;<br><span class="hljs-type">int</span> fa[_], son[_], dep[_], dis[_], siz[_], top[_];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f)</span> </span>&#123;<br>siz[x] = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> maxx = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br><span class="hljs-type">int</span> y = to[i], z = edge[i];<br><span class="hljs-keyword">if</span> (y == f) <span class="hljs-keyword">continue</span>;<br>fa[y] = x, dep[y] = dep[x] + <span class="hljs-number">1</span>, dis[y] = dis[x] + z;<br><span class="hljs-built_in">dfs1</span>(y, x);<br>siz[x] += siz[y];<br><span class="hljs-keyword">if</span> (siz[y] &gt; maxx) maxx = siz[y], son[x] = y;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> topf)</span> </span>&#123;<br>top[x] = topf;<br><span class="hljs-keyword">if</span> (!son[x]) <span class="hljs-keyword">return</span>;<br><span class="hljs-built_in">dfs2</span>(son[x], topf);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br><span class="hljs-type">int</span> y = to[i];<br><span class="hljs-keyword">if</span> (y == fa[x] || y == son[x]) <span class="hljs-keyword">continue</span>;<br><span class="hljs-built_in">dfs2</span>(y, y);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>dep[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>, <span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">dfs2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br><span class="hljs-keyword">while</span> (top[x] != top[y]) &#123;<br><span class="hljs-keyword">if</span> (dep[top[x]] &lt; dep[top[y]]) <span class="hljs-built_in">swap</span>(x, y);<br>x = fa[top[x]];<br>&#125;<br><span class="hljs-keyword">return</span> dep[x] &lt; dep[y] ? x : y;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dist</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123; <span class="hljs-keyword">return</span> dis[x] + dis[y] - <span class="hljs-number">2</span> * dis[<span class="hljs-built_in">query</span>(x, y)]; &#125;<br>&#125; <span class="hljs-comment">// namespace lca</span><br><br><span class="hljs-type">int</span> mxsiz, totsiz, root, siz[_], vis[_], fa[_];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getroot</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f)</span> </span>&#123;<br>siz[x] = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> maxx = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br><span class="hljs-type">int</span> y = to[i];<br><span class="hljs-keyword">if</span> (vis[y] || y == f) <span class="hljs-keyword">continue</span>;<br><span class="hljs-built_in">getroot</span>(y, x);<br>siz[x] += siz[y];<br>maxx = <span class="hljs-built_in">max</span>(maxx, siz[y]);<br>&#125;<br>maxx = <span class="hljs-built_in">max</span>(maxx, totsiz - siz[x]);<br><span class="hljs-keyword">if</span> (maxx &lt; mxsiz) mxsiz = maxx, root = x;<br>&#125;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br>vector&lt;PII&gt; E[_];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>vis[x] = <span class="hljs-literal">true</span>;<br><span class="hljs-type">int</span> nowsiz = totsiz;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br><span class="hljs-type">int</span> y = to[i];<br><span class="hljs-keyword">if</span> (vis[y]) <span class="hljs-keyword">continue</span>;<br>mxsiz = INF, root = <span class="hljs-number">0</span>;<br>totsiz = siz[y] &gt; siz[x] ? nowsiz - siz[x] : siz[y];<br><span class="hljs-built_in">getroot</span>(y, <span class="hljs-number">0</span>);<br>E[x].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(y, root));<br>fa[root] = x;<br><span class="hljs-built_in">divide</span>(root);<br>&#125;<br>&#125;<br><br>ll sum[_];<span class="hljs-comment">// 点分树中以x为根的子树的权值和</span><br>ll dist[_];<span class="hljs-comment">// 点分树中以x为根的子树全部到x的花费</span><br>ll sub[_];<span class="hljs-comment">// 点分树中以x为根的子树全部到x在点分树上的父亲的花费</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>sum[x] += y;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; fa[i]; i = fa[i]) &#123;<br><span class="hljs-type">int</span> len = lca::<span class="hljs-built_in">dist</span>(x, fa[i]);<br>sum[fa[i]] += y;<br>dist[fa[i]] += <span class="hljs-number">1ll</span> * y * len;<br>sub[i] += <span class="hljs-number">1ll</span> * y * len;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 用一个log的代价直接计算以x为供应站时的话费</span><br><span class="hljs-function">ll <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>ll ret = dist[x];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; fa[i]; i = fa[i]) &#123;<br><span class="hljs-type">int</span> len = lca::<span class="hljs-built_in">dist</span>(x, fa[i]);<br>ret += <span class="hljs-number">1ll</span> * len * (sum[fa[i]] - sum[i]);<br>ret += dist[fa[i]] - sub[i];<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-comment">// printf(&quot;%d\n&quot;, x);</span><br>ll cur = <span class="hljs-built_in">calc</span>(x);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : E[x]) &#123;<br><span class="hljs-type">int</span> y = p.first, rt = p.second;<br><span class="hljs-comment">// printf(&quot;%d %d\n&quot;, y, rt);</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">calc</span>(y) &lt; cur) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(rt);<br>&#125;<br><span class="hljs-keyword">return</span> cur;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;fantasy.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;fantasy.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>N = <span class="hljs-built_in">ty</span>(), M = <span class="hljs-built_in">ty</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; ++i) &#123;<br><span class="hljs-type">int</span> x = <span class="hljs-built_in">ty</span>(), y = <span class="hljs-built_in">ty</span>(), z = <span class="hljs-built_in">ty</span>();<br><span class="hljs-built_in">adde</span>(x, y, z);<br><span class="hljs-built_in">adde</span>(y, x, z);<br>&#125;<br>lca::<span class="hljs-built_in">init</span>();<br><br>mxsiz = INF, totsiz = N, root = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">getroot</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-type">int</span> RT = root;<br><span class="hljs-built_in">divide</span>(root);<br><br><span class="hljs-keyword">while</span> (M--) &#123;<br><span class="hljs-comment">// printf(&quot;!%d\n&quot;, M);</span><br><span class="hljs-type">int</span> x = <span class="hljs-built_in">ty</span>(), y = <span class="hljs-built_in">ty</span>();<br><span class="hljs-built_in">modify</span>(x, y);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">query</span>(RT));<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>省选</tag>
      
      <tag>动态点分治</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>点分治与动态点分治略解</title>
    <link href="/2019/12/31/%E7%82%B9%E5%88%86%E6%B2%BB%E4%B8%8E%E5%8A%A8%E6%80%81%E7%82%B9%E5%88%86%E6%B2%BB%E7%95%A5%E8%A7%A3/"/>
    <url>/2019/12/31/%E7%82%B9%E5%88%86%E6%B2%BB%E4%B8%8E%E5%8A%A8%E6%80%81%E7%82%B9%E5%88%86%E6%B2%BB%E7%95%A5%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>暑假的时候学的算法，太久不用就忘记了代码怎么写。</p><h1 id="点分治"><a href="#点分治" class="headerlink" title="点分治"></a>点分治</h1><p>就大概的讲一下ba。</p><span id="more"></span><p>将一棵无根树转化为以<strong>重心</strong>为根的有根树，假设为$p$，那么对于树上的路径，就可以分为两类：</p><ol><li>经过根节点$p$</li><li>包含于$p$的某一棵子树内（不经过根节点）</li></ol><p>由于重心的性质：</p><blockquote><p>以重心为根，任意一棵子树的大小都不超过整棵树大小的一半。</p></blockquote><p>所以保证了复杂度为$O(N\log N)$</p><p>对于第一种路径直接进行统计，对于第二种路径，则删除与重心相连的所有边，然后分治下去。</p><p>需要注意的是，代码里的<code>solve</code>函数应该根据实际情况进行编写，而不是直接套模板。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ty</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>  <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>;<br>    ch = <span class="hljs-built_in">getchar</span>();<br>  &#125;<br>  <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>    x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    ch = <span class="hljs-built_in">getchar</span>();<br>  &#125;<br>  <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">int</span> tot, head[_], to[_ &lt;&lt; <span class="hljs-number">1</span>], nxt[_ &lt;&lt; <span class="hljs-number">1</span>], edge[_ &lt;&lt; <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">adde</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> z)</span> </span>&#123;<br>  to[++tot] = y;<br>  edge[tot] = z;<br>  nxt[tot] = head[x];<br>  head[x] = tot;<br>&#125;<br><br><span class="hljs-type">int</span> N, K;<br><span class="hljs-type">int</span> root, totsiz, mxsiz, siz[_], vis[_], ans;<br><span class="hljs-type">int</span> dis[_], cnt;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getroot</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> fa)</span> </span>&#123;<br>  siz[x] = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> maxx = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (vis[y] || y == fa) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">getroot</span>(y, x);<br>    siz[x] += siz[y];<br>    maxx = <span class="hljs-built_in">max</span>(maxx, siz[y]);<br>  &#125;<br>  maxx = <span class="hljs-built_in">max</span>(maxx, totsiz - siz[x]);<br>  <span class="hljs-keyword">if</span> (maxx &lt; mxsiz) mxsiz = maxx, root = x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> fa, <span class="hljs-type">int</span> d)</span> </span>&#123;<br>  dis[++cnt] = d;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i], z = edge[i];<br>    <span class="hljs-keyword">if</span> (vis[y] || y == fa) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">query</span>(y, x, d + z);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> s)</span> </span>&#123;<br>  cnt = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">query</span>(x, <span class="hljs-number">0</span>, s);<br>  <span class="hljs-built_in">sort</span>(dis + <span class="hljs-number">1</span>, dis + cnt + <span class="hljs-number">1</span>);<br>  <span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r = cnt, sum = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>    <span class="hljs-keyword">if</span> (dis[l] + dis[r] &lt;= K)<br>      sum += r - l, ++l;<br>    <span class="hljs-keyword">else</span><br>      --r;<br>  &#125;<br>  <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  ans += <span class="hljs-built_in">solve</span>(x, <span class="hljs-number">0</span>), vis[x] = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> nowsiz = totsiz;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i], z = edge[i];<br>    <span class="hljs-keyword">if</span> (vis[y]) <span class="hljs-keyword">continue</span>;<br>    ans -= <span class="hljs-built_in">solve</span>(y, z);<br>    totsiz = siz[y] &gt; siz[x] ? nowsiz - siz[x] : siz[y];<br>    mxsiz = INF, root = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">getroot</span>(y, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">divide</span>(root);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;tree.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;tree.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  N = <span class="hljs-built_in">ty</span>();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; ++i) &#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-built_in">ty</span>(), y = <span class="hljs-built_in">ty</span>(), z = <span class="hljs-built_in">ty</span>();<br>    <span class="hljs-built_in">adde</span>(x, y, z);<br>    <span class="hljs-built_in">adde</span>(y, x, z);<br>  &#125;<br>  K = <span class="hljs-built_in">ty</span>();<br>  totsiz = N, mxsiz = INF;<br>  <span class="hljs-built_in">getroot</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">divide</span>(root);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="动态点分治"><a href="#动态点分治" class="headerlink" title="动态点分治"></a>动态点分治</h1><p>好了，这才是今天的主角。</p><h2 id="点分树"><a href="#点分树" class="headerlink" title="点分树"></a>点分树</h2><p>建立点分树只需要在点分治的基础上，加一行代码<code>fa[root]=x</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  vis[x] = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> nowsiz = totsiz;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i], z = edge[i];<br>    <span class="hljs-keyword">if</span> (vis[y]) <span class="hljs-keyword">continue</span>;<br>    mxsiz = INF, root = <span class="hljs-number">0</span>;<br>    totsiz = siz[y] &gt; siz[x] ? nowsiz - siz[x] : siz[y];<br>    <span class="hljs-built_in">getroot</span>(y, <span class="hljs-number">0</span>);<br>    fa[root] = x;<br>    <span class="hljs-built_in">divide</span>(root);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现修改"><a href="#实现修改" class="headerlink" title="实现修改"></a>实现修改</h2><p>修改的时候不断暴跳点分树即可。</p><h2 id="是的，你没看错，这就是动态点分治"><a href="#是的，你没看错，这就是动态点分治" class="headerlink" title="是的，你没看错，这就是动态点分治"></a>是的，你没看错，这就是动态点分治</h2><h2 id="下面根据例题来具体解读"><a href="#下面根据例题来具体解读" class="headerlink" title="下面根据例题来具体解读"></a>下面根据例题来具体解读</h2><h2 id="ZJOI2007-捉迷藏"><a href="#ZJOI2007-捉迷藏" class="headerlink" title="[ZJOI2007]捉迷藏"></a>[ZJOI2007]捉迷藏</h2><p>求出点分树，对于每个结点$x$维护两个 <strong>可删堆</strong> 。 $dist_x$存储结点$x$代表的连通块中的所有黑点到$fa_x$的距离信息， $sub_x$表示结点$x$在点分树上的所有儿子和它自己中的黑点到$x$的距离信息，由于本题贪心的求答案方法，且两个来自于同一子树的路径不能成为一条完成的路径，我们只在这个堆中插入其自己的值和其每个子树中的最大值。我们发现，$sub_x$中最大的两个值的和就是分治时分支中心为$x$时经过结点$x$的最长黑端点路径。我们可以用全局可删堆$ans$存储所有结点的答案，这个堆中的最大值就是我们所求的答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">namespace</span> IO &#123;<br><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">int</span> <span class="hljs-title">maxn</span><span class="hljs-params">((<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">21</span>) + <span class="hljs-number">1</span>)</span></span>;<br><br><span class="hljs-type">char</span> ibuf[maxn], *iS, *iT, obuf[maxn], *oS = obuf, *oT = obuf + maxn - <span class="hljs-number">1</span>, ch,<br>                                       st[<span class="hljs-number">55</span>];<br><span class="hljs-type">int</span> opt, tp;<br><span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">Getc</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> (iS == iT ? (iT = (iS = ibuf) + <span class="hljs-built_in">fread</span>(ibuf, <span class="hljs-number">1</span>, maxn, stdin),<br>                      (iS == iT ? EOF : *iS++))<br>                   : *iS++);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Flush</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">fwrite</span>(obuf, <span class="hljs-number">1</span>, oS - obuf, stdout);<br>  oS = obuf;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Putc</span><span class="hljs-params">(<span class="hljs-type">char</span> x)</span> </span>&#123;<br>  *oS++ = x;<br>  <span class="hljs-keyword">if</span> (oS == oT) <span class="hljs-built_in">Flush</span>();<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Int</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Input</span><span class="hljs-params">(Int &amp;x)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (opt = <span class="hljs-number">1</span>, ch = <span class="hljs-built_in">Getc</span>(); ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>; ch = <span class="hljs-built_in">Getc</span>())<br>    opt = ch == <span class="hljs-string">&#x27;-&#x27;</span> ? <span class="hljs-number">-1</span> : <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (x = <span class="hljs-number">0</span>; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span> &amp;&amp; ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">Getc</span>())<br>    x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (ch ^ <span class="hljs-number">48</span>);<br>  x *= opt;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Int</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(Int x)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (!x) <span class="hljs-built_in">Putc</span>(<span class="hljs-string">&#x27;0&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">Putc</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>  <span class="hljs-keyword">while</span> (x) st[++tp] = x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>, x /= <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">while</span> (tp) <span class="hljs-built_in">Putc</span>(st[tp--]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Getstr</span><span class="hljs-params">(<span class="hljs-type">char</span> *s)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (ch = <span class="hljs-built_in">Getc</span>(); ch &lt; <span class="hljs-string">&#x27;A&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;Z&#x27;</span>; ch = <span class="hljs-built_in">Getc</span>())<br>    ;<br>  <span class="hljs-keyword">for</span> (; ch &lt;= <span class="hljs-string">&#x27;Z&#x27;</span> &amp;&amp; ch &gt;= <span class="hljs-string">&#x27;A&#x27;</span>; ch = <span class="hljs-built_in">Getc</span>()) *s++ = ch;<br>  *s = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Putstr</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, n = <span class="hljs-built_in">strlen</span>(s); i &lt; n; ++i) <span class="hljs-built_in">Putc</span>(s[i]);<br>&#125;<br>&#125;  <span class="hljs-comment">// namespace IO</span><br><span class="hljs-keyword">using</span> IO::Flush;<br><span class="hljs-keyword">using</span> IO::Getstr;<br><span class="hljs-keyword">using</span> IO::Input;<br><span class="hljs-keyword">using</span> IO::Print;<br><span class="hljs-keyword">using</span> IO::Putc;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-type">int</span> tot, head[_], to[_ &lt;&lt; <span class="hljs-number">1</span>], nxt[_ &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">adde</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  to[++tot] = y;<br>  nxt[tot] = head[x];<br>  head[x] = tot;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Heap</span> &#123;<br>  priority_queue&lt;<span class="hljs-type">int</span>&gt; data, del;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; data.<span class="hljs-built_in">push</span>(x); &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">erase</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; del.<span class="hljs-built_in">push</span>(x); &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (del.<span class="hljs-built_in">size</span>() &amp;&amp; data.<span class="hljs-built_in">top</span>() == del.<span class="hljs-built_in">top</span>()) data.<span class="hljs-built_in">pop</span>(), del.<span class="hljs-built_in">pop</span>();<br>    data.<span class="hljs-built_in">pop</span>();<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (del.<span class="hljs-built_in">size</span>() &amp;&amp; data.<span class="hljs-built_in">top</span>() == del.<span class="hljs-built_in">top</span>()) data.<span class="hljs-built_in">pop</span>(), del.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-keyword">return</span> data.<span class="hljs-built_in">top</span>();<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">top2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> t = <span class="hljs-built_in">top</span>(), ret;<br>    <span class="hljs-built_in">pop</span>();<br>    ret = <span class="hljs-built_in">top</span>();<br>    data.<span class="hljs-built_in">push</span>(t);<br>    <span class="hljs-keyword">return</span> ret;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> data.<span class="hljs-built_in">size</span>() - del.<span class="hljs-built_in">size</span>(); &#125;<br>&#125; dist[_], sub[_], ans;<br><br><span class="hljs-type">int</span> N, T;<br><span class="hljs-type">int</span> siz[_], vis[_], fa[_], dep[_], mxsiz, totsiz, root;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getroot</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f)</span> </span>&#123;<br>  siz[x] = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> maxx = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (vis[y] || y == f) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">getroot</span>(y, x);<br>    siz[x] += siz[y];<br>    maxx = <span class="hljs-built_in">max</span>(maxx, siz[y]);<br>  &#125;<br>  maxx = <span class="hljs-built_in">max</span>(maxx, totsiz - siz[x]);<br>  <span class="hljs-keyword">if</span> (maxx &lt; mxsiz) mxsiz = maxx, root = x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> fa, <span class="hljs-type">int</span> d, Heap &amp;s)</span> </span>&#123;<br>  s.<span class="hljs-built_in">insert</span>(d);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (vis[y] || y == fa) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">dfs</span>(y, x, d + <span class="hljs-number">1</span>, s);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  vis[x] = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> nowsiz = totsiz;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (vis[y]) <span class="hljs-keyword">continue</span>;<br>    mxsiz = INF, totsiz = siz[y] &gt; siz[x] ? nowsiz - siz[x] : siz[y];<br>    <span class="hljs-built_in">getroot</span>(y, <span class="hljs-number">0</span>);<br>    fa[root] = x;<br>    <span class="hljs-built_in">dfs</span>(y, x, <span class="hljs-number">1</span>, dist[root]);<br>    sub[x].<span class="hljs-built_in">insert</span>(dist[root].<span class="hljs-built_in">top</span>());<br>    dep[root] = dep[x] + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">divide</span>(root);<br>  &#125;<br>  sub[x].<span class="hljs-built_in">insert</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> (sub[x].<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">2</span>)<br>    ans.<span class="hljs-built_in">insert</span>(sub[x].<span class="hljs-built_in">top</span>() + sub[x].<span class="hljs-built_in">top2</span>());<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sub[x].<span class="hljs-built_in">size</span>())<br>    ans.<span class="hljs-built_in">insert</span>(sub[x].<span class="hljs-built_in">top</span>());<br>&#125;<br><br><span class="hljs-keyword">namespace</span> lca &#123;<br><span class="hljs-type">int</span> top[_], dep[_], ssize[_], hson[_], fa[_];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> ff)</span> </span>&#123;<br>  fa[u] = ff;<br>  ssize[u] = <span class="hljs-number">1</span>;<br>  dep[u] = dep[ff] + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[u]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> v = to[i];<br>    <span class="hljs-keyword">if</span> (v == ff) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">dfs1</span>(v, u);<br>    ssize[u] += ssize[v];<br>    <span class="hljs-keyword">if</span> (ssize[hson[u]] &lt; ssize[v]) hson[u] = v;<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> tp)</span> </span>&#123;<br>  top[u] = tp;<br>  <span class="hljs-keyword">if</span> (hson[u]) <span class="hljs-built_in">dfs2</span>(hson[u], tp);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[u]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> v = to[i];<br>    <span class="hljs-keyword">if</span> (v == fa[u] || v == hson[u]) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">dfs2</span>(v, v);<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">dfs2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>  <span class="hljs-keyword">while</span> (top[u] != top[v]) &#123;<br>    <span class="hljs-keyword">if</span> (dep[top[u]] &lt; dep[top[v]]) <span class="hljs-built_in">swap</span>(u, v);<br>    u = fa[top[u]];<br>  &#125;<br>  <span class="hljs-keyword">return</span> dep[u] &lt; dep[v] ? u : v;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dis</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span> </span>&#123; <span class="hljs-keyword">return</span> dep[u] + dep[v] - dep[<span class="hljs-built_in">query</span>(u, v)] * <span class="hljs-number">2</span>; &#125;<br>&#125;  <span class="hljs-comment">// namespace lca</span><br><br><span class="hljs-type">int</span> light[_], d[_][<span class="hljs-number">20</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">turn_off</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (sub[x].<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">2</span>) ans.<span class="hljs-built_in">erase</span>(sub[x].<span class="hljs-built_in">top</span>() + sub[x].<span class="hljs-built_in">top2</span>());<br>  sub[x].<span class="hljs-built_in">insert</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> (sub[x].<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">2</span>) ans.<span class="hljs-built_in">insert</span>(sub[x].<span class="hljs-built_in">top</span>() + sub[x].<span class="hljs-built_in">top2</span>());<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; fa[i]; i = fa[i]) &#123;<br>    <span class="hljs-keyword">if</span> (sub[fa[i]].<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">2</span>) ans.<span class="hljs-built_in">erase</span>(sub[fa[i]].<span class="hljs-built_in">top</span>() + sub[fa[i]].<span class="hljs-built_in">top2</span>());<br>    <span class="hljs-keyword">if</span> (dist[i].<span class="hljs-built_in">size</span>()) sub[fa[i]].<span class="hljs-built_in">erase</span>(dist[i].<span class="hljs-built_in">top</span>());<br>    dist[i].<span class="hljs-built_in">insert</span>(d[x][dep[x] - dep[fa[i]]]);<br>    sub[fa[i]].<span class="hljs-built_in">insert</span>(dist[i].<span class="hljs-built_in">top</span>());<br>    <span class="hljs-keyword">if</span> (sub[fa[i]].<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">2</span>)<br>      ans.<span class="hljs-built_in">insert</span>(sub[fa[i]].<span class="hljs-built_in">top</span>() + sub[fa[i]].<span class="hljs-built_in">top2</span>());<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">turn_on</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (sub[x].<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">2</span>) ans.<span class="hljs-built_in">erase</span>(sub[x].<span class="hljs-built_in">top</span>() + sub[x].<span class="hljs-built_in">top2</span>());<br>  sub[x].<span class="hljs-built_in">erase</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> (sub[x].<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">2</span>) ans.<span class="hljs-built_in">insert</span>(sub[x].<span class="hljs-built_in">top</span>() + sub[x].<span class="hljs-built_in">top2</span>());<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; fa[i]; i = fa[i]) &#123;<br>    <span class="hljs-keyword">if</span> (sub[fa[i]].<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">2</span>) ans.<span class="hljs-built_in">erase</span>(sub[fa[i]].<span class="hljs-built_in">top</span>() + sub[fa[i]].<span class="hljs-built_in">top2</span>());<br>    sub[fa[i]].<span class="hljs-built_in">erase</span>(dist[i].<span class="hljs-built_in">top</span>());<br>    dist[i].<span class="hljs-built_in">erase</span>(d[x][dep[x] - dep[fa[i]]]);<br>    <span class="hljs-keyword">if</span> (dist[i].<span class="hljs-built_in">size</span>()) sub[fa[i]].<span class="hljs-built_in">insert</span>(dist[i].<span class="hljs-built_in">top</span>());<br>    <span class="hljs-keyword">if</span> (sub[fa[i]].<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">2</span>)<br>      ans.<span class="hljs-built_in">insert</span>(sub[fa[i]].<span class="hljs-built_in">top</span>() + sub[fa[i]].<span class="hljs-built_in">top2</span>());<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;hide.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;hide.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-built_in">Input</span>(N);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; ++i) &#123;<br>    <span class="hljs-type">int</span> x, y;<br>    <span class="hljs-built_in">Input</span>(x), <span class="hljs-built_in">Input</span>(y);<br>    <span class="hljs-built_in">adde</span>(x, y);<br>    <span class="hljs-built_in">adde</span>(y, x);<br>  &#125;<br>  lca::<span class="hljs-built_in">init</span>();<br><br>  mxsiz = INF, totsiz = N;<br>  <span class="hljs-built_in">getroot</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">divide</span>(root);<br>  <span class="hljs-comment">// for (int i = 1; i &lt;= N; ++i) printf(&quot;%d %d\n&quot;, i, fa[i]);</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j; j = fa[j]) d[i][dep[i] - dep[j]] = lca::<span class="hljs-built_in">dis</span>(i, j);<br><br>  <span class="hljs-built_in">Input</span>(T);<br>  <span class="hljs-keyword">while</span> (T--) &#123;<br>    <span class="hljs-type">char</span> op[<span class="hljs-number">3</span>];<br>    <span class="hljs-built_in">Getstr</span>(op);<br>    <span class="hljs-keyword">if</span> (op[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;G&#x27;</span>) &#123;<br>      <span class="hljs-keyword">if</span> (ans.<span class="hljs-built_in">size</span>())<br>        <span class="hljs-built_in">Print</span>(ans.<span class="hljs-built_in">top</span>()), <span class="hljs-built_in">Putc</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>      <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">Print</span>(<span class="hljs-number">-1</span>), <span class="hljs-built_in">Putc</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-type">int</span> x;<br>      <span class="hljs-built_in">Input</span>(x);<br>      <span class="hljs-keyword">if</span> (light[x])<br>        <span class="hljs-built_in">turn_off</span>(x);<br>      <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">turn_on</span>(x);<br>      light[x] ^= <span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Flush</span>(), <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="BZOJ3730-震波"><a href="#BZOJ3730-震波" class="headerlink" title="BZOJ3730 震波"></a>BZOJ3730 震波</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给你一棵树，每个节点有点权，你需要执行以下两种操作：</p><ol><li>查询与点$x$距离不超过$k$的所有点的点权和</li><li>将点$x$的点权修改为$y$</li></ol><p>强制在线。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>还是仿照上一题的思路，将点分树建出来，然后对于每个节点，建立两个树状数组$dist_x,sub_x$，下标为距离，权值为点权和。其中，$dist_x$表示$x$的联通块内，所有点到$x$的距离信息；$sub_x$表示$x$的联通块内，所有点到$x$在点分树上的父亲的距离信息。</p><p>对于查询，不断暴跳父亲，然后容斥一下即可。</p><p>对于修改，同样也是不断暴跳父亲，然后维护$dist_x,sub_x$。</p><p>需要注意的是在向上跳暴力修改的过程中，要判断节点$x$到当前节点的距离是否已经大于$y-len$，且不合法时不是<code>break</code>而应该是<code>continue</code>，就这个我一开始用线段树写没判居然能过，改成树状数组后调了我好久。。。<br><strong>PS：</strong>不过这次调试过程中，我发现了又一法宝：<code>assert</code>，用这东西两下子就找出来了哪里出问题了！</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p><strong>动态开点线段树（TLE）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">bool</span> xxxxx;<br><br><span class="hljs-keyword">namespace</span> IO &#123;<br><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">int</span> <span class="hljs-title">maxn</span><span class="hljs-params">((<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">21</span>) + <span class="hljs-number">1</span>)</span></span>;<br><span class="hljs-type">char</span> ibuf[maxn], *iS, *iT, obuf[maxn], *oS = obuf, *oT = obuf + maxn - <span class="hljs-number">1</span>, ch,<br>                                       st[<span class="hljs-number">55</span>];<br><span class="hljs-type">int</span> opt, tp;<br><span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">Getc</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> (iS == iT ? (iT = (iS = ibuf) + <span class="hljs-built_in">fread</span>(ibuf, <span class="hljs-number">1</span>, maxn, stdin),<br>                      (iS == iT ? EOF : *iS++))<br>                   : *iS++);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Flush</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">fwrite</span>(obuf, <span class="hljs-number">1</span>, oS - obuf, stdout);<br>  oS = obuf;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Putc</span><span class="hljs-params">(<span class="hljs-type">char</span> x)</span> </span>&#123;<br>  *oS++ = x;<br>  <span class="hljs-keyword">if</span> (oS == oT) <span class="hljs-built_in">Flush</span>();<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Int</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Input</span><span class="hljs-params">(Int &amp;x)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (opt = <span class="hljs-number">1</span>, ch = <span class="hljs-built_in">Getc</span>(); ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>; ch = <span class="hljs-built_in">Getc</span>())<br>    opt = ch == <span class="hljs-string">&#x27;-&#x27;</span> ? <span class="hljs-number">-1</span> : <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (x = <span class="hljs-number">0</span>; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span> &amp;&amp; ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">Getc</span>())<br>    x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (ch ^ <span class="hljs-number">48</span>);<br>  x *= opt;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Int</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(Int x)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (!x) <span class="hljs-built_in">Putc</span>(<span class="hljs-string">&#x27;0&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">Putc</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>  <span class="hljs-keyword">while</span> (x) st[++tp] = x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>, x /= <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">while</span> (tp) <span class="hljs-built_in">Putc</span>(st[tp--]);<br>&#125;<br>&#125;  <span class="hljs-comment">// namespace IO</span><br><span class="hljs-keyword">using</span> IO::Flush;<br><span class="hljs-keyword">using</span> IO::Input;<br><span class="hljs-keyword">using</span> IO::Print;<br><span class="hljs-keyword">using</span> IO::Putc;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> __ = <span class="hljs-number">5e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-type">int</span> tot, head[_], to[_ &lt;&lt; <span class="hljs-number">1</span>], nxt[_ &lt;&lt; <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">adde</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  to[++tot] = y;<br>  nxt[tot] = head[x];<br>  head[x] = tot;<br>&#125;<br><br><span class="hljs-type">int</span> N, M, val[_];<br><br><span class="hljs-keyword">namespace</span> lca &#123;<br><span class="hljs-type">int</span> fa[_], son[_], dep[_], siz[_], top[_];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f)</span> </span>&#123;<br>  siz[x] = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> maxx = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (y == f) <span class="hljs-keyword">continue</span>;<br>    fa[y] = x, dep[y] = dep[x] + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">dfs1</span>(y, x);<br>    siz[x] += siz[y];<br>    <span class="hljs-keyword">if</span> (siz[y] &gt; maxx) maxx = siz[y], son[x] = y;<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> topf)</span> </span>&#123;<br>  top[x] = topf;<br>  <span class="hljs-keyword">if</span> (!son[x]) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-built_in">dfs2</span>(son[x], topf);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (y == fa[x] || y == son[x]) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">dfs2</span>(y, y);<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">dfs2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  <span class="hljs-keyword">while</span> (top[x] != top[y]) &#123;<br>    <span class="hljs-keyword">if</span> (dep[top[x]] &lt; dep[top[y]]) <span class="hljs-built_in">swap</span>(x, y);<br>    x = fa[top[x]];<br>  &#125;<br>  <span class="hljs-keyword">return</span> dep[x] &lt; dep[y] ? x : y;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dis</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123; <span class="hljs-keyword">return</span> dep[x] + dep[y] - <span class="hljs-number">2</span> * dep[<span class="hljs-built_in">query</span>(x, y)]; &#125;<br>&#125;  <span class="hljs-comment">// namespace lca</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SegmentTree</span> &#123;<br>  <span class="hljs-type">int</span> cnt, rt[_], ls[__], rs[__], sum[__];<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!p) p = ++cnt;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>      sum[p] += v;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid)<br>      <span class="hljs-built_in">modify</span>(ls[p], l, mid, x, v);<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">modify</span>(rs[p], mid + <span class="hljs-number">1</span>, r, x, v);<br>    sum[p] = sum[ls[p]] + sum[rs[p]];<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!p) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= l &amp;&amp; r &lt;= y) <span class="hljs-keyword">return</span> sum[p];<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (y &lt;= mid)<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(ls[p], l, mid, x, y);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &gt; mid)<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(rs[p], mid + <span class="hljs-number">1</span>, r, x, y);<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(ls[p], l, mid, x, mid) +<br>             <span class="hljs-built_in">query</span>(rs[p], mid + <span class="hljs-number">1</span>, r, mid + <span class="hljs-number">1</span>, y);<br>  &#125;<br>&#125; dist, sub;<br><br><span class="hljs-type">int</span> mxsiz, totsiz, root;<br><span class="hljs-type">int</span> vis[_], siz[_], fa[_], dep[_];  <span class="hljs-comment">//, d[_][20];</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getroot</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f)</span> </span>&#123;<br>  siz[x] = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> maxx = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (vis[y] || y == f) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">getroot</span>(y, x);<br>    siz[x] += siz[y];<br>    maxx = <span class="hljs-built_in">max</span>(maxx, siz[y]);<br>  &#125;<br>  maxx = <span class="hljs-built_in">max</span>(maxx, totsiz - siz[x]);<br>  <span class="hljs-keyword">if</span> (maxx &lt; mxsiz) mxsiz = maxx, root = x;<br>&#125;<br><br><span class="hljs-comment">// 将距离信息插入到线段树dist中</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfsdist</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> d, <span class="hljs-type">const</span> <span class="hljs-type">int</span> s)</span> </span>&#123;<br>  dist.<span class="hljs-built_in">modify</span>(dist.rt[s], <span class="hljs-number">0</span>, N, d, val[x]);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (vis[y] || y == f) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">dfsdist</span>(y, x, d + <span class="hljs-number">1</span>, s);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 将距离信息插入到线段树sub中</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfssub</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> d, <span class="hljs-type">const</span> <span class="hljs-type">int</span> s)</span> </span>&#123;<br>  <span class="hljs-comment">// printf(&quot;%d %d %d %d\n&quot;, x, d, val[x], s);</span><br>  sub.<span class="hljs-built_in">modify</span>(sub.rt[s], <span class="hljs-number">0</span>, N, d, val[x]);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (vis[y] || y == f) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">dfssub</span>(y, x, d + <span class="hljs-number">1</span>, s);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 建立点分树</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  vis[x] = <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">dfsdist</span>(x, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, x);<br>  <span class="hljs-type">int</span> nowsiz = totsiz;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (vis[y]) <span class="hljs-keyword">continue</span>;<br>    mxsiz = INF, root = <span class="hljs-number">0</span>;<br>    totsiz = siz[y] &gt; siz[x] ? nowsiz - siz[x] : siz[y];<br>    <span class="hljs-built_in">getroot</span>(y, <span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// printf(&quot;%d %d\n&quot;, y, root);</span><br>    <span class="hljs-built_in">dfssub</span>(y, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, root);<br>    fa[root] = x, dep[root] = dep[x] + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">divide</span>(root);<br>  &#125;<br>&#125;<br><br><span class="hljs-type">bool</span> yyyyy;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;earthquake.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;std.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-built_in">Input</span>(N), <span class="hljs-built_in">Input</span>(M);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) <span class="hljs-built_in">Input</span>(val[i]);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; ++i) &#123;<br>    <span class="hljs-type">int</span> x, y;<br>    <span class="hljs-built_in">Input</span>(x), <span class="hljs-built_in">Input</span>(y);<br>    <span class="hljs-built_in">adde</span>(x, y);<br>    <span class="hljs-built_in">adde</span>(y, x);<br>  &#125;<br>  lca::<span class="hljs-built_in">init</span>();<br><br>  mxsiz = INF, totsiz = N, root = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">getroot</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">divide</span>(root);<br>  <span class="hljs-comment">// for (int i = 1; i &lt;= N; i++)</span><br>  <span class="hljs-comment">//   for (int j = i; j; j = fa[j]) d[i][dep[i] - dep[j]] = lca::dis(i, j);</span><br><br>  <span class="hljs-type">int</span> last = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (M--) &#123;<br>    <span class="hljs-type">int</span> op, x, y;<br>    <span class="hljs-built_in">Input</span>(op), <span class="hljs-built_in">Input</span>(x), <span class="hljs-built_in">Input</span>(y);<br>    x ^= last, y ^= last;<br>    cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; endl;<br>    <span class="hljs-keyword">if</span> (op == <span class="hljs-number">0</span>) &#123;<br>      last = dist.<span class="hljs-built_in">query</span>(dist.rt[x], <span class="hljs-number">0</span>, N, <span class="hljs-number">0</span>, y);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; fa[i]; i = fa[i]) &#123;<br>        <span class="hljs-type">int</span> len = lca::<span class="hljs-built_in">dis</span>(x, fa[i]);<br>        <span class="hljs-comment">// int len = d[x][dep[x] - dep[fa[i]]];</span><br>        <span class="hljs-built_in">assert</span>(y - len &gt;= <span class="hljs-number">0</span>);<br>        last += dist.<span class="hljs-built_in">query</span>(dist.rt[fa[i]], <span class="hljs-number">0</span>, N, <span class="hljs-number">0</span>, y - len);<br>        last -= sub.<span class="hljs-built_in">query</span>(sub.rt[i], <span class="hljs-number">0</span>, N, <span class="hljs-number">0</span>, y - len);<br>      &#125;<br>      cout &lt;&lt; last &lt;&lt; endl;<br>      <span class="hljs-comment">// Print(last), Putc(&#x27;\n&#x27;);</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123;<br>      dist.<span class="hljs-built_in">modify</span>(dist.rt[x], <span class="hljs-number">0</span>, N, <span class="hljs-number">0</span>, y - val[x]);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; fa[i]; i = fa[i]) &#123;<br>        <span class="hljs-type">int</span> len = lca::<span class="hljs-built_in">dis</span>(x, fa[i]);<br>        <span class="hljs-comment">// int len = d[x][dep[x] - dep[fa[i]]];</span><br>        dist.<span class="hljs-built_in">modify</span>(dist.rt[fa[i]], <span class="hljs-number">0</span>, N, len, y - val[x]);<br>        sub.<span class="hljs-built_in">modify</span>(sub.rt[i], <span class="hljs-number">0</span>, N, len, y - val[x]);<br>      &#125;<br>      val[x] = y;<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// cerr &lt;&lt; (&amp;yyyyy - &amp;xxxxx) / 1048576.0 &lt;&lt; &quot;MB&quot; &lt;&lt; endl;</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Flush</span>(), <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>树状数组（7784 ms）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">namespace</span> IO &#123;<br><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">int</span> <span class="hljs-title">maxn</span><span class="hljs-params">((<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">21</span>) + <span class="hljs-number">1</span>)</span></span>;<br><span class="hljs-type">char</span> ibuf[maxn], *iS, *iT, obuf[maxn], *oS = obuf, *oT = obuf + maxn - <span class="hljs-number">1</span>, ch,<br>                                       st[<span class="hljs-number">55</span>];<br><span class="hljs-type">int</span> opt, tp;<br><span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">Getc</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> (iS == iT ? (iT = (iS = ibuf) + <span class="hljs-built_in">fread</span>(ibuf, <span class="hljs-number">1</span>, maxn, stdin),<br>                      (iS == iT ? EOF : *iS++))<br>                   : *iS++);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Flush</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">fwrite</span>(obuf, <span class="hljs-number">1</span>, oS - obuf, stdout);<br>  oS = obuf;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Putc</span><span class="hljs-params">(<span class="hljs-type">char</span> x)</span> </span>&#123;<br>  *oS++ = x;<br>  <span class="hljs-keyword">if</span> (oS == oT) <span class="hljs-built_in">Flush</span>();<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Int</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Input</span><span class="hljs-params">(Int &amp;x)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (opt = <span class="hljs-number">1</span>, ch = <span class="hljs-built_in">Getc</span>(); ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>; ch = <span class="hljs-built_in">Getc</span>())<br>    opt = ch == <span class="hljs-string">&#x27;-&#x27;</span> ? <span class="hljs-number">-1</span> : <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (x = <span class="hljs-number">0</span>; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span> &amp;&amp; ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">Getc</span>())<br>    x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (ch ^ <span class="hljs-number">48</span>);<br>  x *= opt;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Int</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(Int x)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (!x) <span class="hljs-built_in">Putc</span>(<span class="hljs-string">&#x27;0&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">Putc</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>  <span class="hljs-keyword">while</span> (x) st[++tp] = x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>, x /= <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">while</span> (tp) <span class="hljs-built_in">Putc</span>(st[tp--]);<br>&#125;<br>&#125;  <span class="hljs-comment">// namespace IO</span><br><span class="hljs-keyword">using</span> IO::Flush;<br><span class="hljs-keyword">using</span> IO::Input;<br><span class="hljs-keyword">using</span> IO::Print;<br><span class="hljs-keyword">using</span> IO::Putc;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> __ = <span class="hljs-number">5e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-type">int</span> tot, head[_], to[_ &lt;&lt; <span class="hljs-number">1</span>], nxt[_ &lt;&lt; <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">adde</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  to[++tot] = y;<br>  nxt[tot] = head[x];<br>  head[x] = tot;<br>&#125;<br><br><span class="hljs-type">int</span> N, M, val[_];<br><br><span class="hljs-keyword">namespace</span> lca &#123;<br><span class="hljs-type">int</span> fa[_], son[_], dep[_], siz[_], top[_];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f)</span> </span>&#123;<br>  siz[x] = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> maxx = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (y == f) <span class="hljs-keyword">continue</span>;<br>    fa[y] = x, dep[y] = dep[x] + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">dfs1</span>(y, x);<br>    siz[x] += siz[y];<br>    <span class="hljs-keyword">if</span> (siz[y] &gt; maxx) maxx = siz[y], son[x] = y;<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> topf)</span> </span>&#123;<br>  top[x] = topf;<br>  <span class="hljs-keyword">if</span> (!son[x]) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-built_in">dfs2</span>(son[x], topf);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (y == fa[x] || y == son[x]) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">dfs2</span>(y, y);<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">dfs2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  <span class="hljs-keyword">while</span> (top[x] != top[y]) &#123;<br>    <span class="hljs-keyword">if</span> (dep[top[x]] &lt; dep[top[y]]) <span class="hljs-built_in">swap</span>(x, y);<br>    x = fa[top[x]];<br>  &#125;<br>  <span class="hljs-keyword">return</span> dep[x] &lt; dep[y] ? x : y;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dis</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123; <span class="hljs-keyword">return</span> dep[x] + dep[y] - <span class="hljs-number">2</span> * dep[<span class="hljs-built_in">query</span>(x, y)]; &#125;<br>&#125;  <span class="hljs-comment">// namespace lca</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">BIT</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> lowbit(x) (x &amp; -x)</span><br>  vector&lt;<span class="hljs-type">int</span>&gt; c;<br>  <span class="hljs-type">int</span> lim;<br>  <span class="hljs-built_in">BIT</span>() &#123;<br>    lim = <span class="hljs-number">0</span>;<br>    c.<span class="hljs-built_in">clear</span>();<br>    c.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    ++x;<br>    <span class="hljs-keyword">for</span> (; x &lt;= lim; x += <span class="hljs-built_in">lowbit</span>(x)) c[x] += y;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    ++x;<br>    x = <span class="hljs-built_in">min</span>(x, lim);<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (; x; x -= <span class="hljs-built_in">lowbit</span>(x)) ret += c[x];<br>    <span class="hljs-keyword">return</span> ret;<br>  &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> lowbit</span><br>&#125; dist[_], sub[_];<br><br><span class="hljs-type">int</span> mxsiz, totsiz, root;<br><span class="hljs-type">int</span> vis[_], siz[_], fa[_], dep[_];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getroot</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f)</span> </span>&#123;<br>  siz[x] = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> maxx = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (vis[y] || y == f) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">getroot</span>(y, x);<br>    siz[x] += siz[y];<br>    maxx = <span class="hljs-built_in">max</span>(maxx, siz[y]);<br>  &#125;<br>  maxx = <span class="hljs-built_in">max</span>(maxx, totsiz - siz[x]);<br>  <span class="hljs-keyword">if</span> (maxx &lt; mxsiz) mxsiz = maxx, root = x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfsdist</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> d, <span class="hljs-type">const</span> <span class="hljs-type">int</span> s)</span> </span>&#123;<br>  dist[s].<span class="hljs-built_in">insert</span>(d, val[x]);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (vis[y] || y == f) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">dfsdist</span>(y, x, d + <span class="hljs-number">1</span>, s);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfssub</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> d, <span class="hljs-type">const</span> <span class="hljs-type">int</span> s)</span> </span>&#123;<br>  sub[s].<span class="hljs-built_in">insert</span>(d, val[x]);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (vis[y] || y == f) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">dfssub</span>(y, x, d + <span class="hljs-number">1</span>, s);<br>  &#125;<br>&#125;<br><br><span class="hljs-type">int</span> mxdep;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfsmxdep</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> d)</span> </span>&#123;<br>  mxdep = <span class="hljs-built_in">max</span>(mxdep, d);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (vis[y] || y == f) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">dfsmxdep</span>(y, x, d + <span class="hljs-number">1</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  vis[x] = <span class="hljs-number">1</span>;<br>  mxdep = <span class="hljs-number">0</span>, <span class="hljs-built_in">dfsmxdep</span>(x, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  dist[x].lim = mxdep + <span class="hljs-number">1</span>;<br>  dist[x].c.<span class="hljs-built_in">resize</span>(mxdep + <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">dfsdist</span>(x, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, x);<br>  <span class="hljs-type">int</span> nowsiz = totsiz;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (vis[y]) <span class="hljs-keyword">continue</span>;<br>    mxsiz = INF, root = <span class="hljs-number">0</span>;<br>    totsiz = siz[y] &gt; siz[x] ? nowsiz - siz[x] : siz[y];<br>    <span class="hljs-built_in">getroot</span>(y, <span class="hljs-number">0</span>);<br>    mxdep = <span class="hljs-number">0</span>, <span class="hljs-built_in">dfsmxdep</span>(y, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>    sub[root].lim = mxdep + <span class="hljs-number">1</span>;<br>    sub[root].c.<span class="hljs-built_in">resize</span>(mxdep + <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">dfssub</span>(y, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, root);<br>    fa[root] = x, dep[root] = dep[x] + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">divide</span>(root);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;earthquake.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;earthquake.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-built_in">Input</span>(N), <span class="hljs-built_in">Input</span>(M);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) <span class="hljs-built_in">Input</span>(val[i]);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; ++i) &#123;<br>    <span class="hljs-type">int</span> x, y;<br>    <span class="hljs-built_in">Input</span>(x), <span class="hljs-built_in">Input</span>(y);<br>    <span class="hljs-built_in">adde</span>(x, y);<br>    <span class="hljs-built_in">adde</span>(y, x);<br>  &#125;<br>  lca::<span class="hljs-built_in">init</span>();<br><br>  mxsiz = INF, totsiz = N, root = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">getroot</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">divide</span>(root);<br><br>  <span class="hljs-type">int</span> last = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (M--) &#123;<br>    <span class="hljs-type">int</span> op, x, y;<br>    <span class="hljs-built_in">Input</span>(op), <span class="hljs-built_in">Input</span>(x), <span class="hljs-built_in">Input</span>(y);<br>    x ^= last, y ^= last;<br>    <span class="hljs-keyword">if</span> (op == <span class="hljs-number">0</span>) &#123;<br>      last = dist[x].<span class="hljs-built_in">query</span>(y);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; fa[i]; i = fa[i]) &#123;<br>        <span class="hljs-type">int</span> len = lca::<span class="hljs-built_in">dis</span>(x, fa[i]);<br>        <span class="hljs-keyword">if</span> (y - len &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>        last += dist[fa[i]].<span class="hljs-built_in">query</span>(y - len);<br>        last -= sub[i].<span class="hljs-built_in">query</span>(y - len);<br>      &#125;<br>      <span class="hljs-built_in">Print</span>(last), <span class="hljs-built_in">Putc</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123;<br>      dist[x].<span class="hljs-built_in">insert</span>(<span class="hljs-number">0</span>, y - val[x]);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; fa[i]; i = fa[i]) &#123;<br>        <span class="hljs-type">int</span> len = lca::<span class="hljs-built_in">dis</span>(x, fa[i]);<br>        dist[fa[i]].<span class="hljs-built_in">insert</span>(len, y - val[x]);<br>        sub[i].<span class="hljs-built_in">insert</span>(len, y - val[x]);<br>      &#125;<br>      val[x] = y;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Flush</span>(), <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ZJOI2015-幻想乡战略游戏"><a href="#ZJOI2015-幻想乡战略游戏" class="headerlink" title="[ZJOI2015]幻想乡战略游戏"></a>[ZJOI2015]幻想乡战略游戏</h2><p>这个题有单独的题解 <a href="https://kkkstra.cn/2020/01/01/ZJOI2015-%E5%B9%BB%E6%83%B3%E4%B9%A1%E6%88%98%E7%95%A5%E6%B8%B8%E6%88%8F-%E5%8A%A8%E6%80%81%E7%82%B9%E5%88%86%E6%B2%BB/">链接</a></p><h2 id="BZOJ4372-烁烁的游戏"><a href="#BZOJ4372-烁烁的游戏" class="headerlink" title="BZOJ4372 烁烁的游戏"></a>BZOJ4372 烁烁的游戏</h2><p>这题仿照<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3730">震波</a>的做法：</p><p>还是动态点分治的套路，对于每个点开两棵动态开点的线段树或是树状数组，以距离为下标，分别存储到点$x$距离为$y$的增量，以及到点$fa[x]$距离为$y$的增量（用于容斥）。</p><p>查询和修改不断在点分树上暴跳父亲即可。</p><p>最后，由于上次<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3730">震波</a>的惨痛教训，我决定写树状数组：</p><p><img src="https://i.loli.net/2020/01/01/bP3o7jVLdTexnsN.png" alt="2020-01-01 18-39-45屏幕截图.png"></p><p>树状数组跑的飞快，开心！</p><p><img src="https://i.loli.net/2020/01/01/PuB34yD69jhgSnz.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-type">bool</span> xxx;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ty</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>  <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>;<br>    ch = <span class="hljs-built_in">getchar</span>();<br>  &#125;<br>  <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>    x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    ch = <span class="hljs-built_in">getchar</span>();<br>  &#125;<br>  <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> __ = <span class="hljs-number">1e7</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">int</span> N, M, tot, head[_], to[_ &lt;&lt; <span class="hljs-number">1</span>], nxt[_ &lt;&lt; <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">adde</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  to[++tot] = y;<br>  nxt[tot] = head[x];<br>  head[x] = tot;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> lca &#123;<br><span class="hljs-type">int</span> fa[_], son[_], dep[_], siz[_], top[_];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f)</span> </span>&#123;<br>  siz[x] = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> maxx = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (y == f) <span class="hljs-keyword">continue</span>;<br>    fa[y] = x, dep[y] = dep[x] + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">dfs1</span>(y, x);<br>    siz[x] += siz[y];<br>    <span class="hljs-keyword">if</span> (siz[y] &gt; maxx) maxx = siz[y], son[x] = y;<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> topf)</span> </span>&#123;<br>  top[x] = topf;<br>  <span class="hljs-keyword">if</span> (!son[x]) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-built_in">dfs2</span>(son[x], topf);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (y == fa[x] || y == son[x]) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">dfs2</span>(y, y);<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>  dep[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>, <span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">dfs2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  <span class="hljs-keyword">while</span> (top[x] != top[y]) &#123;<br>    <span class="hljs-keyword">if</span> (dep[top[x]] &lt; dep[top[y]]) <span class="hljs-built_in">swap</span>(x, y);<br>    x = fa[top[x]];<br>  &#125;<br>  <span class="hljs-keyword">return</span> dep[x] &lt; dep[y] ? x : y;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dis</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123; <span class="hljs-keyword">return</span> dep[x] + dep[y] - <span class="hljs-number">2</span> * dep[<span class="hljs-built_in">query</span>(x, y)]; &#125;<br>&#125;  <span class="hljs-comment">// namespace lca</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">BIT</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> lowbit(x) (x &amp; -x)</span><br>  vector&lt;<span class="hljs-type">int</span>&gt; tr;<br>  <span class="hljs-type">int</span> lim;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    ++x;<br>    <span class="hljs-comment">// assert(x&lt;=lim);</span><br>    x = <span class="hljs-built_in">min</span>(x, lim);<br>    <span class="hljs-keyword">for</span> (; x &lt;= lim; x += <span class="hljs-built_in">lowbit</span>(x)) tr[x] += y;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    ++x;<br>    x = <span class="hljs-built_in">min</span>(x, lim);<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (; x; x -= <span class="hljs-built_in">lowbit</span>(x)) ret += tr[x];<br>    <span class="hljs-keyword">return</span> ret;<br>  &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> lowbit</span><br>&#125; dist[_], sub[_];<br><br><span class="hljs-type">int</span> mxsiz, totsiz, root, vis[_], fa[_], siz[_];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getroot</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f)</span> </span>&#123;<br>  siz[x] = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> maxx = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (vis[y] || y == f) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">getroot</span>(y, x);<br>    siz[x] += siz[y];<br>    maxx = <span class="hljs-built_in">max</span>(maxx, siz[y]);<br>  &#125;<br>  maxx = <span class="hljs-built_in">max</span>(maxx, totsiz - siz[x]);<br>  <span class="hljs-keyword">if</span> (maxx &lt; mxsiz) mxsiz = maxx, root = x;<br>&#125;<br><br><span class="hljs-type">int</span> mxdep;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> d)</span> </span>&#123;<br>  mxdep = <span class="hljs-built_in">max</span>(mxdep, d);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (vis[y] || y == f) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">dfs</span>(y, x, d + <span class="hljs-number">1</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  vis[x] = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> nowsiz = totsiz;<br>  mxdep = <span class="hljs-number">0</span>, <span class="hljs-built_in">dfs</span>(x, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  dist[x].lim = mxdep + <span class="hljs-number">1</span>;<br>  <span class="hljs-comment">// printf(&quot;%d %d %d\n&quot;, x, mxdep, dist[x].lim);</span><br>  dist[x].tr.<span class="hljs-built_in">resize</span>(mxdep + <span class="hljs-number">3</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (vis[y]) <span class="hljs-keyword">continue</span>;<br>    mxsiz = INF, root = <span class="hljs-number">0</span>;<br>    totsiz = siz[y] &gt; siz[x] ? nowsiz - siz[x] : siz[y];<br>    <span class="hljs-built_in">getroot</span>(y, <span class="hljs-number">0</span>);<br>    mxdep = <span class="hljs-number">0</span>, <span class="hljs-built_in">dfs</span>(y, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>    sub[root].lim = mxdep + <span class="hljs-number">1</span>;<br>    sub[root].tr.<span class="hljs-built_in">resize</span>(mxdep + <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>    fa[root] = x;<br>    <span class="hljs-built_in">divide</span>(root);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-type">int</span> ret = dist[x].<span class="hljs-built_in">query</span>(dist[x].lim);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; fa[i]; i = fa[i]) &#123;<br>    <span class="hljs-type">int</span> len = lca::<span class="hljs-built_in">dis</span>(x, fa[i]);<br>    ret += dist[fa[i]].<span class="hljs-built_in">query</span>(dist[fa[i]].lim) - dist[fa[i]].<span class="hljs-built_in">query</span>(len - <span class="hljs-number">1</span>);<br>    ret -= sub[i].<span class="hljs-built_in">query</span>(sub[i].lim) - sub[i].<span class="hljs-built_in">query</span>(len - <span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> d, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>  dist[x].<span class="hljs-built_in">insert</span>(d, v);<br>  <span class="hljs-comment">// assert(d &lt;= dist[x].lim);</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; fa[i]; i = fa[i]) &#123;<br>    <span class="hljs-type">int</span> len = lca::<span class="hljs-built_in">dis</span>(x, fa[i]);<br>    <span class="hljs-keyword">if</span> (d &lt; len) <span class="hljs-keyword">continue</span>;<br>    dist[fa[i]].<span class="hljs-built_in">insert</span>(d - len, v);<br>    <span class="hljs-comment">// assert(d - len &lt;= dist[fa[i]].lim);</span><br>    sub[i].<span class="hljs-built_in">insert</span>(d - len, v);<br>    <span class="hljs-comment">// assert(d - len &lt;= sub[i].lim);</span><br>  &#125;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-type">bool</span> yyy;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;game.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;game.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  N = <span class="hljs-built_in">ty</span>(), M = <span class="hljs-built_in">ty</span>();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; ++i) &#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-built_in">ty</span>(), y = <span class="hljs-built_in">ty</span>();<br>    <span class="hljs-built_in">adde</span>(x, y);<br>    <span class="hljs-built_in">adde</span>(y, x);<br>  &#125;<br>  lca::<span class="hljs-built_in">init</span>();<br><br>  mxsiz = INF, totsiz = N, root = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">getroot</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">divide</span>(<span class="hljs-number">1</span>);<br><br>  <span class="hljs-keyword">while</span> (M--) &#123;<br>    <span class="hljs-type">char</span> op[<span class="hljs-number">5</span>];<br>    <span class="hljs-type">int</span> x, y, z;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, op), x = <span class="hljs-built_in">ty</span>();<br>    <span class="hljs-keyword">if</span> (op[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;Q&#x27;</span>)<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">query</span>(x));<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;M&#x27;</span>) &#123;<br>      y = <span class="hljs-built_in">ty</span>(), z = <span class="hljs-built_in">ty</span>();<br>      <span class="hljs-built_in">modify</span>(x, y, z);<br>    &#125;<br>  &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  cerr &lt;&lt; (&amp;yyy - &amp;xxx) / <span class="hljs-number">1048576.0</span> &lt;&lt; <span class="hljs-string">&quot;MB&quot;</span> &lt;&lt; endl;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="WC2014-紫荆花之恋"><a href="#WC2014-紫荆花之恋" class="headerlink" title="[WC2014]紫荆花之恋"></a>[WC2014]紫荆花之恋</h2><p>事实上，我学动态点分治就是为了写这道题，<a href="https://kkkstra.cn/2020/01/01/WC2014-%E7%B4%AB%E8%8D%86%E8%8A%B1%E4%B9%8B%E6%81%8B-%E5%8A%A8%E6%80%81%E7%82%B9%E5%88%86%E6%B2%BB-%E5%B9%B3%E8%A1%A1%E6%A0%91/#more">链接</a>。</p>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态点分治</tag>
      
      <tag>点分治</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Splay详解</title>
    <link href="/2019/12/28/Splay%E8%AF%A6%E8%A7%A3/"/>
    <url>/2019/12/28/Splay%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>因为博主太懒，所以这篇博客咕了。</p><h1 id="【模板】普通平衡树（Splay）"><a href="#【模板】普通平衡树（Splay）" class="headerlink" title="【模板】普通平衡树（Splay）"></a><a href="https://www.luogu.com.cn/problem/P3369">【模板】普通平衡树（Splay）</a></h1><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br><span class="hljs-type">int</span> fa, ch[<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> val, cnt, siz;<br>&#125; tr[_];<br><span class="hljs-type">int</span> root, tot = <span class="hljs-number">0</span>, N;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">alloc</span><span class="hljs-params">(<span class="hljs-type">int</span> val, <span class="hljs-type">int</span> fa)</span> </span>&#123;<br>tr[++tot].fa = fa;<br>tr[tot].val = val;<br>tr[tot].siz = tr[tot].cnt = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> tot;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>tr[x].siz = tr[tr[x].ch[<span class="hljs-number">0</span>]].siz + tr[tr[x].ch[<span class="hljs-number">1</span>]].siz + tr[x].cnt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ident</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> tr[tr[x].fa].ch[<span class="hljs-number">1</span>] == x; &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">connect</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> fa, <span class="hljs-type">int</span> how)</span> </span>&#123;<br>tr[x].fa = fa;<br>tr[fa].ch[how] = x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-type">int</span> y = tr[x].fa, z = tr[y].fa;<br><span class="hljs-keyword">if</span> (y == root) root = x;<br><span class="hljs-type">int</span> yson = <span class="hljs-built_in">ident</span>(x), zson = <span class="hljs-built_in">ident</span>(y);<br><span class="hljs-type">int</span> k = tr[x].ch[yson ^ <span class="hljs-number">1</span>];<br><span class="hljs-built_in">connect</span>(k, y, yson);<br><span class="hljs-built_in">connect</span>(y, x, yson ^ <span class="hljs-number">1</span>);<br><span class="hljs-built_in">connect</span>(x, z, zson);<br><span class="hljs-built_in">update</span>(y), <span class="hljs-built_in">update</span>(x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">splay</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> to)</span> </span>&#123;<br><span class="hljs-keyword">while</span> (tr[x].fa != to) &#123;<br><span class="hljs-type">int</span> y = tr[x].fa, z = tr[y].fa;<br><span class="hljs-keyword">if</span> (tr[y].fa != to)<br>(tr[z].ch[<span class="hljs-number">0</span>] == y) ^ (tr[y].ch[<span class="hljs-number">0</span>] == x) ? <span class="hljs-built_in">rotate</span>(x) : <span class="hljs-built_in">rotate</span>(y);<br><span class="hljs-built_in">rotate</span>(x);<br>&#125;<br><span class="hljs-keyword">if</span> (!to) root = x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-type">int</span> u = root;<br><span class="hljs-keyword">if</span> (!u) &#123;<br>root = <span class="hljs-built_in">alloc</span>(x, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>++tr[u].siz;<br><span class="hljs-keyword">if</span> (tr[u].val == x) &#123;<br>++tr[u].cnt;<br><span class="hljs-built_in">splay</span>(u, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">int</span> nxt = x &gt; tr[u].val;<br><span class="hljs-keyword">if</span> (!tr[u].ch[nxt]) &#123;<br><span class="hljs-type">int</span> p = <span class="hljs-built_in">alloc</span>(x, u);<br>tr[u].ch[nxt] = p;<br><span class="hljs-built_in">splay</span>(p, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>u = tr[u].ch[nxt];<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span>&#123;<br><span class="hljs-type">int</span> u = root;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span> (tr[u].val == val) &#123;<br><span class="hljs-built_in">splay</span>(u, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> u;<br>&#125;<br><span class="hljs-type">int</span> nxt = val &gt; tr[u].val;<br><span class="hljs-keyword">if</span> (!tr[u].ch[nxt]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>u = tr[u].ch[nxt];<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-type">int</span> pos = <span class="hljs-built_in">find</span>(x);<br><span class="hljs-keyword">if</span> (!pos) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">if</span> (tr[pos].cnt &gt; <span class="hljs-number">1</span>) &#123;<br>--tr[pos].cnt, --tr[pos].siz;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (!tr[pos].ch[<span class="hljs-number">0</span>] &amp;&amp; !tr[pos].ch[<span class="hljs-number">1</span>]) root = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!tr[pos].ch[<span class="hljs-number">0</span>]) &#123;<br>root = tr[pos].ch[<span class="hljs-number">1</span>];<br>tr[root].fa = <span class="hljs-number">0</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">int</span> u = tr[pos].ch[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">while</span> (tr[u].ch[<span class="hljs-number">1</span>]) u = tr[u].ch[<span class="hljs-number">1</span>];<br><span class="hljs-built_in">splay</span>(u, root);<br><span class="hljs-built_in">connect</span>(tr[pos].ch[<span class="hljs-number">1</span>], u, <span class="hljs-number">1</span>);<br><span class="hljs-built_in">connect</span>(u, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>root = u;<br><span class="hljs-built_in">update</span>(u);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getrank</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span>&#123;<br><span class="hljs-type">int</span> pos = <span class="hljs-built_in">find</span>(val);<br><span class="hljs-keyword">return</span> tr[tr[pos].ch[<span class="hljs-number">0</span>]].siz + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">kth</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-type">int</span> u = root;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><span class="hljs-type">int</span> rest = tr[u].siz - tr[tr[u].ch[<span class="hljs-number">1</span>]].siz;<br><span class="hljs-keyword">if</span> (x &gt; tr[tr[u].ch[<span class="hljs-number">0</span>]].siz &amp;&amp; x &lt;= rest) &#123;<br><span class="hljs-built_in">splay</span>(u, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> tr[u].val;<br>&#125;<br><span class="hljs-keyword">if</span> (x &lt; rest) u = tr[u].ch[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">else</span> x -= rest, u = tr[u].ch[<span class="hljs-number">1</span>];<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getpre</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span>&#123;<br><span class="hljs-type">int</span> u = root;<br><span class="hljs-type">int</span> ans = -INF;<br><span class="hljs-keyword">while</span> (u) &#123;<br><span class="hljs-keyword">if</span> (tr[u].val &lt; val &amp;&amp; tr[u].val &gt; ans) ans = tr[u].val;<br><span class="hljs-keyword">if</span> (val &gt; tr[u].val) u = tr[u].ch[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">else</span> u = tr[u].ch[<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getnxt</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span>&#123;<br><span class="hljs-type">int</span> u = root;<br><span class="hljs-type">int</span> ans = INF;<br><span class="hljs-keyword">while</span> (u) &#123;<br><span class="hljs-keyword">if</span> (tr[u].val &gt; val &amp;&amp; tr[u].val &lt; ans) ans = tr[u].val;<br><span class="hljs-keyword">if</span> (val &gt;= tr[u].val) u = tr[u].ch[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">else</span> u = tr[u].ch[<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;splay.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;splay.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;N);<br><span class="hljs-keyword">while</span> (N--) &#123;<br><span class="hljs-type">int</span> op, x;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;op, &amp;x);<br><span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) <span class="hljs-built_in">insert</span>(x);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>) <span class="hljs-built_in">remove</span>(x);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">3</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">getrank</span>(x));<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">4</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">kth</span>(x));<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">5</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">getpre</span>(x));<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">6</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">getnxt</span>(x));<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="【模板】文艺平衡树（Splay区间修改）"><a href="#【模板】文艺平衡树（Splay区间修改）" class="headerlink" title="【模板】文艺平衡树（Splay区间修改）"></a><a href="https://www.luogu.com.cn/problem/P3391">【模板】文艺平衡树（Splay区间修改）</a></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ty</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br><span class="hljs-type">int</span> fa, ch[<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> val, cnt, siz, tag;<br>&#125; tr[_];<br><span class="hljs-type">int</span> root = <span class="hljs-number">1</span>, tot = <span class="hljs-number">0</span>, N, M, num[_];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>tr[x].siz = tr[tr[x].ch[<span class="hljs-number">0</span>]].siz + tr[tr[x].ch[<span class="hljs-number">1</span>]].siz + tr[x].cnt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ident</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> tr[tr[x].fa].ch[<span class="hljs-number">1</span>] == x; &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">connect</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> fa, <span class="hljs-type">int</span> how)</span> </span>&#123;<br>tr[x].fa = fa;<br>tr[fa].ch[how] = x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (x &amp;&amp; tr[x].tag) &#123;<br>tr[tr[x].ch[<span class="hljs-number">0</span>]].tag ^= <span class="hljs-number">1</span>;<br>tr[tr[x].ch[<span class="hljs-number">1</span>]].tag ^= <span class="hljs-number">1</span>;<br><span class="hljs-built_in">swap</span>(tr[x].ch[<span class="hljs-number">0</span>], tr[x].ch[<span class="hljs-number">1</span>]);<br>tr[x].tag = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> fa)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (l &gt; r) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> cur = ++tot;<br>tr[cur].fa = fa;<br>tr[cur].val = num[mid];<br>++tr[cur].cnt, ++tr[cur].siz;<br>tr[cur].tag = <span class="hljs-number">0</span>;<br>tr[cur].ch[<span class="hljs-number">0</span>] = <span class="hljs-built_in">build</span>(l, mid - <span class="hljs-number">1</span>, cur);<br>tr[cur].ch[<span class="hljs-number">1</span>] = <span class="hljs-built_in">build</span>(mid + <span class="hljs-number">1</span>, r, cur);<br><span class="hljs-built_in">update</span>(cur);<br><span class="hljs-keyword">return</span> cur;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-type">int</span> y = tr[x].fa, z = tr[y].fa;<br><span class="hljs-keyword">if</span> (y == root) root = x;<br><span class="hljs-type">int</span> yson = <span class="hljs-built_in">ident</span>(x), zson = <span class="hljs-built_in">ident</span>(y);<br><span class="hljs-type">int</span> k = tr[x].ch[yson ^ <span class="hljs-number">1</span>];<br><span class="hljs-built_in">connect</span>(k, y, yson);<br><span class="hljs-built_in">connect</span>(y, x, yson ^ <span class="hljs-number">1</span>);<br><span class="hljs-built_in">connect</span>(x, z, zson);<br><span class="hljs-built_in">update</span>(y), <span class="hljs-built_in">update</span>(x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">splay</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> to)</span> </span>&#123;<br><span class="hljs-keyword">while</span> (tr[x].fa != to) &#123;<br><span class="hljs-type">int</span> y = tr[x].fa, z = tr[y].fa;<br><span class="hljs-keyword">if</span> (tr[y].fa != to)<br>(tr[z].ch[<span class="hljs-number">0</span>] == y) ^ (tr[y].ch[<span class="hljs-number">0</span>] == x) ? <span class="hljs-built_in">rotate</span>(x) : <span class="hljs-built_in">rotate</span>(y);<br><span class="hljs-built_in">rotate</span>(x);<br>&#125;<br><span class="hljs-keyword">if</span> (!to) root = x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-type">int</span> u = root;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><span class="hljs-built_in">pushdown</span>(u);<br><span class="hljs-type">int</span> rest = tr[u].siz - tr[tr[u].ch[<span class="hljs-number">1</span>]].siz;<br><span class="hljs-keyword">if</span> (x &gt; tr[tr[u].ch[<span class="hljs-number">0</span>]].siz &amp;&amp; x &lt;= rest) &#123;<br><span class="hljs-built_in">splay</span>(u, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> u;<br>&#125;<br><span class="hljs-keyword">if</span> (x &lt; rest) u = tr[u].ch[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">else</span> x -= rest, u = tr[u].ch[<span class="hljs-number">1</span>];<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rever</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>l = <span class="hljs-built_in">find</span>(l - <span class="hljs-number">1</span>), r = <span class="hljs-built_in">find</span>(r + <span class="hljs-number">1</span>);<br><span class="hljs-built_in">splay</span>(l, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">splay</span>(r, l);<br><span class="hljs-type">int</span> pos = tr[root].ch[<span class="hljs-number">1</span>];<br>pos = tr[pos].ch[<span class="hljs-number">0</span>];<br>tr[pos].tag ^= <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-built_in">pushdown</span>(x);<br><span class="hljs-keyword">if</span> (tr[x].ch[<span class="hljs-number">0</span>]) <span class="hljs-built_in">dfs</span>(tr[x].ch[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">if</span> (tr[x].val != INF &amp;&amp; tr[x].val != -INF) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, tr[x].val);<br><span class="hljs-keyword">if</span> (tr[x].ch[<span class="hljs-number">1</span>]) <span class="hljs-built_in">dfs</span>(tr[x].ch[<span class="hljs-number">1</span>]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;splay.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;splay.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>N = <span class="hljs-built_in">ty</span>(), M = <span class="hljs-built_in">ty</span>();<br>num[<span class="hljs-number">1</span>] = -INF, num[N + <span class="hljs-number">2</span>] = INF;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) num[i + <span class="hljs-number">1</span>] = i;<br><span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, N + <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">while</span> (M--) &#123;<br><span class="hljs-type">int</span> l = <span class="hljs-built_in">ty</span>(), r = <span class="hljs-built_in">ty</span>();<br><span class="hljs-built_in">rever</span>(l + <span class="hljs-number">1</span>, r + <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-built_in">dfs</span>(root);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Splay</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[HEOI2016/TJOI2016]求和 - 斯特林数 + NTT</title>
    <link href="/2019/12/28/HEOI2016-TJOI2016-%E6%B1%82%E5%92%8C-%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0-NTT/"/>
    <url>/2019/12/28/HEOI2016-TJOI2016-%E6%B1%82%E5%92%8C-%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0-NTT/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>计算函数的值</p><p>$$f(n) &#x3D; \sum \limits_{i&#x3D;0}^{n} \sum \limits_{j&#x3D;0}^{i} 2^j \times j! \times S(i,j)$$</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>大家好，我是练习推<del>柿子</del>半天的个人练习生$newbielyx$。</p><p>$$<br>f(n) &#x3D; \sum \limits_{i&#x3D;0}^{n} \sum \limits_{j&#x3D;0}^{i} 2^j \times j! \times S(i,j)<br>$$</p><p>$$<br>&#x3D; \sum \limits_{i&#x3D;0}^{n} \sum \limits_{j&#x3D;0}^{i} 2^j \times j! \times \frac{1}{j!} \times \left (\sum \limits_{k&#x3D;0}^{j} (-1)^k C(j,k)(j-k)^i\right)<br>$$</p><p>$$<br>&#x3D; \sum \limits_{i&#x3D;0}^{n} \sum \limits_{j&#x3D;0}^{i} 2^j \sum \limits_{k&#x3D;0}^{j} (-1)^k C(j,k)(j-k)^i<br>$$</p><p>$$<br>&#x3D; \sum \limits_{j&#x3D;0}^{n}2^j \sum \limits_{i&#x3D;j}^{n} \sum \limits_{k&#x3D;0}^{j} (-1)^k C(j,k) (j-k)^i<br>$$</p><p>$$<br>&#x3D; \sum \limits_{j&#x3D;0}^{n} 2^j \sum \limits_{k&#x3D;0}^{j} (-1)^k C(j,k) \sum \limits_{i&#x3D;0}^{n}(j-k)^i<br>$$</p><p>$$<br>&#x3D; \sum \limits_{j&#x3D;0}^{n} 2^j \sum \limits_{k&#x3D;0}^{j} (-1)^k \frac{j!}{k!(j-k)!} \sum \limits_{i&#x3D;0}^{n}(j-k)^i<br>$$</p><p>$$<br>&#x3D; \sum \limits_{j&#x3D;0}^{n} 2^j \cdot j! \sum \limits_{k&#x3D;0}^{j} \frac{(-1)^k}{k!} \frac{\sum \limits_{i&#x3D;0}^{n}(j-k)^i}{(j-k)!}<br>$$</p><p>容易看出上面是一个等比数列，继续<del>推倒</del></p><p>$$<br>f(n) &#x3D; \sum \limits_{j&#x3D;0}^{n} 2^j \cdot j! \sum \limits_{k&#x3D;0}^{j} \frac{(-1)^k}{k!} \frac{(j-k)^{n+1}-1}{(j-k-1)(j-k)!}<br>$$</p><p>$$<br>&#x3D; \sum \limits_{j&#x3D;0}^{n} 2^j \cdot j! \sum \limits_{k&#x3D;0}^{j} \frac{(-1)^k}{k!} \frac{(j-k)^{n+1}-1}{(j-k)!(j-k-1)}<br>$$</p><p>然后你就可以发现，卷起来了！</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ty</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll P = <span class="hljs-number">998244353</span>, G = <span class="hljs-number">3</span>, Gx = <span class="hljs-number">332748118</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">4e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> N, r[_];<br>ll fac[_], facinv[_], A[_], B[_];<br><br><span class="hljs-function">ll <span class="hljs-title">fpow</span><span class="hljs-params">(ll a, ll b)</span> </span>&#123;<br>ll ret = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> ( ; b; b &gt;&gt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) ret = ret * a % P;<br>a = a * a % P;<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pre</span><span class="hljs-params">()</span> </span>&#123;<br>fac[<span class="hljs-number">0</span>] = fac[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= N; ++i) fac[i] = fac[i - <span class="hljs-number">1</span>] * i % P;<br>facinv[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>, facinv[N] = <span class="hljs-built_in">fpow</span>(fac[N], P - <span class="hljs-number">2</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = N - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; --i) facinv[i] = facinv[i + <span class="hljs-number">1</span>] * (i + <span class="hljs-number">1</span>) % P;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= N; ++i) &#123;<br>A[i] = (i &amp; <span class="hljs-number">1</span>) ? <span class="hljs-number">-1</span> : <span class="hljs-number">1</span>;<br>A[i] = (A[i] * facinv[i] + P) % P;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= N; ++i) &#123;<br>B[i] = (<span class="hljs-built_in">fpow</span>(i, N + <span class="hljs-number">1</span>) - <span class="hljs-number">1</span> + P) % P;<br>B[i] = B[i] * facinv[i] % P;<br>B[i] = B[i] * <span class="hljs-built_in">fpow</span>(i - <span class="hljs-number">1</span>, P - <span class="hljs-number">2</span>) % P;<br>&#125;<br>B[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>, B[<span class="hljs-number">1</span>] = N + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">NTT</span><span class="hljs-params">(<span class="hljs-type">int</span> lim, ll *a, <span class="hljs-type">int</span> op)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i)<br><span class="hljs-keyword">if</span> (i &lt; r[i]) <span class="hljs-built_in">swap</span>(a[i], a[r[i]]);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">2</span>; len &lt;= lim; len &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-type">int</span> mid = len &gt;&gt; <span class="hljs-number">1</span>;<br>ll Wn = <span class="hljs-built_in">fpow</span>(op == <span class="hljs-number">1</span> ? G : Gx, (P - <span class="hljs-number">1</span>) / len);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; i += len) &#123;<br>ll w = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; mid; ++j, w = w * Wn % P) &#123;<br>ll x = a[i + j], y = w * a[i + j + mid] % P;<br>a[i + j] = (x + y) % P;<br>a[i + j + mid] = (x - y + P) % P;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> lim = <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (lim &lt;= N + N) lim &lt;&lt;= <span class="hljs-number">1</span>, ++k;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) r[i] = (r[i &gt;&gt; <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">1</span>) | ((i &amp; <span class="hljs-number">1</span>) &lt;&lt; (k - <span class="hljs-number">1</span>));<br><span class="hljs-built_in">NTT</span>(lim, A, <span class="hljs-number">1</span>);<br><span class="hljs-built_in">NTT</span>(lim, B, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) A[i] = (A[i] * B[i]) % P;<br><span class="hljs-built_in">NTT</span>(lim, A, <span class="hljs-number">-1</span>);<br>ll inv = <span class="hljs-built_in">fpow</span>(lim, P - <span class="hljs-number">2</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= N + N; ++i) A[i] = A[i] * inv % P;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;sum.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;sum.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>N = <span class="hljs-built_in">ty</span>();<br><span class="hljs-built_in">pre</span>();<br><span class="hljs-built_in">solve</span>();<br>ll ans = <span class="hljs-number">0</span>, t = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= N; ++i, t = t * <span class="hljs-number">2</span> % P) ans = (ans + t * fac[i] % P * A[i] % P) % P;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>多项式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>斯特林数</tag>
      
      <tag>NTT</tag>
      
      <tag>省选</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈斯特林数及其应用</title>
    <link href="/2019/12/27/%E6%B5%85%E8%B0%88%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/"/>
    <url>/2019/12/27/%E6%B5%85%E8%B0%88%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="第一类斯特林数"><a href="#第一类斯特林数" class="headerlink" title="第一类斯特林数"></a>第一类斯特林数</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>第一类Stirling数表示将 n 个不同元素构成m个圆排列的数目。</p><p>设有多项式</p><span id="more"></span><p>$$<br>[x]_n &#x3D; x(x-1)(x-2)\dots(x-n+1)<br>$$</p><p>$$<br>&#x3D;s(n,0)+s(n,1)x+s(n,2)x^2+\dots +s(n,n)x^n<br>$$</p><p>则称$s(n,0),s(n,1),\dots,s(n,n)$为<strong>第$1$类斯特林数</strong>。</p><h2 id="递推式"><a href="#递推式" class="headerlink" title="递推式"></a>递推式</h2><p>$$<br>[x]_{n+1}&#x3D;<a href="x-n">s(n,0)+s(n,1)x+s(n,2)x^2+\dots +s(n,n)x^n</a><br>$$</p><p>$$<br>&#x3D;s(n+1,0)+s(n+1,1)x+\dots+s(n+1,n+1)x^{n+1}<br>$$</p><p>显然有</p><p>$$<br>s(n,r)&#x3D;s(n-1,r-1)+(n-1)s(n-1,r)<br>$$</p><p>考虑其组合意义，最后一个球可以单独构成一个圆排列，也可以插入前面某一个球的一侧。</p><p>若单独放，则有$s(n-1,r-1)$种放法；若放在某个球的一侧，则有$(n-1)s(n-1,r)$种放法。</p><h1 id="第二类斯特林数"><a href="#第二类斯特林数" class="headerlink" title="第二类斯特林数"></a>第二类斯特林数</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>$n$个有区别的球放到$m$个相同的盒子里，要求无一空盒，其不同的方案数用$S(n,m)$来表示，称为<strong>第２类斯特林数</strong>，即$S(n,m)$也就是将$n$个数拆分成非空的$ｍ$个部分的方案数。</p><p>$E.g.$ 红、黄、蓝、白这$4$种颜色的球，放到两个无区别的盒子里，不允许空盒，其方案有如下$7$种：</p><table><thead><tr><th align="center">盒子</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th></tr></thead><tbody><tr><td align="center">第一个盒子</td><td align="center">r</td><td align="center">y</td><td align="center">b</td><td align="center">w</td><td align="center">ry</td><td align="center">rb</td><td align="center">rw</td></tr><tr><td align="center">第二个盒子</td><td align="center">ybw</td><td align="center">rbw</td><td align="center">ryw</td><td align="center">ryb</td><td align="center">bw</td><td align="center">yw</td><td align="center">yb</td></tr></tbody></table><p>其中$r$表示红球，$y$表示黄球，$b$表示蓝球，$w$表示白球，则有</p><p>$$<br>S(4,2)&#x3D;7<br>$$</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><ol><li><p>$S(n,0)&#x3D;S(0,n)&#x3D;0,\forall n \in \mathbb{N}$</p></li><li><p>$S(n,k)&gt;0$，若$n\ge k\ge 1$</p></li><li><p>$S(n,k)&#x3D;0$，若$k &gt; n\ge 1$</p></li><li><p>$S(n,1)&#x3D;1,n\ge 1$</p></li><li><p>$S(n,n)&#x3D;1,n\ge 1$</p><p>前$5$个性质是显然的。</p></li><li><p>$S(n,2)&#x3D;2^{n-1}-1$</p><p><strong>证明：</strong> 两个盒子没有区别，当第$1$个球放进其中一个盒子之后，其余的$n-1$个有标志的球都有与第$1$个球同盒与否的两种选择，但是要排除全部放在同一个盒子的情况，所以是$2^{n-1}-1$。</p></li><li><p>$S(n,3)&#x3D;\frac{1}{2}(3^{n-1}+1)-2^{n-1}$</p><p><strong>证明：</strong> 先咕着。</p></li><li><p>$S(n,n-1)&#x3D;\binom{n}{2}$</p><p><strong>证明：</strong> $n$个有标志的球，$n-1$个无区别的盒子，无一空盒，所以必定有一个盒子有两个球，所以方案数为$\binom{n}{2}$。</p></li><li><p>$S(n,n-2)&#x3D;\binom{n}{3}+3\binom{n}{4}$</p><p><strong>证明：</strong> $n$个有标志的球，$n-2$个无区别的盒子，无一空盒，所以有两种情况：一是有一个盒子有$3$个球，方案数为$\binom{n}{3}$；另一种可能则是有两个盒子里面各有$2$个球，方案数为$3\binom{n}{4}$。</p></li></ol><h2 id="递推式-1"><a href="#递推式-1" class="headerlink" title="递推式"></a>递推式</h2><p>$$<br>S(n,r)&#x3D;S(n-1,r-1)+rS(n-1,r)<br>$$</p><p>考虑最后一个球，若它单独放在一个盒子里，则方案数为$S(n-1,r-1)$；若放在前面的某一个盒子里，则方案数为$rS(n-1,r)$。</p><h2 id="通项公式"><a href="#通项公式" class="headerlink" title="通项公式"></a>通项公式</h2><p>$$<br>S(n,m)&#x3D;\frac{1}{m!} \left[ m^n - \binom{m}{1}(m-1)^n+\binom{m}{2}(m-2)^n- \dots + (-1)^{m-1}\binom{m}{m-1}1^n \right]<br>$$</p><p>$$<br>&#x3D;\frac{1}{m!} \sum \limits_{k&#x3D;0}^{m} (-1)^k C(m,k) (m-k)^n<br>$$</p><p><strong>证明：</strong></p><p>假设盒子有区别，且允许空盒存在，那么显然答案就是$m^n$。但是这里不允许有空盒存在，那么进行容斥。</p><p>枚举当前的空盒数，那么先将空盒选出来，也就是$\binom{m}{k}$，那么剩下的$m-k$个盒子就可以随意放入$n$个球，也就是$(m-k)^n$。最后，由于盒子是没有区别的，所以除以一个重复数$m!$。</p><h2 id="求斯特林数"><a href="#求斯特林数" class="headerlink" title="求斯特林数"></a>求斯特林数</h2><p>除了$O(n^2)$递推外还有没有别的方法计算第二类斯特林数呢？显然是有的。</p><p>回顾一下上面的通项公式</p><p>$$<br>S(n,m)&#x3D;\frac{1}{m!} \sum \limits_{k&#x3D;0}^{m} (-1)^k C(m,k) (m-k)^n<br>$$</p><p>稍微整理一下</p><p>$$<br>S(n,m)&#x3D;\frac{1}{m!} \sum \limits_{k&#x3D;0}^{m} (-1)^k \frac{m!}{k!(m-k)!} (m-k)^n<br>$$</p><p>$$<br>S(n,m)&#x3D;\frac{1}{m!} \sum \limits_{k&#x3D;0}^{m} m! \frac{(-1)^k}{k!} \frac{(m-k)^n}{(m-k)!}<br>$$</p><p>$$<br>S(n,m)&#x3D;\sum \limits_{k&#x3D;0}^{m} \frac{(-1)^k}{k!} \frac{(m-k)^n}{(m-k)!}<br>$$</p><p>显然，这样就是一个卷积的形式了，可以快速得把一行斯特林数都求出来。</p><h1 id="斯特林反演"><a href="#斯特林反演" class="headerlink" title="斯特林反演"></a>斯特林反演</h1><p>博主太菜了，不会，咕了。</p><h1 id="斯特林数及斯特林反演的应用"><a href="#斯特林数及斯特林反演的应用" class="headerlink" title="斯特林数及斯特林反演的应用"></a>斯特林数及斯特林反演的应用</h1><p>咕了。</p>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>斯特林数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[SDOI2015]序列统计 - 生成函数 + NTT</title>
    <link href="/2019/12/27/SDOI2015-%E5%BA%8F%E5%88%97%E7%BB%9F%E8%AE%A1-%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0-NTT/"/>
    <url>/2019/12/27/SDOI2015-%E5%BA%8F%E5%88%97%E7%BB%9F%E8%AE%A1-%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0-NTT/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>小C有一个集合 $S$，里面的元素都是小于 $m$ 的非负整数。他用程序编写了一个数列生成器，可以生成一个长度为 $n$ 的数列，数列中的每个数都属于集合 $S$。  </p><p>小C用这个生成器生成了许多这样的数列。但是小C有一个问题需要你的帮助：给定整数 $x$，求所有可以生成出的，且满足数列中所有数的乘积 $\bmod \ m$ 的值等于 $x$ 的不同的数列的有多少个。</p><span id="more"></span><p>小C认为，两个数列 $A$ 和 $B$ 不同，当且仅当 $\exists i \text{ s.t. } A_i \neq B_i$。另外，小C认为这个问题的答案可能很大，因此他只需要你帮助他求出答案对 $1004535809$ 取模的值就可以了。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>首先考虑朴素算法的$dp$转移：$f_i \times f_j \rightarrow f_{i\times j}$</p><p>观察这个转移，如果转移是$f_i \times f_j \rightarrow f_{i+j}$，那我们不就可以卷起来了吗？</p><p>乘法变成加法，想到了什么？对数。</p><p>题目中要求乘起来为$x$的方案数，那我们只需要对$S_i$和$x$取关于$M$的原根的离散对数，然后问题就转化为了$\log {S_i}$加起来为$\log x$的方案数。</p><p>小于$M$的非负整数，除$0$外，一共有$M-2$个，值域为$[1,M-1]$。因为$g^0 \equiv g^{M-1}(\mod M)$，且$g^0$到$g^{M-2}$两两不同，所以$S_i$与$\log S_i$是一一对应的，$\log S_{i}$的范围是$[0,M-2]$。</p><p>接下来，定义生成函数<br>$$<br>A(x)&#x3D;\sum \limits_{i&#x3D;0}^{\infty}a_ix^i<br>$$<br>对于集合中的每个数$S_i$，若$S_i$不为$0$，令$a_{\log S_i}&#x3D;1$。</p><p>然后快速幂求出$A^{N}(x)$，第$\log x$项就是答案。</p><p>最后需要注意的一点是，因为取离散对数后要求的是加起来$\mod M-1$为$\log x$，所以每次乘法后要把所有次数$\mod M-1$为$i$的项统计到次数为$i$的项上。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ty</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ksm</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> mod)</span> </span>&#123;<br><span class="hljs-type">int</span> ret = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> ( ; b; b &gt;&gt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) ret = <span class="hljs-number">1ll</span> * ret * a % mod;<br>a = <span class="hljs-number">1ll</span> * a * a % mod;<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> P = <span class="hljs-number">1004535809</span>, G = <span class="hljs-number">3</span>, Gx = <span class="hljs-built_in">ksm</span>(G, P - <span class="hljs-number">2</span>, P);<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">3e4</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> N, M, X, S, g;<br><span class="hljs-type">int</span> F[_], H[_], r[_], lim = <span class="hljs-number">1</span>, xx;<br>map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">root</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> p)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= p; ++i) &#123;<br><span class="hljs-type">int</span> x = p - <span class="hljs-number">1</span>;<br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">2</span>; k * k &lt;= p - <span class="hljs-number">1</span>; ++k) <span class="hljs-keyword">if</span> (!(x % k)) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">ksm</span>(i, (p - <span class="hljs-number">1</span>) / k, p) == <span class="hljs-number">1</span>) &#123;<br>flag = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">while</span> (!(x % k)) x /= k;<br>&#125;<br><span class="hljs-keyword">if</span> (flag &amp;&amp; (x == <span class="hljs-number">1</span> || <span class="hljs-built_in">ksm</span>(i, (p - <span class="hljs-number">1</span>) / x, p) != <span class="hljs-number">1</span>)) <span class="hljs-keyword">return</span> i;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">NTT</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> op)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i)<br><span class="hljs-keyword">if</span> (i &lt; r[i]) <span class="hljs-built_in">swap</span>(a[i], a[r[i]]);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">2</span>; len &lt;= lim; len &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-type">int</span> mid = len &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> Wn = <span class="hljs-built_in">ksm</span>(op == <span class="hljs-number">1</span> ? G : Gx, (P - <span class="hljs-number">1</span>) / len, P);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; i += len) &#123;<br><span class="hljs-type">int</span> w = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; mid; ++j, w = <span class="hljs-number">1ll</span> * w * Wn % P) &#123;<br><span class="hljs-type">int</span> x = a[i + j], y = <span class="hljs-number">1ll</span> * w * a[i + j + mid] % P;<br>a[i + j] = (x + y) % P;<br>a[i + j + mid] = (x - y + P) % P;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (op == <span class="hljs-number">-1</span>)<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) a[i] = <span class="hljs-number">1ll</span> * a[i] * xx % P;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> *A, <span class="hljs-type">int</span> *B, <span class="hljs-type">int</span> *C)</span> </span>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> a[_], b[_], ret[_];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) a[i] = A[i], b[i] = B[i];<br><span class="hljs-built_in">NTT</span>(a, <span class="hljs-number">1</span>); <span class="hljs-built_in">NTT</span>(b, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) a[i] = <span class="hljs-number">1ll</span> * a[i] * b[i] % P;<br><span class="hljs-built_in">NTT</span>(a, <span class="hljs-number">-1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; M - <span class="hljs-number">1</span>; ++i) ret[i] = (a[i] + a[i + M - <span class="hljs-number">1</span>]) % P;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; M - <span class="hljs-number">1</span>; ++i) C[i] = ret[i];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;seq.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;seq.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>N = <span class="hljs-built_in">ty</span>(), M = <span class="hljs-built_in">ty</span>(), X = <span class="hljs-built_in">ty</span>(), S = <span class="hljs-built_in">ty</span>();<br>g = <span class="hljs-built_in">root</span>(M); <span class="hljs-type">long</span> <span class="hljs-type">long</span> t = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; M - <span class="hljs-number">1</span>; ++i) &#123;<br>mp[t] = i;<br>t = t * g % M;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= S; ++i) &#123;<br><span class="hljs-type">int</span> x = <span class="hljs-built_in">ty</span>() % M;<br><span class="hljs-keyword">if</span> (x) F[mp[x]] = <span class="hljs-number">1</span>;<br>&#125;<br>H[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; <span class="hljs-keyword">while</span> (lim &lt;= M + M) lim &lt;&lt;= <span class="hljs-number">1</span>, ++k;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) r[i] = (r[i &gt;&gt; <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">1</span>) | ((i &amp; <span class="hljs-number">1</span>) &lt;&lt; (k - <span class="hljs-number">1</span>));<br>xx = <span class="hljs-built_in">ksm</span>(lim, P - <span class="hljs-number">2</span>, P);<br><span class="hljs-keyword">for</span> ( ; N; N &gt;&gt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span> (N &amp; <span class="hljs-number">1</span>) <span class="hljs-built_in">mul</span>(H, F, H);<br><span class="hljs-built_in">mul</span>(F, F, F);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, H[mp[X]]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>多项式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NTT</tag>
      
      <tag>省选</tag>
      
      <tag>生成函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从傅里叶变换(FFT)到数论变换(NTT)</title>
    <link href="/2019/12/22/%E4%BB%8E%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2-FFT-%E5%88%B0%E6%95%B0%E8%AE%BA%E5%8F%98%E6%8D%A2-NTT/"/>
    <url>/2019/12/22/%E4%BB%8E%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2-FFT-%E5%88%B0%E6%95%B0%E8%AE%BA%E5%8F%98%E6%8D%A2-NTT/</url>
    
    <content type="html"><![CDATA[<p>FFT可以用来计算多项式乘法，但是复数的运算中含有大量的浮点数，精度较低。对于只有整数参与运算的多项式，有时，$\text{NTT(Number-Theoretic Transform)}$会是更好的选择。</p><h1 id="阶"><a href="#阶" class="headerlink" title="阶"></a>阶</h1><p>若$a,p$互素，且$p&gt;1$，对于$a^k \equiv 1 (\mod p)$的<strong>最小</strong>的$k$，称为$a$模$p$的<strong>阶</strong>，记做$\sigma_p(a)$。</p><span id="more"></span><p>$E.g.$ $\sigma_7(2)&#x3D;3$</p><p>$2^1\equiv 2(\mod 7)$</p><p>$2^2\equiv 4(\mod 7)$</p><p>$2^3\equiv 1(\mod 7)$</p><blockquote><p>对于一个数$g$，$g$的阶一定是$p-1$的约数。</p></blockquote><p><em>证明：</em></p><p>假设最小的$k$不是$p-1$的约数，找到$x$满足$xk&gt;p-1&gt;(x-1)k$，由费马小定理可知</p><p>$$g^{xk}\equiv g^{p-1}\equiv 1 \equiv g^{xk-(p-1)} (\mod p)$$</p><p>$xk-(p-1)&lt;k$，与假设矛盾。</p><h1 id="原根"><a href="#原根" class="headerlink" title="原根"></a>原根</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>$FFT$中，我们使用单位复根$\omega_n^k&#x3D;\cos k\frac{2\pi}{n}+i\sin k\frac{2\pi}{n}$，那有没有什么能够代替单位复根且解决精度问题呢？这就是原根。</p><p>设$m$是正整数，$a$是整数，若$a$模$m$的阶等于$\varphi(m)$，则称$a$为模$m$的一个<strong>原根</strong>。</p><blockquote><p>若$p$为质数，设$g$为$p$的原根，那么$g^i \mod p(1&lt;j&lt;p,1\le i\le p-1)$的结果两两不同。且其等价于$g^{p-1}\equiv 1(\mod p)$当且仅当指数为$p-1$的时候成立。(这里$p$是素数)</p></blockquote><p>简单证明一下：</p><p>显然$g^0 \equiv 1(\mod p)$</p><p>由原根的定义可知满足$g^{i} \equiv 1(\mod p)$的最小正整数为$\varphi(p)&#x3D;p-1$</p><p>故由<a href="https://www.cnblogs.com/maijing/p/5046628.html">指数循环节</a>可知，$g^i \mod p(1&lt;j&lt;p,1\le i\le p-1)$的结果两两不同。</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>考虑在FFT当中我们需要单位复根的以下性质：</p><ol><li><p>$\omega_n^t$互不相同，保证点值的合法性；</p></li><li><p>$\omega_{2n}^{2k} &#x3D; \omega_n^k$，用于分治；</p></li><li><p>$\omega_n^{k+\frac{n}{2}} &#x3D; -\omega_n^k$，用于分治；</p></li><li><p>当$k\neq 0$时，$1+\omega_n^k+(\omega_n^k)^2+\dots +(\omega_n^k)^{n-1}&#x3D;0$，用于逆变换。</p></li></ol><p><strong>性质一</strong></p><p>令$\omega_n&#x3D;g^q$，$1,g^q,g^{2q},\dots,g^{(n-1)q}$互不相同，满足<strong>性质一</strong>。</p><p><strong>性质二</strong></p><p>由$\omega_n &#x3D; g^q$可知，$\omega_{2n}&#x3D;g^{\frac{q}{2}}(p&#x3D;\frac{q}{2} \times 2n + 1)$，故$\omega_{2n}^{2k} &#x3D; g^{2k \frac{q}{2}}&#x3D;g^{kq}&#x3D;g^q$，满足<strong>性质二</strong>。</p><p><strong>性质三</strong></p><p>根据费马小定理得</p><p>$$\omega_n^n&#x3D;g^{nq}&#x3D;g^{p-1}\equiv 1(\mod p)$$</p><p>又因为$(\omega_n^{\frac{n}{2}})^2&#x3D;\omega_n^n$，所以$\omega_n^{\frac{n}{2}}\equiv \pm 1 (\mod p)$，而根据性质一可得$\omega_n^{\frac{n}{2}}\neq \omega_n^0$，即$\omega_n^{\frac{n}{2}}\equiv -1(\mod p)$。可推出$\omega_n^{k+\frac{n}{2}}&#x3D;\omega_n^k \times \omega_n^{\frac{n}{2}}&#x3D;-\omega_n^k (\mod p)$，满足<strong>性质三</strong>。</p><p><strong>性质四</strong></p><p>当$k\neq 0$时</p><p>$$S(\omega_n^k)&#x3D;1+\omega_n^k+(\omega_n^k)^2+\dots +(\omega_n^k)^{n-1}$$</p><p>$$\omega_n^k S(\omega_n^k)&#x3D;\omega_n^k+(\omega_n^k)^2+(\omega_n^k)^3+\dots +(\omega_n^k)^n$$</p><p>$$\omega_n^k S(\omega_n^k)-S(\omega_n^k)&#x3D;(\omega_n^k)^n-1$$</p><p>$$S(\omega_n^k)&#x3D;\frac{(\omega_n^k)^n-1}{\omega_n^k-1}$$</p><p>由<strong>性质三</strong>中的推论可知，$(\omega_n^k)^n-1&#x3D;(\omega_n^n)^k-1\equiv \omega_n^n-1\equiv 0 (\mod p)$，故$S(\omega_n^k)&#x3D;0$，性质四成立。</p><h1 id="求原根"><a href="#求原根" class="headerlink" title="求原根"></a>求原根</h1><p>求一个质数的原根，可以用枚举法——枚举$g$，检验$g$是否为$p$的原根。</p><p>根据前面的关于阶知识可知，检验时，只需枚举$p-1$的所有约数$q$，检验$g^q\equiv 1(\mod p)$即可。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>将$FFT$里所有关于$\omega_n$的运算替换成$g^q$在模意义下的运算即可，注意$\div n$要改为$\times n^{-1}$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">ty</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>(); ll x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">4e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> ll P = <span class="hljs-number">998244353</span>, G = <span class="hljs-number">3</span>, Gx = <span class="hljs-number">332748118</span>;<br><span class="hljs-type">int</span> N, M, r[_];<br>ll A[_], B[_];<br><br><span class="hljs-function">ll <span class="hljs-title">ksm</span><span class="hljs-params">(ll a, ll b)</span> </span>&#123;<br>ll ret = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> ( ; b; b &gt;&gt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) ret = ret * a % P;<br>a = a * a % P;<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ntt</span><span class="hljs-params">(<span class="hljs-type">int</span> lim, ll *a, <span class="hljs-type">int</span> op)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i)<br><span class="hljs-keyword">if</span> (i &lt; r[i]) <span class="hljs-built_in">swap</span>(a[i], a[r[i]]);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">2</span>; len &lt;= lim; len &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-type">int</span> mid = len &gt;&gt; <span class="hljs-number">1</span>;<br>ll Wn = <span class="hljs-built_in">ksm</span>(op == <span class="hljs-number">1</span> ? G : Gx, (P - <span class="hljs-number">1</span>) / len);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; i += len) &#123;<br>ll w = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; mid; ++j, w = (w * Wn) % P) &#123;<br>ll x = a[i + j], y = w * a[i + j + mid] % P;<br>a[i + j] = (x + y) % P;<br>a[i + j + mid] = (x - y + P) % P;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;ntt.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;ntt.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>N = <span class="hljs-built_in">ty</span>(), M = <span class="hljs-built_in">ty</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= N; ++i) A[i] = (<span class="hljs-built_in">ty</span>() + P) % P;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= M; ++i) B[i] = (<span class="hljs-built_in">ty</span>() + P) % P;<br><span class="hljs-type">int</span> lim = <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (lim &lt;= N + M) lim &lt;&lt;= <span class="hljs-number">1</span>, ++k;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim ; ++i) r[i] = (r[i &gt;&gt; <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">1</span>) | ((i &amp; <span class="hljs-number">1</span>) &lt;&lt; (k - <span class="hljs-number">1</span>));<br><span class="hljs-built_in">ntt</span>(lim, A, <span class="hljs-number">1</span>);<br><span class="hljs-built_in">ntt</span>(lim, B, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) A[i] = (A[i] * B[i]) % P;<br><span class="hljs-built_in">ntt</span>(lim, A, <span class="hljs-number">-1</span>);<br>ll invx = <span class="hljs-built_in">ksm</span>(lim, P - <span class="hljs-number">2</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= N + M; ++i)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, (A[i] * invx) % P);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://oi.men.ci/fft-to-ntt/">从傅里叶变换到数论变换 | Menci’s Blog</a></p><p><a href="https://www.cnblogs.com/zwfymqz/archive/2018/05/02/8980809.html">快速数论变换(NTT)小结 - 自为风月马前卒 - 博客园</a></p>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NTT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速傅里叶变换(FFT)学习笔记</title>
    <link href="/2019/12/21/%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2-FFT-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2019/12/21/%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2-FFT-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><h2 id="多项式"><a href="#多项式" class="headerlink" title="多项式"></a>多项式</h2><h3 id="系数表示法"><a href="#系数表示法" class="headerlink" title="系数表示法"></a>系数表示法</h3><p>设$A(x)$表示一个$n-1$次多项式，则所有项的系数组成的$n$维向量$(a_0,a_1,a_2,\dots,a_{n-1})$<strong>唯一确定</strong>了这个多项式。</p><span id="more"></span><p>即</p><p>$$A(x)&#x3D;\sum \limits_{i&#x3D;0}^{n-1}a_ix^i$$</p><p>$$&#x3D;a_0+a_1x+a_2x^2+\dots+a_{n-1}x^{n-1}$$</p><h3 id="点值表示法"><a href="#点值表示法" class="headerlink" title="点值表示法"></a>点值表示法</h3><p>将$n$个<strong>互不相同</strong>的$x$代入多项式，会得到$n$个互不相同的取值$y$。设他们组成的$n$维向量分别为$(x_0,x_1,x_2,\dots,x_{n-1}),(y_0,y_1,y_2,\dots,y_{n-1})$。则给多项式被这两个$n$维向量<strong>唯一确定</strong>。</p><p>其中</p><p>$$y_i&#x3D;A(x_i)&#x3D;\sum \limits_{j&#x3D;0}^{n-1}a_j\times x_i^j$$</p><h3 id="多项式乘法"><a href="#多项式乘法" class="headerlink" title="多项式乘法"></a>多项式乘法</h3><p>定义两个多项式$A(x)&#x3D;\sum\limits_{i&#x3D;0}^{n-1}a_ix^i$与$B(x)&#x3D;\sum\limits_{i&#x3D;0}^{n-1}b_ix^i$相乘的结果为$C(x)$。</p><p>则</p><p>$C(x)&#x3D;A(x)\times B(x)&#x3D;\sum\limits_{k&#x3D;0}^{2n-2}(\sum \limits_{k&#x3D;i+j} a_ib_j)x^k$</p><p>形如$C(k)&#x3D;\sum \limits_{i\oplus j&#x3D;k}a_ib_j$的式子称为<strong>卷积</strong>，注意到，<strong>多项式乘法的本质就是加法卷积</strong>。</p><p>两个$n-1$次多项式相乘，得到的是一个$2n-2$次多项式，时间复杂度为$O(n^2)$。</p><p>若取两个多项式在$2n-1$个点处的点值表示，则</p><p>$$y_{3_i} &#x3D; (\sum \limits_{j&#x3D;0}^{2n-2} a_j x_i^j) \times (\sum \limits_{j&#x3D;0}^{2n-2} b_j x_i^j) &#x3D; y_{1_i} \times {y_2}_i$$</p><h2 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h2><p>设$a,b$为实数，$i^2&#x3D;-1$，形如$a+bi$的数叫做<strong>复数</strong>，其中$i$被称为<strong>虚数单位</strong>。复数域是已知最大的域。</p><h3 id="复平面"><a href="#复平面" class="headerlink" title="复平面"></a>复平面</h3><p>在复平面中，$x$轴代表实数，$y$轴代表虚数。每一个复数对应复平面上一个从$(0,0)$指向$(a,b)$的向量。</p><p>向量的长度$\sqrt{a^2+b^2}$叫做<strong>模长</strong>。表示从$x$轴正半轴到该向量的转角的有向角叫做<strong>幅角</strong>。</p><h3 id="运算法则"><a href="#运算法则" class="headerlink" title="运算法则"></a>运算法则</h3><p>记$z_1&#x3D;(a,b),z_2&#x3D;(c,d)$。</p><p>复数相加遵循平行四边形法则。$z_1+z_2&#x3D;(a+c,b+d)$。</p><p>复数相乘时，模长相乘，幅角相加。$z_1 \times z_2&#x3D;(ac-bd,ad+bc)$。</p><h1 id="单位根"><a href="#单位根" class="headerlink" title="单位根"></a>单位根</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p><strong>下文中，默认$n$为2的正整数次幂。</strong></p><p>在复平面上以原点为圆心，$1$为半径作圆，所得的圆叫<strong>单位圆</strong>。以原点为起点，圆的的$n$等分点为终点，作$n$个向量，设幅角为正且最小的向量对应的复数为$\omega_n$，则称$\omega_n$为$n$<strong>次单位根</strong>。</p><p>由复数的乘法定义（模长相乘，幅角相加）可知，其余的$n-1$个向量对应的复数分别为$\omega_n^2,\omega_n^3,\dots,\omega_n^n$，且易知$\omega_n^0&#x3D;\omega_n^n&#x3D;1$。</p><p>那么如何计算他们的值呢？</p><p><a href="https://www.matongxue.com/madocs/8.html">欧拉公式</a>解决了这个问题：</p><p>$$\omega_n^k&#x3D;\cos k\frac{2\pi}{n}+ i\sin k\frac{2\pi}{n}$$</p><p><img src="https://i.loli.net/2019/12/21/2kNs6HYptB7Snoe.png"></p><p>如图，向量$\overrightarrow{AB}$表示的复数为$8$次单位根，单位根的幅角为$\frac{\pi}{n}$</p><blockquote><p>代数中，若$z^n&#x3D;1$，则称$z$为$n$次单位根。</p></blockquote><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><ul><li><p>$\omega_n^k&#x3D;\cos k\frac{2\pi}{n}+ i\sin k\frac{2\pi}{n}$</p></li><li><p>$\omega_{2n}^{2k}&#x3D;\omega_n^k$</p></li></ul><p>从几何意义上来说，在复平面上，二者表示的向量终点相同。</p><p>证明：</p><p>$$\omega_{2n}^{2k}&#x3D;\cos 2k \frac{2\pi}{2n}+i\sin 2k\frac{2\pi}{2n}&#x3D;\cos k\frac{2\pi}{n}+ i\sin k\frac{2\pi}{n}&#x3D;\omega_n^k$$</p><ul><li>$\omega_{n}^{k+\frac{n}{2}}&#x3D;-\omega_n^k$</li></ul><p>证明：</p><p>$$\omega_n^{\frac{n}{2}}&#x3D;\cos \frac{n}{2} \cdot \frac{2\pi}{n}+ i\sin \frac{n}{2} \cdot \frac{2\pi}{n}&#x3D;\cos \pi+i\sin \pi&#x3D;-1$$</p><p>$$\omega_{n}^{k+\frac{n}{2}}&#x3D;\omega_n^k\times\omega_n^{\frac{n}{2}}&#x3D;-\omega_n^k$$</p><ul><li>$\omega_n^0&#x3D;\omega_n^n&#x3D;1$</li></ul><h1 id="快速傅里叶变换-FFT"><a href="#快速傅里叶变换-FFT" class="headerlink" title="快速傅里叶变换(FFT)"></a>快速傅里叶变换(FFT)</h1><p>前面提到过，一个$n-1$次多项式可以被$n$个点唯一确定。</p><p>考虑多项式$A(x)$的表示。将$n$次单位根的$0$到$n-1$次幂代入多项式的系数表示，所得点值向量$(A(\omega_n^0),A(\omega_n^1),\dots,A(\omega_n^{n-1}))$称为其系数向量$(a_0,a_1,\dots,a_{n-1})$的<strong>离散傅里叶变换</strong>。</p><p>但是按照朴素算法求离散傅里叶变换，时间复杂度仍然是$O(n^2)$。</p><p>$$A(x)&#x3D;a_0+a_1x+a_2x^2+a_3x^3+\dots+a_{n-1}x^{n-1}$$</p><p>考虑将多项式按照系数下标的奇偶分为两部分</p><p>$$A(x)&#x3D;(a_0+a_2x^2+a_4x^4+\dots+a_{n-2}x^{n-2})+(a_1x+a_3x^3+a_5x^5+\dots+a_{n-1}x^{n-1})$$</p><p>设</p><p>$$A_1(x)&#x3D;a_0+a_2x+a_4x^2+\dots+a_{n-2}x^{\frac{n}{2}-1}$$</p><p>$$A_2(x)&#x3D;a_1+a_3x+a_5x^2+\dots+a_{n-1}x^{\frac{n}{2}-1}$$</p><p>则有</p><p>$$A(x)&#x3D;A_1(x^2)+xA_2(x^2)$$</p><p>假设$k&lt;\frac{n}{2}$，那么现在要求$A(\omega_n^k)$</p><p>$$A(\omega_n^k)&#x3D;A_1(\omega_n^{2k})+\omega_n^kA_2(\omega_n^{2k})$$</p><p>$$&#x3D;A_1(\omega_{\frac{n}{2}}^{k})+\omega_n^kA_2(\omega_{\frac{n}{2}}^{k})$$</p><p>对于$A(\omega_n^{k+\frac{n}{2}})$</p><p>$$A(\omega_n^{k+\frac{n}{2}})&#x3D;A_1(\omega_n^{2k+n})+\omega_n^{k+\frac{n}{2}}A_2(\omega_n^{2k+n})$$</p><p>$$&#x3D;A_1(\omega_n^{2k}\times\omega_n^n)-\omega_n^kA_2(\omega_n^{2k}\times\omega_n^n)$$</p><p>$$&#x3D;A_1(\omega_n^{2k})-\omega_n^kA_2(\omega_n^{2k})$$</p><p>$$&#x3D;A_1(\omega_{\frac{n}{2}}^{k})-\omega_n^kA_2(\omega_{\frac{n}{2}}^{k})$$</p><p>神奇的事情发生了！注意到，当$k$取遍$[0,\frac{n}{2}-1]$时，$k$和$k+\frac{n}{2}$取遍了$[0,n-1]$。</p><p>这也就意味着，如果我们已经知道了$A_1(x)$和$A_2(x)$在$\omega_{\frac{n}{2}}^0,\omega_{\frac{n}{2}}^1,\dots,\omega_{\frac{n}{2}}^{\frac{n}{2}-1}$处的取值，那么我们就可以在$O(n)$的时间内求得$A(x)$在$\omega_n^0,\omega_n^1,\dots,\omega_n^{n-1}$处的取值。而关于$A_1(x),A_2(x)$的问题又都是相对原问题规模缩小了一半的子问题，所以只要不断的分治下去，而分治的边界就是一个常数项$a_0$。</p><p>该算法的时间复杂度为</p><p>$$T(n)&#x3D;2T(n&#x2F;2)+O(n)&#x3D;O(n\log n)$$</p><p>这就是最常用的$FFT$算法——$Cooley-Tukey$算法。</p><h1 id="快速傅里叶逆变换-IFFT"><a href="#快速傅里叶逆变换-IFFT" class="headerlink" title="快速傅里叶逆变换(IFFT)"></a>快速傅里叶逆变换(IFFT)</h1><p>上面的讨论都是基于点值表示法的，但是在平时的应用中，很少用点值表示法来表示一个多项式。所以考虑将点值表示的多项式转化为系数表示，这个过程同样可以使用快速傅里叶变换，称为<strong>傅里叶逆变换</strong>。</p><p>设$(y_0,y_1,y_2,\dots,y_{n-1})$为$(a_0,a_1,a_2,\dots,a_{n-1})$的傅里叶变换（即点值表示），设有另一个向量$(c_0,c_1,c_2,\dots,c_{n-1})$满足</p><p>$$c_k&#x3D;\sum \limits_{i&#x3D;0}^{n-1}y_i(\omega_n^{-k})^i$$</p><p>即多项式$B(x)&#x3D;y_0+y_1x+y_2x^2+\dots+y_{n-1}x^{n-1}$在$\omega_n^0,\omega_n^{-1},\omega_n^{-2},\dots,\omega_n^{-(n-1)}$处的点值表示。</p><p>下面就是推<del>柿子</del>时间，将上式展开，得到</p><p>$$c_k&#x3D;\sum\limits_{i&#x3D;0}^{n-1}y_i(\omega_n^{-k})^i$$</p><p>$$&#x3D;\sum\limits_{i&#x3D;0}^{n-1}(\sum \limits_{j&#x3D;0}^{n-1} a_j(\omega_n^i)^j)(\omega_n^{-k})^i$$</p><p>$$&#x3D;\sum\limits_{i&#x3D;0}^{n-1}(\sum \limits_{j&#x3D;0}^{n-1} a_j(\omega_n^j)^i)(\omega_n^{-k})^i$$</p><p>$$&#x3D;\sum\limits_{i&#x3D;0}^{n-1}(\sum \limits_{j&#x3D;0}^{n-1} a_j(\omega_n^j)^i(\omega_n^{-k})^i)$$</p><p>$$&#x3D;\sum\limits_{i&#x3D;0}^{n-1}\sum \limits_{j&#x3D;0}^{n-1} a_j(\omega_n^{j-k})^i$$</p><p>$$&#x3D;\sum \limits_{j&#x3D;0}^{n-1} a_j(\sum\limits_{i&#x3D;0}^{n-1}(\omega_n^{j-k})^i)$$</p><p>设$S(x)&#x3D;\sum \limits_{i&#x3D;0}^{n-1}x^i$</p><p>将$\omega_n^k$代入得</p><p>$S(\omega_n^k)&#x3D;1+\omega_n^k+(\omega_n^k)^2+\dots+(\omega_n^k)^{n-1}$</p><p>当$k\neq0$时，两边同时乘上$\omega_n^k$，得</p><p>$\omega_n^kS(\omega_n^k)&#x3D;\omega_n^k+(\omega_n^k)^2+(\omega_n^k)^3+\dots+(\omega_n^k)^n$</p><p>两边相减，整理后得到</p><p>$$\omega_n^kS(\omega_n^k)-S(\omega_n^k)&#x3D;(\omega_n^k)^n-1$$</p><p>$$S(\omega_n^k)&#x3D;\frac{(\omega_n^k)^n-1}{\omega_n^k-1}$$</p><p>分子为$0$，分母不为$0$，所以</p><p>$$S(\omega_n^k)&#x3D;0$$</p><p>当$k&#x3D;0$时，显然$S(\omega_n^k)&#x3D;1$</p><p>继续考虑上面的<del>柿子</del></p><p>$$c_k&#x3D;\sum \limits_{j&#x3D;0}^{n-1} a_j(\sum\limits_{i&#x3D;0}^{n-1}(\omega_n^{j-k})^i)$$</p><p>$$&#x3D;\sum \limits_{j&#x3D;0}^{n-1} a_jS(\omega_n^{j-k})$$</p><p>当$j&#x3D;k$时，$S(\omega_n^{j-k})&#x3D;n$，否则$S(\omega_n^{j-k})&#x3D;0$，即</p><p>$$c_i&#x3D;na_i$$</p><p>$$a_i&#x3D;\frac{1}{n}c_i$$</p><p>所以，使用单位根的倒数代替单位根，再做一次类似快速傅里叶变换的过程，最后将所得的每个数除以$n$，即为傅里叶逆变换的结果。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h2><p>递归实现直接参照上面的结论来进行实现即可，比较直观。</p><p>需要注意的是，不要使用$STL$里的$complex$类，会被卡常数。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ty</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">4e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> Pi = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>);<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Complex</span> &#123;<br><span class="hljs-type">double</span> x, y;<br><span class="hljs-built_in">Complex</span>(<span class="hljs-type">double</span> _x = <span class="hljs-number">0</span>, <span class="hljs-type">double</span> _y = <span class="hljs-number">0</span>) &#123; x = _x, y = _y; &#125;<br>Complex <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Complex &amp;b) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Complex</span>((<span class="hljs-type">double</span>)x + b.x, (<span class="hljs-type">double</span>)y + b.y); &#125;<br>Complex <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> Complex &amp;b) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Complex</span>((<span class="hljs-type">double</span>)x - b.x, (<span class="hljs-type">double</span>)y - b.y); &#125;<br>Complex <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> Complex &amp;b) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Complex</span>((<span class="hljs-type">double</span>)x * b.x - (<span class="hljs-type">double</span>)y * b.y, (<span class="hljs-type">double</span>)x * b.y + (<span class="hljs-type">double</span>)y * b.x); &#125;<br>&#125; a[_], b[_];<br><span class="hljs-type">int</span> N, M;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(<span class="hljs-type">int</span> lim, Complex *a, <span class="hljs-type">int</span> op)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (lim == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>;<br>Complex a1[(lim &gt;&gt; <span class="hljs-number">1</span>) + <span class="hljs-number">5</span>], a2[(lim &gt;&gt; <span class="hljs-number">1</span>) + <span class="hljs-number">5</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; i += <span class="hljs-number">2</span>)<br>a1[i &gt;&gt; <span class="hljs-number">1</span>] = a[i], a2[i &gt;&gt; <span class="hljs-number">1</span>] = a[i + <span class="hljs-number">1</span>];<br><span class="hljs-built_in">fft</span>(lim &gt;&gt; <span class="hljs-number">1</span>, a1, op);<br><span class="hljs-built_in">fft</span>(lim &gt;&gt; <span class="hljs-number">1</span>, a2, op);<br>Complex Wn = <span class="hljs-built_in">Complex</span>(<span class="hljs-built_in">cos</span>(<span class="hljs-number">2.0</span> * Pi / lim), op * <span class="hljs-built_in">sin</span>(<span class="hljs-number">2.0</span> * Pi / lim)); <span class="hljs-comment">// 单位根</span><br>Complex w = <span class="hljs-built_in">Complex</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (lim &gt;&gt; <span class="hljs-number">1</span>); ++i, w = w * Wn) &#123;<br>a[i] = a1[i] + w * a2[i];<br>a[i + (lim &gt;&gt; <span class="hljs-number">1</span>)] = a1[i] - w * a2[i];<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;fft.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;fft.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>N = <span class="hljs-built_in">ty</span>(), M = <span class="hljs-built_in">ty</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= N; ++i) a[i].x = <span class="hljs-built_in">ty</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= M; ++i) b[i].x = <span class="hljs-built_in">ty</span>();<br><span class="hljs-type">int</span> lim = <span class="hljs-number">1</span>; <span class="hljs-keyword">while</span> (lim &lt;= N + M) lim &lt;&lt;= <span class="hljs-number">1</span>;<br><span class="hljs-built_in">fft</span>(lim, a, <span class="hljs-number">1</span>);<br><span class="hljs-built_in">fft</span>(lim, b, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= lim; ++i) a[i] = a[i] * b[i];<br><span class="hljs-built_in">fft</span>(lim, a, <span class="hljs-number">-1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= N + M; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, (<span class="hljs-type">int</span>)(a[i].x / lim + <span class="hljs-number">0.5</span>));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="迭代实现"><a href="#迭代实现" class="headerlink" title="迭代实现"></a>迭代实现</h2><p>递归实现的$FFT$效率不高，实际当中一般用迭代实现。</p><h3 id="二进制翻转"><a href="#二进制翻转" class="headerlink" title="二进制翻转"></a>二进制翻转</h3><p>考虑递归 FFT 分治到边界时，每个数的顺序，及其二进制位。</p><p><img src="https://i.loli.net/2019/12/21/pPKY3WnuSl98GjA.png" alt="1101696-20180212074250859-1560811086.png"></p><p>观察一下原序列和翻转后序列的联系，可以发现翻转后的序列下标其实就是原序列下标的二进制翻转。</p><p>因此对下标进行奇偶性分类其实是没有必要的，只需要$O(n)$求出翻转后的序列，然后不断进行向上合并即可。</p><h3 id="蝴蝶操作"><a href="#蝴蝶操作" class="headerlink" title="蝴蝶操作"></a>蝴蝶操作</h3><p>具体见代码。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ty</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">4e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> Pi = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>);<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Complex</span> &#123;<br><span class="hljs-type">double</span> x, y;<br>Complex <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Complex &amp;b) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> &#123;x + b.x, y + b.y&#125;; &#125;<br>Complex <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> Complex &amp;b) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> &#123;x - b.x, y - b.y&#125;; &#125;<br>Complex <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> Complex &amp;b) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> &#123;x * b.x - y * b.y, x * b.y + y * b.x&#125;; &#125;<br>&#125; a[_], b[_];<br><span class="hljs-type">int</span> N, M, pos[_];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> lim, Complex *a, <span class="hljs-type">int</span> op)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i)<br><span class="hljs-keyword">if</span> (i &lt; pos[i]) <span class="hljs-built_in">swap</span>(a[i], a[pos[i]]);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">2</span>; len &lt;= lim; len &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-type">int</span> mid = len &gt;&gt; <span class="hljs-number">1</span>;<br>Complex Wn = &#123;<span class="hljs-built_in">cos</span>(<span class="hljs-number">2.0</span> * Pi / len), op * <span class="hljs-built_in">sin</span>(<span class="hljs-number">2.0</span> * Pi / len)&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; i += len) &#123;<br>Complex w = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; mid; ++j, w = w * Wn) &#123;<br>Complex x = a[i + j], y = w * a[i + j + mid];<br>a[i + j] = x + y;<br>a[i + j + mid] = x - y;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;fft.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;fft.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>N = <span class="hljs-built_in">ty</span>(), M = <span class="hljs-built_in">ty</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= N; ++i) a[i].x = <span class="hljs-built_in">ty</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= M; ++i) b[i].x = <span class="hljs-built_in">ty</span>();<br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>, lim = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (lim &lt;= N + M) lim &lt;&lt;= <span class="hljs-number">1</span>, ++k;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; ++i) pos[i] = (pos[i &gt;&gt; <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">1</span>) | ((i &amp; <span class="hljs-number">1</span>) &lt;&lt; (k - <span class="hljs-number">1</span>));<br><span class="hljs-built_in">fft</span>(lim, a, <span class="hljs-number">1</span>);<br><span class="hljs-built_in">fft</span>(lim, b, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= lim; ++i) a[i] = a[i] * b[i];<br><span class="hljs-built_in">fft</span>(lim, a, <span class="hljs-number">-1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= N + M; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, (<span class="hljs-type">int</span>)(a[i].x / lim + <span class="hljs-number">0.5</span>));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://oi.men.ci/fft-notes/">FFT 学习笔记 | Menci’s Blog</a></p><p><a href="https://www.cnblogs.com/zwfymqz/p/8244902.html">快速傅里叶变换(FFT)详解</a></p><p><a href="https://www.cnblogs.com/rvalue/p/10120174.html">[学习笔记&amp;教程] 信号, 集合, 多项式, 以及各种卷积性变换 (FFT,NTT,FWT,FMT) - rvalue - 博客园</a></p><p><a href="https://www.matongxue.com/madocs/8.html">如何通俗地解释欧拉公式（e^πi+1&#x3D;0）？</a></p><p><a href="https://baike.baidu.com/item/%E5%A4%8D%E6%95%B0/254365?fr=aladdin">复数（数的概念扩展）_百度百科</a></p>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FFT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【CSP-SJX 2019】T4 散步</title>
    <link href="/2019/12/14/%E3%80%90CSP-SJX-2019%E3%80%91T4-%E6%95%A3%E6%AD%A5/"/>
    <url>/2019/12/14/%E3%80%90CSP-SJX-2019%E3%80%91T4-%E6%95%A3%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p><a href="https://www.luogu.com.cn/problem/P5688">传送门</a></p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="算法1-32pts"><a href="#算法1-32pts" class="headerlink" title="算法1 32pts"></a>算法1 32pts</h2><p>枚举每个时刻，并枚举所有发生的时间，暴力进行更新。发现最多只需要枚举到第 $L$ 个时刻，因为是一个环，所以最多到第L个时刻，所有人就会回到原位。</p><span id="more"></span><h2 id="算法2-52pts"><a href="#算法2-52pts" class="headerlink" title="算法2 52pts"></a>算法2 52pts</h2><p>发现在上面的过程中，并没有必要枚举每个时刻，因为很多时刻都是没有任何事件发生的。容易想到先预处理出距离每个人最近的出口，以及到出口的距离，那么每次取<strong>到出口距离最小</strong>的人，必定从那个出口出去。</p><p>设$rest_i$表示每个出口剩余可以通过的人数，当一个人从某个出口$i$出去后，则$rest_i-1$，那么当一个出口的$rest_i&#x3D;0$时，那么这个出口就没有了存在的意义，可以直接删掉。</p><p>不难想到通过某种数据结构来维护每个出口的前驱和后继，我这里用的是环状链表，当然机房大佬也有用并查集以及$set$实现的。所以先预处理出每个出口的前驱和后继，分别记为$lst_i$和$nxt_i$</p><p>考虑当一个人从出口$i$出去后，那么对于所有原本要从$i$出去的人，逆时针走的人的出口都变成了$nxt_i$，顺时针走的人的出口都变成了$lst_i$。</p><p>于是得到一个做法，用堆维护每个人到离他最近的出口的距离和编号，堆里以距离为第一关键字、人的编号为第二关键字进行排序，每次取出堆顶。若当前记录的出口已经被删除，那么就将关于这个人的新的出口、距离信息插入到堆中；否则将这个人计入到答案的贡献中，并更新出口是否被删除以及前驱$lst_i$和后继$nxt_i$的相关信息。</p><p>因为每个人最坏情况下可能会被插入堆中$n$次，因此时间复杂度是$O(n^2\log n)$</p><h2 id="算法3-100pts"><a href="#算法3-100pts" class="headerlink" title="算法3 100pts"></a>算法3 100pts</h2><p>考虑优化算法2，发现主要的时间都花费在更新每个人到出口的距离信息上</p><p>记出口$i$的位置为$pos_i$。可以发现，当一个出口被删除后，那么所有位置在$(pos_{lst_i},pos_{i}]$之间且逆时针行走的人，其出口都变成了$nxt_i$，且距离的增量都是$pos_{nxt_i}-pos_i$；同样的，对于所有位置在$[pos_i, pos_{nxt_i})$之间的且顺时针行走的人，其出口都变成了$lst_i$，且距离的增量都是$pos_i-pos_{lst_i}$</p><p>于是想到用线段树来维护，进行区间修改，具体实现为：在算法2的基础上，以每个人的位置为关键字进行排序，原来取堆顶的操作改成查询线段树的最小值，而距离的更新则先用二分查找查找出需要更新的位置对应的线段树区间，并按照上述过程进行更新即可。</p><p>至于区分逆时针顺时针行走的人，既可以建立两棵线段树，也可以在按每个人的位置为关键字之前先按找行走方向为关键字进行排序，然后将线段树一分为二。</p><p>具体的实现细节以及技巧可以参照下面的代码：</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ty</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, m, L, ct1, ct2, pos[_], lim[_], nxt[_], lst[_], num[_];<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br><span class="hljs-type">int</span> id, dir, pos, dis, tar;<br><span class="hljs-built_in">node</span>(<span class="hljs-type">int</span> _id = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> _dir = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> _pos = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> _dis = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> _tar = <span class="hljs-number">0</span>) &#123;<br>id = _id, dir = _dir, pos = _pos, dis = _dis, tar = _tar;<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> node &amp;rhs) <span class="hljs-type">const</span> &#123;<br><span class="hljs-keyword">if</span> (dir == rhs.dir) <span class="hljs-keyword">return</span> pos &lt; rhs.pos;<br><span class="hljs-keyword">return</span> dir &lt; rhs.dir;<br>&#125;<br>&#125; sta[_];<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ls (p &lt;&lt; 1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rs (p &lt;&lt; 1 | 1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">data</span> &#123;<br><span class="hljs-type">int</span> dis, tar, id;<br><span class="hljs-built_in">data</span>(<span class="hljs-type">int</span> _dis = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> _tar = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> _id = <span class="hljs-number">0</span>) &#123;<br>dis = _dis, tar = _tar, id = _id;<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> data &amp;rhs) <span class="hljs-type">const</span> &#123;<br><span class="hljs-keyword">if</span> (dis == rhs.dis) <span class="hljs-keyword">return</span> id &lt; rhs.id;<br><span class="hljs-keyword">return</span> dis &lt; rhs.dis;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TAG</span> &#123;<br><span class="hljs-type">int</span> dis, tar;<br><span class="hljs-built_in">TAG</span>(<span class="hljs-type">int</span> _dis = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> _tar = <span class="hljs-number">0</span>) &#123; dis = _dis, tar = _tar; &#125;<br>TAG&amp; <span class="hljs-keyword">operator</span>+=(<span class="hljs-type">const</span> TAG &amp;rhs) &#123;<br>dis += rhs.dis;<br><span class="hljs-keyword">if</span> (rhs.tar) tar = rhs.tar;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SegmentTree</span> &#123;<br>data val[_ &lt;&lt; <span class="hljs-number">2</span>];<br>TAG tag[_ &lt;&lt; <span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> p, TAG x)</span> </span>&#123;<br>val[p].dis += x.dis;<br><span class="hljs-keyword">if</span> (x.tar) val[p].tar = x.tar;<br>tag[p] += x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (tag[p].dis || tag[p].tar) &#123;<br><span class="hljs-built_in">add</span>(ls, tag[p]);<br><span class="hljs-built_in">add</span>(rs, tag[p]);<br>tag[p] = <span class="hljs-built_in">TAG</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> </span>&#123; val[p] = <span class="hljs-built_in">min</span>(val[ls], val[rs]); &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (l == r) &#123;<br>val[p] = <span class="hljs-built_in">data</span>(sta[l].dis, sta[l].tar, sta[l].id);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-built_in">build</span>(ls, l, mid);<br><span class="hljs-built_in">build</span>(rs, mid + <span class="hljs-number">1</span>, r);<br><span class="hljs-built_in">up</span>(p);<br>&#125;<br><span class="hljs-function">data <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (x &lt;= l &amp;&amp; r &lt;= y) <span class="hljs-keyword">return</span> val[p];<br><span class="hljs-built_in">down</span>(p);<br><span class="hljs-keyword">if</span> (y &lt;= mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(ls, l, mid, x, y);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &gt; mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(rs, mid + <span class="hljs-number">1</span>, r, x, y);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(<span class="hljs-built_in">query</span>(ls, l, mid, x, mid), <span class="hljs-built_in">query</span>(rs, mid + <span class="hljs-number">1</span>, r, mid + <span class="hljs-number">1</span>, y));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (l == r) &#123;<br>val[p].dis = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-built_in">down</span>(p);<br><span class="hljs-keyword">if</span> (x &lt;= mid) <span class="hljs-built_in">change</span>(ls, l, mid, x);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">change</span>(rs, mid + <span class="hljs-number">1</span>, r, x);<br><span class="hljs-built_in">up</span>(p);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, TAG z)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (x &lt;= l &amp;&amp; r &lt;= y) &#123;<br><span class="hljs-built_in">add</span>(p, z);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-built_in">down</span>(p);<br><span class="hljs-keyword">if</span> (y &lt;= mid) <span class="hljs-built_in">modify</span>(ls, l, mid, x, y, z);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &gt; mid) <span class="hljs-built_in">modify</span>(rs, mid + <span class="hljs-number">1</span>, r, x, y, z);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">modify</span>(ls, l, mid, x, mid, z), <span class="hljs-built_in">modify</span>(rs, mid + <span class="hljs-number">1</span>, r, mid + <span class="hljs-number">1</span>, y, z);<br><span class="hljs-built_in">up</span>(p);<br>&#125;<br>&#125; tr;<br><br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> ls</span><br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> rs</span><br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> mid</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">getdis</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> dir)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (dir == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span> (pos[x] &lt; pos[y]) <span class="hljs-keyword">return</span> pos[y] - pos[x];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> L - pos[x] + pos[y];<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (pos[x] &gt; pos[y]) <span class="hljs-keyword">return</span> pos[x] - pos[y];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> pos[x] + L - pos[y];<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br><span class="hljs-keyword">return</span> sta[x].pos &gt;= l &amp;&amp; sta[x].pos &lt;= r &amp;&amp; sta[y].pos &gt;= l &amp;&amp; sta[y].pos &lt;= r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> dis, <span class="hljs-type">int</span> tar, <span class="hljs-type">int</span> dir)</span> </span>&#123;<br>node tmp;<br><span class="hljs-type">int</span> L = (dir == <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : ct1 + <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> R = (dir == <span class="hljs-number">0</span>) ? ct1 + <span class="hljs-number">1</span> : n + <span class="hljs-number">1</span>;<br>tmp.dir = dir, tmp.pos = l;<br><span class="hljs-type">int</span> st = <span class="hljs-built_in">lower_bound</span>(sta + L, sta + R, tmp) - sta;<br>tmp.pos = r;<br><span class="hljs-type">int</span> ed = <span class="hljs-built_in">upper_bound</span>(sta + L, sta + R, tmp) - sta - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">judge</span>(st, ed, l, r))<br>tr.<span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, st, ed, <span class="hljs-built_in">TAG</span>(dis, tar));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">update1</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> dis, <span class="hljs-type">int</span> tar, <span class="hljs-type">int</span> dir)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (l &gt; r) &#123;<br><span class="hljs-built_in">modify</span>(l + <span class="hljs-number">1</span>, L, dis, tar, dir);<br><span class="hljs-built_in">modify</span>(<span class="hljs-number">0</span>, r, dis, tar, dir);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-built_in">modify</span>(l + <span class="hljs-number">1</span>, r, dis, tar, dir);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">update2</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> dis, <span class="hljs-type">int</span> tar, <span class="hljs-type">int</span> dir)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (l &gt; r) &#123;<br><span class="hljs-built_in">modify</span>(l, L, dis, tar, dir);<br><span class="hljs-built_in">modify</span>(<span class="hljs-number">0</span>, r - <span class="hljs-number">1</span>, dis, tar, dir);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-built_in">modify</span>(l, r - <span class="hljs-number">1</span>, dis, tar, dir);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;walk.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;walk.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>n = <span class="hljs-built_in">ty</span>(), m = <span class="hljs-built_in">ty</span>(), L = <span class="hljs-built_in">ty</span>();<br>pos[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>, lst[<span class="hljs-number">1</span>] = m, nxt[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= m; ++i) &#123;<br>pos[i] = <span class="hljs-built_in">ty</span>();<br>nxt[i] = i == m ? <span class="hljs-number">1</span> : i + <span class="hljs-number">1</span>;<br>lst[i] = i - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) lim[i] = <span class="hljs-built_in">ty</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-type">int</span> s = <span class="hljs-built_in">ty</span>(), b = <span class="hljs-built_in">ty</span>(), d, t;<br><span class="hljs-keyword">if</span> (s == <span class="hljs-number">0</span>) &#123;<br>++ct1;<br>t = <span class="hljs-built_in">lower_bound</span>(pos + <span class="hljs-number">1</span>, pos + m + <span class="hljs-number">1</span>, b) - pos;<br><span class="hljs-keyword">if</span> (t &gt; m) t = <span class="hljs-number">1</span>, d = L - b;<br><span class="hljs-keyword">else</span> d = pos[t] - b;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>++ct2;<br>t = <span class="hljs-built_in">upper_bound</span>(pos + <span class="hljs-number">1</span>, pos + m + <span class="hljs-number">1</span>, b) - pos;<br>--t;<br>d = b - pos[t];<br>&#125;<br>sta[i] = <span class="hljs-built_in">node</span>(i, s, b, d, t);<br>&#125;<br><span class="hljs-built_in">sort</span>(sta + <span class="hljs-number">1</span>, sta + n + <span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) num[sta[i].id] = i;<br>tr.<span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br><span class="hljs-type">int</span> out = m, pp = n;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (out &amp;&amp; pp) &#123;<br>data x = tr.<span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>, n);<br><span class="hljs-type">int</span> id = x.id, tar = x.tar;<br>tr.<span class="hljs-built_in">change</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, num[id]);<br>ans ^= (<span class="hljs-number">1ll</span> * id * tar);<br>--pp, --lim[tar];<br><span class="hljs-keyword">if</span> (!lim[tar]) &#123;<br><span class="hljs-type">int</span> l = pos[lst[tar]] % L, r = pos[nxt[tar]] % L, now = pos[tar] % L;<br><br><span class="hljs-built_in">update1</span>(l, now, <span class="hljs-built_in">getdis</span>(tar, nxt[tar], <span class="hljs-number">0</span>), nxt[tar], <span class="hljs-number">0</span>);<br><span class="hljs-built_in">update2</span>(now, r, <span class="hljs-built_in">getdis</span>(tar, lst[tar], <span class="hljs-number">1</span>), lst[tar], <span class="hljs-number">1</span>);<br><br>nxt[lst[tar]] = nxt[tar];<br>lst[nxt[tar]] = lst[tar];<br>--out;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线段树</tag>
      
      <tag>NOIP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【CSP-S 2019】D2T2 划分</title>
    <link href="/2019/12/12/%E3%80%90CSP-S-2019%E3%80%91D2T2-%E5%88%92%E5%88%86/"/>
    <url>/2019/12/12/%E3%80%90CSP-S-2019%E3%80%91D2T2-%E5%88%92%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p><a href="https://www.luogu.com.cn/problem/P5665">传送门</a></p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="算法1-12pts"><a href="#算法1-12pts" class="headerlink" title="算法1 12pts"></a>算法1 12pts</h2><p>指数算法随便乱搞。</p><span id="more"></span><h2 id="算法2-36pts"><a href="#算法2-36pts" class="headerlink" title="算法2 36pts"></a>算法2 36pts</h2><p>$O(n^3)$dp。</p><p>设$f_{i,j}$表示以位置$j$结尾，上一个决策点为$j$时的最小值。</p><p>转移也是显而易见的：</p><p>令 $s_i&#x3D;\sum \limits_{j&#x3D;1}^{i} a_j$，即前缀和。</p><p>则 </p><p>$$f_{i,j}&#x3D;f_{j,k}+(s_i-s_j)^2，其中 s_i-s_j \ge s_j-s_k$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">ty</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>(); ll x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">5000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, type;<br>ll A[_], sum[_], f[_][_], ans;<br><br><span class="hljs-keyword">inline</span> ll _2(ll x) &#123; <span class="hljs-keyword">return</span> x * x; &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>n = <span class="hljs-built_in">ty</span>(), type = <span class="hljs-built_in">ty</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>A[i] = <span class="hljs-built_in">ty</span>();<br>sum[i] = sum[i - <span class="hljs-number">1</span>] + A[i];<br><span class="hljs-comment">// cout &lt;&lt; sum[i] &lt;&lt; endl;</span><br>&#125;<br><span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in">sizeof</span>(f));<br>ans = f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; ++j) &#123;<br><span class="hljs-keyword">if</span> (j == <span class="hljs-number">1</span>) f[i][j] = _2(sum[i]);<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt; j; ++k)<br><span class="hljs-keyword">if</span> (sum[i] - sum[j - <span class="hljs-number">1</span>] &gt;= sum[j - <span class="hljs-number">1</span>] - sum[k - <span class="hljs-number">1</span>])<br>f[i][j] = <span class="hljs-built_in">min</span>(f[i][j], f[j - <span class="hljs-number">1</span>][k] + _2(sum[i] - sum[j - <span class="hljs-number">1</span>]));<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) ans = <span class="hljs-built_in">min</span>(ans, f[n][i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="算法3-64pts"><a href="#算法3-64pts" class="headerlink" title="算法3 64pts"></a>算法3 64pts</h2><p>$O(n^2)$dp。这个因为我太蒻了，所以不会写。大概思路就是</p><p>“可以固定$j$，发现在移动$i$的过程中，$k$也在移动，满足一个单调性，然后我们维护一个$f_{j,k}$的最小值就可以了”</p><h2 id="算法4-84-x2F-100pts"><a href="#算法4-84-x2F-100pts" class="headerlink" title="算法4 84&#x2F;100pts"></a>算法4 84&#x2F;100pts</h2><p><del>据说通过打表可以发现</del>，<a href="http://matthew99.blog.uoj.ac/blog/5299">证明链接</a>，当最后一段在<strong>满足有解</strong>的情况下和最小时，答案最优。</p><p>因此可以设$g_i$表示到位置$i$时，在有解的情况下值最小的上一个决策点的位置，即</p><p>$$g_i &#x3D; \max \limits_{j&#x3D;0}^{i-1}j, s.t. s_i-s_j \ge s_j-s_{g_j}$$</p><p>稍微移个项就可以得到</p><p>$$s_i \ge 2s_j-s_{g_j}$$</p><p>显然这是单调的，于是用一个单调队列维护即可。</p><p><strong>Code</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ty</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">5e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, type, a[_], q[_], g[_];<br>ll sum[_], ans;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> j)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-number">2ll</span> * sum[j] - sum[g[j]]; &#125;<br><span class="hljs-keyword">inline</span> ll _2(<span class="hljs-type">const</span> ll &amp;x) &#123; <span class="hljs-keyword">return</span> x * x; &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;divide.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;divide.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>n = <span class="hljs-built_in">ty</span>(), type = <span class="hljs-built_in">ty</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[i] = <span class="hljs-built_in">ty</span>(), sum[i] = sum[i - <span class="hljs-number">1</span>] + a[i];<br><span class="hljs-type">int</span> h = <span class="hljs-number">1</span>, t = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">while</span> (h &lt; t &amp;&amp; <span class="hljs-built_in">calc</span>(q[h + <span class="hljs-number">1</span>]) &lt;= sum[i]) ++h;<br>g[i] = q[h];<br><span class="hljs-keyword">while</span> (h &lt; t &amp;&amp; <span class="hljs-built_in">calc</span>(q[t]) &gt;= <span class="hljs-built_in">calc</span>(i)) --t;<br>q[++t] = i;<br>&#125;<br><span class="hljs-type">int</span> now = n;<br><span class="hljs-keyword">while</span> (now) &#123;<br>ans = ans + _2(sum[now] - sum[g[now]]);<br>now = g[now];<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NOIP</tag>
      
      <tag>单调队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【CSP-S 2019】D2T1 Emiya 家今天的饭</title>
    <link href="/2019/11/19/%E3%80%90CSP-S-2019%E3%80%91D2T1-Emiya-%E5%AE%B6%E4%BB%8A%E5%A4%A9%E7%9A%84%E9%A5%AD/"/>
    <url>/2019/11/19/%E3%80%90CSP-S-2019%E3%80%91D2T1-Emiya-%E5%AE%B6%E4%BB%8A%E5%A4%A9%E7%9A%84%E9%A5%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p><a href="https://www.luogu.org/problem/P5664">传送门</a></p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="算法1-32pts"><a href="#算法1-32pts" class="headerlink" title="算法1 32pts"></a>算法1 32pts</h2><p>爆搜，复杂度$O((m+1)^n)$</p><span id="more"></span><h2 id="算法2-84pts"><a href="#算法2-84pts" class="headerlink" title="算法2 84pts"></a>算法2 84pts</h2><p>裸的dp，复杂度$O(n^3m)$</p><p>首先有一个显然的性质要知道：</p><p>最多只有一种主要食材出现在超过一半的主要食材里。</p><p>接下来考虑如果只有前两个限制条件的情况，那么答案就是</p><p>$$\Pi_{i&#x3D;1}^{n} (sum_i+1) - 1$$</p><p>其中$sum_i &#x3D; \sum \limits_{j&#x3D;1}^m a_{i,j}$，$+1$是因为对于每一行只有选一道菜或者不选这些选择，$-1$是因为要去除一道菜都不选的情况。</p><p>对于第3个限制条件，发现直接做不太好做，考虑容斥，即用总方案数，也就是上面的式子，减去不合法的方案数。</p><p>由最开始的那个性质可以得到一个做法：</p><p>枚举不合法的那一种主要食材，然后进行$dp$。发现我们并不需要知道每一种主要食材具体用在了多少道菜上，只需要知道当前枚举的食材用在了多少道菜，其它的并不影响方案。那么设$f_{i,j,k}$表示前$i$中烹饪方式，选了$j$道菜，其中$k$道的主要食材是枚举的不合法食材。转移分三种情况：令$s$表示当前枚举的不合法食材，</p><ol><li><p>不在这一种烹饪方式中进行选择：$f_{i,j,k}&#x3D;f_{i-1,j,k}$</p></li><li><p>在这种烹饪方式中选择了合法的食材：$f_{i,j,k}&#x3D;(sum_i-a_{i,s}) \times f_{i,j-1,k}$</p></li><li><p>在这种烹饪方式中选择了不合法的食材：$f_{i,j,k}&#x3D;a_{i,s}\times f_{i,j-1,k-1}$</p></li></ol><p>那么不合法的方案数就是</p><p>$$\sum \limits_{k\ge \lfloor \frac{j}{2} \rfloor} f_{n,j,k}$$</p><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">100</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> __ = <span class="hljs-number">2000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, m, A[_][__];<br>ll sum[_], f[_][_ &lt;&lt; <span class="hljs-number">1</span>], tmp, ans = <span class="hljs-number">1</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) &#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;A[i][j]);<br>sum[i] = (sum[i] + A[i][j]) % mod;<br>&#125;<br>ans = ans * (sum[i] + <span class="hljs-number">1</span>) % mod;<br>&#125;<br>ans = (ans - <span class="hljs-number">1</span> + mod) % mod;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= m; ++k) &#123;<br><span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(f));<br>f[<span class="hljs-number">0</span>][n] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = -i + n; j &lt;= i + n; ++j) &#123;<br>f[i][j] = (f[i - <span class="hljs-number">1</span>][j] + f[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] * A[i][k] % mod + f[i - <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] * (sum[i] - A[i][k]) % mod) % mod;<br><span class="hljs-keyword">if</span> (i == n &amp;&amp; j &gt; n) tmp = (tmp + f[i][j]) % mod;<br>&#125;<br>&#125;<br>&#125;<br><br>ans = (ans - tmp + mod) % mod;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="算法三-100pts"><a href="#算法三-100pts" class="headerlink" title="算法三 100pts"></a>算法三 100pts</h2><p>考虑如何对算法二的$dp$进行优化，减少不必要的状态。对限制三进行转化，限制三即为</p><p>$$x\le \lfloor \frac{k}{2} \rfloor$$</p><p>$$2x \le k$$</p><p>$$2x - k \le 0$$</p><p>$$x-(k-x)\le 0$$</p><p>发现并不需要关心使用了食材的菜的具体数量，只需要关心合法与不合法的菜的差值即可，即这个差值与原来差值相同的状态的集合是对应的，那么我们就可以以此为状态进行dp，转移与上面是类似的。<br>唯一要注意的一点是可能出现负数，要加上一个偏移量$n$</p><ol><li><p>不在这一种烹饪方式中进行选择：$f_{i,j}&#x3D;f_{i-1,j}$</p></li><li><p>在这种烹饪方式中选择了合法的食材：$f_{i,j}&#x3D;(sum_i-a_{i,s}) \times f_{i,j+1}$</p></li><li><p>在这种烹饪方式中选择了不合法的食材：$f_{i,j}&#x3D;a_{i,s}\times f_{i,j-1}$</p></li></ol><h3 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">100</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> __ = <span class="hljs-number">2000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, m, A[_][__];<br>ll sum[_], f[_][_ &lt;&lt; <span class="hljs-number">1</span>], tmp, ans = <span class="hljs-number">1</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) &#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;A[i][j]);<br>sum[i] = (sum[i] + A[i][j]) % mod;<br>&#125;<br>ans = ans * (sum[i] + <span class="hljs-number">1</span>) % mod;<br>&#125;<br>ans = (ans - <span class="hljs-number">1</span> + mod) % mod;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= m; ++k) &#123;<br><span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(f));<br>f[<span class="hljs-number">0</span>][n] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = -i + n; j &lt;= i + n; ++j) &#123;<br>f[i][j] = (f[i - <span class="hljs-number">1</span>][j] + f[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] * A[i][k] % mod + f[i - <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] * (sum[i] - A[i][k]) % mod) % mod;<br><span class="hljs-keyword">if</span> (i == n &amp;&amp; j &gt; n) tmp = (tmp + f[i][j]) % mod;<br>&#125;<br>&#125;<br>&#125;<br><br>ans = (ans - tmp + mod) % mod;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>组合数学</tag>
      
      <tag>NOIP</tag>
      
      <tag>线性dp</tag>
      
      <tag>容斥</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim考场配置</title>
    <link href="/2019/11/15/vim%E8%80%83%E5%9C%BA%E9%85%8D%E7%BD%AE/"/>
    <url>/2019/11/15/vim%E8%80%83%E5%9C%BA%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros">syntax on<br><span class="hljs-built_in">set</span> number<br><span class="hljs-built_in">set</span> showmatch<br><span class="hljs-built_in">set</span> autoindent<br><span class="hljs-built_in">set</span> smartindent<br><span class="hljs-built_in">set</span> <span class="hljs-attribute">tabstop</span>=2<br><span class="hljs-built_in">set</span> <span class="hljs-attribute">shiftwidth</span>=2<br><span class="hljs-built_in">set</span> <span class="hljs-attribute">mouse</span>=a<br><span class="hljs-built_in">set</span> autoread<br>map &lt;F5&gt; : call Compile() &lt;CR&gt;<br>func! Compile()<br>  exec <span class="hljs-string">&#x27;w&#x27;</span><br>  exec <span class="hljs-string">&#x27;!g++ % -o -lm -Wall %&lt;&#x27;</span><br>  exec <span class="hljs-string">&#x27;!time ./%&lt;&#x27;</span><br>endfunc<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20191027 hl的CSP模拟考试题解</title>
    <link href="/2019/10/27/20191027-hl%E7%9A%84CSP%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/10/27/20191027-hl%E7%9A%84CSP%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="我-佛-了"><a href="#我-佛-了" class="headerlink" title="我 佛 了"></a>我 佛 了</h2><h2 id="我-不-开-心"><a href="#我-不-开-心" class="headerlink" title="我 不 开 心"></a>我 不 开 心</h2><span id="more"></span><p>看完题后觉得能AK，结果T1没取模挂了30pts，T2被卡成30pts，T3想出结论不会树剖又不知道用倍增怎么维护变成0pts。</p><p>期望得分200pts，实际得分100pts。更让人吐槽的是各种假做法拿到了高分，wz的T2在洛谷上交40pts居然过了！</p><h2 id="T1-朱一旦的枯燥生活"><a href="#T1-朱一旦的枯燥生活" class="headerlink" title="T1 朱一旦的枯燥生活"></a>T1 朱一旦的枯燥生活</h2><p>送分题，答案是</p><p>$$n2^{n-1}$$</p><p>理解方法有很多。</p><p>注意$n \le 10^{18}$，$n$忘了取膜挂了30pts啊啊啊！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br>ll n;<br><br><span class="hljs-function">ll <span class="hljs-title">ksm</span><span class="hljs-params">(ll a, ll b)</span> </span>&#123;<br>  ll ans = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (; b; b &gt;&gt;= <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) ans = ans * a % mod;<br>    a = a * a % mod;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;boredom.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;boredom.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br>  cin &gt;&gt; n;<br>  <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">0</span>) &#123;<br>    cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  ll ans = <span class="hljs-built_in">ksm</span>(<span class="hljs-number">2</span>, n - <span class="hljs-number">1</span>) * n % mod;<br>  cout &lt;&lt; ans &lt;&lt; endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T2-双栈排序"><a href="#T2-双栈排序" class="headerlink" title="T2 双栈排序"></a>T2 双栈排序</h2><p>不想说话，原来喻队博客里的是假做法。</p><p>最后不能直接模拟，弹栈2的时候要先看看栈1能不能弹，这样贪心才能使字典序最小。</p><p>话说搜索90pts是怎么回事啊？不卡的吗！实名diss出题人。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> __ = <span class="hljs-number">1000000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, a[_], minv[_];<br><span class="hljs-type">int</span> tot, head[_], to[__], nxt[__];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  to[++tot] = y;<br>  nxt[tot] = head[x];<br>  head[x] = tot;<br>&#125;<br><br><span class="hljs-type">int</span> vis[_];<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> col)</span> </span>&#123;<br>  vis[x] = col;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (!vis[y]) &#123;<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">dfs</span>(y, <span class="hljs-number">3</span> - col)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (vis[y] == col)<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-type">int</span> now = <span class="hljs-number">1</span>;<br>stack&lt;<span class="hljs-type">int</span>&gt; s[<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">pop</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (s[id].<span class="hljs-built_in">size</span>() &amp;&amp; s[id].<span class="hljs-built_in">top</span>() == now) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, id ? <span class="hljs-string">&#x27;d&#x27;</span> : <span class="hljs-string">&#x27;b&#x27;</span>);<br>    s[id].<span class="hljs-built_in">pop</span>();<br>    ++now;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> id)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (id == <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">pop</span>(<span class="hljs-number">0</span>))<br>      ;<br>  <span class="hljs-keyword">while</span> (s[id].<span class="hljs-built_in">size</span>() &amp;&amp; s[id].<span class="hljs-built_in">top</span>() &lt; x)<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">pop</span>(id)) <span class="hljs-built_in">pop</span>(id ^ <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">if</span> (id == <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">pop</span>(<span class="hljs-number">0</span>))<br>      ;<br>  s[id].<span class="hljs-built_in">push</span>(x);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, id ? <span class="hljs-string">&#x27;c&#x27;</span> : <span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>  minv[n] = a[n], minv[n + <span class="hljs-number">1</span>] = _;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; --i) minv[i] = <span class="hljs-built_in">min</span>(minv[i + <span class="hljs-number">1</span>], a[i]);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>      <span class="hljs-keyword">if</span> (a[i] &lt; a[j] &amp;&amp; a[i] &gt; minv[j]) &#123;<br>        <span class="hljs-built_in">add</span>(i, j);<br>        <span class="hljs-built_in">add</span>(j, i);<br>      &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    <span class="hljs-keyword">if</span> (!vis[i] &amp;&amp; !<span class="hljs-built_in">dfs</span>(i, <span class="hljs-number">1</span>)) &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">push</span>(a[i], vis[i] == <span class="hljs-number">1</span> ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>);<br><br>  <span class="hljs-type">int</span> f = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (f) &#123;<br>    f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">pop</span>(<span class="hljs-number">0</span>)) f = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">pop</span>(<span class="hljs-number">1</span>)) f = <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T3-建设祖国"><a href="#T3-建设祖国" class="headerlink" title="T3 建设祖国"></a>T3 建设祖国</h2><p>我结论想对了啊！但是不知道怎么用倍增维护，树剖又不会写。。。</p><p>结论：</p><ol><li>对于树边，最大值不能超过所有能覆盖它的非树边的最小值。</li><li>对于非树边，最大值不能超过把它加入生成树后所形成的环内的边的最大值。</li></ol><p>直接用倍增维护。</p><p>对于非树边很好维护，直接倍增$lca$找最大值即可。</p><p>对于树边，可以让每一条非树边跳$lca$的过程中，倍增维护一下对所能覆盖的树边取$min$。</p><p>然后考虑一个类似于线段树标记下方的过程，对于每一个点$i$以及倍增的步数$j$，进行以下两个操作：</p><p>$$minx[i][j] &#x3D; min(minx[i][j], minx[i][j+1])$$</p><p>$$minx[f[i][j]][j] &#x3D; min(minx[f[i][j]][j], minx[i][j+1])$$</p><p>具体实现看代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1000000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br><span class="hljs-type">int</span> x, y, z, id;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> node &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> z &lt; a.z; &#125;<br>&#125; e[_];<br>vector&lt;PII&gt; E[_];<br><br><span class="hljs-type">int</span> fa[_], mst[_];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> fa[x] == x ? x : fa[x] = <span class="hljs-built_in">find</span>(fa[x]); &#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">sort</span>(e + <span class="hljs-number">1</span>, e + m + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) fa[i] = i;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br><span class="hljs-type">int</span> fx = <span class="hljs-built_in">find</span>(e[i].x);<br><span class="hljs-type">int</span> fy = <span class="hljs-built_in">find</span>(e[i].y);<br><span class="hljs-keyword">if</span> (fx != fy) &#123;<br>fa[fy] = fx;<br>E[e[i].x].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(e[i].y, e[i].z));<br>E[e[i].y].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(e[i].x, e[i].z));<br>mst[i] = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> dep[_], f[_][<span class="hljs-number">20</span>], len[_][<span class="hljs-number">20</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>queue&lt;<span class="hljs-type">int</span>&gt; q;<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>dep[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>()) &#123;<br><span class="hljs-type">int</span> x = q.<span class="hljs-built_in">front</span>(); q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : E[x]) &#123;<br><span class="hljs-type">int</span> y = p.first, z = p.second;<br><span class="hljs-keyword">if</span> (dep[y]) <span class="hljs-keyword">continue</span>;<br>dep[y] = dep[x] + <span class="hljs-number">1</span>;<br>f[y][<span class="hljs-number">0</span>] = x;<br>len[y][<span class="hljs-number">0</span>] = z;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">18</span>; ++i) &#123;<br>f[y][i] = f[f[y][i - <span class="hljs-number">1</span>]][i - <span class="hljs-number">1</span>];<br>len[y][i] = <span class="hljs-built_in">max</span>(len[y][i - <span class="hljs-number">1</span>], len[f[y][i - <span class="hljs-number">1</span>]][i - <span class="hljs-number">1</span>]);<br>&#125;<br>q.<span class="hljs-built_in">push</span>(y);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> minx[_][<span class="hljs-number">20</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> z)</span> </span>&#123;<br><span class="hljs-type">int</span> dis = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (dep[x] &gt; dep[y]) <span class="hljs-built_in">swap</span>(x, y);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">18</span>; i &gt;= <span class="hljs-number">0</span>; --i)<br><span class="hljs-keyword">if</span> (dep[f[y][i]] &gt;= dep[x]) &#123;<br>dis = <span class="hljs-built_in">max</span>(dis, len[y][i]);<br>minx[y][i] = <span class="hljs-built_in">min</span>(minx[y][i], z);<br>y = f[y][i];<br>&#125;<br><span class="hljs-keyword">if</span> (x == y) <span class="hljs-keyword">return</span> dis;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">18</span>; i &gt;= <span class="hljs-number">0</span>; --i)<br><span class="hljs-keyword">if</span> (f[x][i] != f[y][i]) &#123;<br>dis = <span class="hljs-built_in">max</span>(dis, <span class="hljs-built_in">max</span>(len[x][i], len[y][i]));<br>minx[x][i] = <span class="hljs-built_in">min</span>(minx[x][i], z);<br>minx[y][i] = <span class="hljs-built_in">min</span>(minx[y][i], z);<br>x = f[x][i], y = f[y][i];<br>&#125;<br>minx[x][<span class="hljs-number">0</span>] = <span class="hljs-built_in">min</span>(minx[x][<span class="hljs-number">0</span>], z);<br>minx[y][<span class="hljs-number">0</span>] = <span class="hljs-built_in">min</span>(minx[y][<span class="hljs-number">0</span>], z);<br>dis = <span class="hljs-built_in">max</span>(dis, <span class="hljs-built_in">max</span>(len[x][<span class="hljs-number">0</span>], len[y][<span class="hljs-number">0</span>]));<br><span class="hljs-keyword">return</span> dis;<br>&#125;<br><br><span class="hljs-type">int</span> ans[_];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">memset</span>(minx, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in">sizeof</span>(minx));<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br><span class="hljs-keyword">if</span> (mst[i]) <span class="hljs-keyword">continue</span>;<br>ans[e[i].id] = <span class="hljs-built_in">calc</span>(e[i].x, e[i].y, e[i].z);<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">17</span>; j &gt;= <span class="hljs-number">0</span>; --j)<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>minx[i][j] = <span class="hljs-built_in">min</span>(minx[i][j], minx[i][j + <span class="hljs-number">1</span>]);<br>minx[f[i][j]][j] = <span class="hljs-built_in">min</span>(minx[f[i][j]][j], minx[i][j + <span class="hljs-number">1</span>]);<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br><span class="hljs-keyword">if</span> (!mst[i]) <span class="hljs-keyword">continue</span>;<br><span class="hljs-type">int</span> x = e[i].x, y = e[i].y;<br><span class="hljs-keyword">if</span> (dep[x] &lt; dep[y]) <span class="hljs-built_in">swap</span>(x, y);<br>ans[e[i].id] = minx[x][<span class="hljs-number">0</span>];<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;trump.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;trump.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br><span class="hljs-type">int</span> x, y, z;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);<br>e[i] = (node)&#123; x, y, z, i &#125;;<br>&#125;<br><br><span class="hljs-built_in">kruskal</span>();<br><span class="hljs-built_in">bfs</span>();<br><span class="hljs-built_in">solve</span>();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br><span class="hljs-keyword">if</span> (ans[i] != INF) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans[i]);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1000000000&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>考试</category>
      
      <category>CSP2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>组合数学</tag>
      
      <tag>二分图</tag>
      
      <tag>贪心</tag>
      
      <tag>倍增</tag>
      
      <tag>lca</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[JSOI2011]柠檬 - 斜率优化</title>
    <link href="/2019/10/26/JSOI2011-%E6%9F%A0%E6%AA%AC-%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    <url>/2019/10/26/JSOI2011-%E6%9F%A0%E6%AA%AC-%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>将一个数列分成若干段，从每一段中选定一个数$s_0$，假设这个数有$t$个，这一段价值为$s_0 t^2$，数列的总价值为每一段的价值和，要使最终的总价值最大，求这个总价值。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>首先要知道一个显然的性质，就是每一段的左右端点的贝壳大小一定是相等的，且这一段选定的$s_0$一定是左右端点的贝壳大小。</p><span id="more"></span><p>因为如果左右端点贝壳大小不相等的话，必然有一个端点对答案没有贡献，那么可以让一个端点端点和其它贝壳再构成新的一段，会使得答案更优。</p><p>设$f_i$表示前$i$个位置分成若干段的答案最大是多少，$c_i$表示$i$是相同大小的贝壳中的第几个，那么转移方程很容易可以写出来：</p><p>$$f_i &#x3D; \max \limits_{0&lt;j\le i,s_i&#x3D;s_j} { f_{j-1 + s_i(c_i-c_j+1)^2} }$$</p><p><del>显然</del>这个式子有同时与$i$和$j$相关的项，可以斜率优化</p><p>先将式子展开，把$\max$去掉，$s_i$和$s_j$可以相互替换</p><p>$$f_i &#x3D; f_j-1 + s_i c_i^2 - 2s_i c_i c_j + s_j c_j^2 + 2s_i c_i - 2 s_j c_j + s_i$$</p><p>把只和$i$有关的部分拿出来：$f_i-s_i c_i^2 - 2s_i c_i + s_i$</p><p>把只和$j$有关的部分拿出来：$f_{j-1}+s_j c_j^2 - 2s_j c_j$</p><p>把和$i,j$都有关的部分拿出来：$2s_i c_i c_j$</p><p>把$j$有关的部分放在左边，其余的放在右边，式子就变成了</p><p>$$f_{j-1}+s_j c_j^2 - 2s_j c_j &#x3D; 2s_i c_i c_j + f_i-s_i c_i^2 - 2s_i c_i + s_i$$</p><p>令</p><p>$y &#x3D; f_{j-1}+s_j c_j^2 - 2s_j c_j$</p><p>$k&#x3D;2s_i c_i$</p><p>$x&#x3D;c_j$</p><p>$b&#x3D;f_i-s_i c_i^2 - 2s_i c_i + s_i$</p><p>那么我们就可以将每一个决策看做一个点$(x_j,y_j)$，将每个状态看做一条斜率$2s_i c_i$的直线，每次转移就相当于让斜率为$k_i$的直线经过某个点使得截距最大。</p><p>显然这里需要维护一个上凸壳，因为$x_i$是单调递增的，所以每次决策的最优点在凸壳的最后一个点取到，于是维护一个单调栈，每次转移去栈顶即可。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">100000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> __ = <span class="hljs-number">10000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, tot[__];<br>ll s[_], c[_], f[_];<br>vector&lt;<span class="hljs-type">int</span>&gt; stk[__];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">X</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123; <span class="hljs-keyword">return</span> c[i]; &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">Y</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123; <span class="hljs-keyword">return</span> f[i - <span class="hljs-number">1</span>] + s[i] * c[i] * c[i] - <span class="hljs-number">2</span> * s[i] * c[i]; &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">double</span> <span class="hljs-title">slope</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span> * (<span class="hljs-built_in">Y</span>(i) - <span class="hljs-built_in">Y</span>(j)) / (<span class="hljs-built_in">X</span>(i) - <span class="hljs-built_in">X</span>(j)); &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> </span>&#123; <span class="hljs-keyword">return</span> f[j - <span class="hljs-number">1</span>] + s[i] * (c[i] - c[j] + <span class="hljs-number">1</span>) * (c[i] - c[j] + <span class="hljs-number">1</span>); &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> t1 stk[t][stk[t].size() - 1]</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> t2 stk[t][stk[t].size() - 2]</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>cin &gt;&gt; s[i];<br>c[i] = ++tot[s[i]];<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-type">int</span> t = s[i];<br><span class="hljs-keyword">while</span> (stk[t].<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-built_in">slope</span>(t2, i) &gt;= <span class="hljs-built_in">slope</span>(t2, t1)) stk[t].<span class="hljs-built_in">pop_back</span>();<br>stk[t].<span class="hljs-built_in">push_back</span>(i);<br><span class="hljs-keyword">while</span> (stk[t].<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-built_in">calc</span>(i, t1) &lt;= <span class="hljs-built_in">calc</span>(i, t2)) stk[t].<span class="hljs-built_in">pop_back</span>();<br>f[i] = <span class="hljs-built_in">calc</span>(i, stk[t][stk[t].<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>]);<br>&#125;<br>cout &lt;&lt; f[n] &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>省选</tag>
      
      <tag>斜率优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20191025 CSP模拟联考题解</title>
    <link href="/2019/10/25/20191025-CSP%E6%A8%A1%E6%8B%9F%E8%81%94%E8%80%83%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/10/25/20191025-CSP%E6%A8%A1%E6%8B%9F%E8%81%94%E8%80%83%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p><del>一个月以来第一次爆零祭。</del></p><p>昨天还不自闭，今天就爆零了。。。</p><span id="more"></span><p>这一天天考的，哪里是CSP模拟，明明是<del>IMO</del>。。。天天问方案数，又不要具体方案，智不智障啊。。。</p><p>今天有三分之一的人爆零，只要有分就能进入前60了，震惊！太毒瘤了，然而出题人。。。</p><p><img src="https://i.loli.net/2019/10/25/vrDQU4teLHGS7Xi.png"></p><p><img src="https://i.loli.net/2019/10/25/51h28ruNMSUxXL6.png"></p><p><img src="https://i.loli.net/2019/10/25/QOYUo1paXxzNBjb.png"></p><p><del>你看看这是人说的话吗！</del></p><p>不过话说谢总总是能在恰当的时候说出恰当的话，面对今天大量同学的爆零，她风轻云淡地说：“爆零有什么关系啊，一点关系都没有啊，只要尽力地把这些高质量的题目搞懂就好了。”（好评）</p><h2 id="T1-忧郁"><a href="#T1-忧郁" class="headerlink" title="T1 忧郁"></a>T1 忧郁</h2><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>首先要知道的是，传递忧郁值的过程并不重要，并且传递次数的最大上限是$\frac{n}{1}$。</p><p>考虑如果可以将$n$个人分成两组，每组的和为$0$，那么只需要传递$n-2$次即可。以此类推，原问题就转化成了，将$n$个点分成尽量多的集合，使得每个集合内的点权和为$0$。</p><p>发现$n$很小，只有$24$，考虑状压$dp$，设$f_s$表示集合$s$内的点最多可以分成和为$0$的集合的个数，最直观的转移是直接枚举子集转移即可，但是这样复杂度是$O(3^n)$，显然会炸掉。</p><p>考虑换一种设状态的方法，设$f_s$表示集合$s$内的点，最多只有一个集合不为$0$的可以分成的集合的个数。那么转移只需要枚举集合$s$内的点$t$，显然如果$t$和$s\t$中有一个的点权和为$0$，那么就可以给答案加一。如果$t$为$0$，显然它自己作为那个集合就好了；如果$s\t$为$0$的话，则可以将$t$的忧郁值全部传给$s\t$内的某个点，然后$t$自己构成一个集合。</p><p>然后最后的答案就是$n-f[(i &lt;&lt; n)-1]$</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rg register</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">25</span>;<br><span class="hljs-type">int</span> n, m, lim, val[_], f[<span class="hljs-number">1</span> &lt;&lt; _], sum[<span class="hljs-number">1</span> &lt;&lt; _], lg2[<span class="hljs-number">1</span> &lt;&lt; _];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Max</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a, <span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;b)</span> </span>&#123; a &lt; b ? a = b : <span class="hljs-number">0</span>; &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;gloomy.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;gloomy.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>cin &gt;&gt; n &gt;&gt; m;<br>lim = (<span class="hljs-number">1</span> &lt;&lt; n) - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br><span class="hljs-type">int</span> x, y, z;<br>cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;<br>val[x] += z, val[y] -= z;<br>&#125;<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">24</span>; ++i) lg2[<span class="hljs-number">1</span> &lt;&lt; i] = i;<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= lim; ++i) sum[i] = sum[i - <span class="hljs-built_in">lowbit</span>(i)] + val[lg2[<span class="hljs-built_in">lowbit</span>(i)]];<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= lim; ++i) &#123;<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> j = i; j; ) &#123;<br><span class="hljs-type">int</span> t = <span class="hljs-built_in">lowbit</span>(j); j -= <span class="hljs-built_in">lowbit</span>(j);<br><span class="hljs-built_in">Max</span>(f[i], f[i ^ t] + (!sum[t] || !sum[i ^ t]));<br>&#125;<br>&#125;<br>cout &lt;&lt; n - f[lim] &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T2-枣子"><a href="#T2-枣子" class="headerlink" title="T2 枣子"></a>T2 枣子</h2><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>首先将$a$写成$A^x$的形式，使得$A$不能再被写成任何指数的形式。</p><p>这样$a^{b^c}$就变成了$A^{xb^c}$。</p><p>然后对$xb^c$进行质因数分解，变成$\Pi p_i^{c_i}$。</p><p>然后我们就可以把$xb^c$写成$pq^r$，那么对于每个pi都可以拆出$\lfloor \frac{p_i}{r}\rfloor + 1$种情况，其中$+1$表示的是把$p_i^{c_i}$扔进$A$里面去。</p><p>为什么一定可以这样拆呢？因为对于每个$p_i$，对给定的$r$可能会有剩余，那么剩余的这部分也就是$p$，把$p$直接丢到$A$里面去就好了。</p><p>所以可以枚举$r$，枚举的上界是最大的$c_i$，对于每一个$r$，总的情况数就是$\Pi_{i&#x3D;1}^{k} \lfloor \frac{p_i}{r} \rfloor - 1$，$−1$是因为至少要留一位给$q$。</p><p>最后还要考虑一下$r$自己可以再进行拆成指数形式的情况，这个可以直接预处理出来，用筛筛一下就可以。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><p>这份代码常数挺优秀，跑得挺快。没想到后来还有个跑200多ms的，$tql$。</p><p><img src="https://i.loli.net/2019/10/25/bvG7HjkI3Fl9CT8.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rg register</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">7e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> ll mod = <span class="hljs-number">998244353</span>;<br><br><span class="hljs-type">int</span> a, b, c;<br><span class="hljs-type">int</span> v[<span class="hljs-number">210</span>], p[<span class="hljs-number">210</span>], m;<br>ll f[_];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Max</span><span class="hljs-params">(ll &amp;a, <span class="hljs-type">const</span> ll &amp;b)</span> </span>&#123; a &lt; b ? a = b : <span class="hljs-number">0</span>; &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Mod</span><span class="hljs-params">(ll &amp;a, <span class="hljs-type">const</span> ll &amp;b)</span> </span>&#123; a = a + b - (a + b &gt; mod ? mod : <span class="hljs-number">0</span>); &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>(); ll x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">200</span>; ++i) &#123;<br><span class="hljs-keyword">if</span> (!v[i]) v[i] = i, p[++m] = i;<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) &#123;<br><span class="hljs-keyword">if</span> (p[j] &gt; v[i] || i * p[j] &gt; <span class="hljs-number">200</span>) <span class="hljs-keyword">break</span>;<br>v[i * p[j]] = p[j];<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">20</span>; ++i) &#123;<br>f[i] = <span class="hljs-number">1</span>; <br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> j = <span class="hljs-number">2</span>; j * j &lt;= i; ++j) <span class="hljs-keyword">if</span> (!(i % j)) &#123;<br><span class="hljs-type">int</span> tmp = i, cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!(tmp % j)) tmp /= j, ++cnt;<br><span class="hljs-keyword">if</span> (tmp == <span class="hljs-number">1</span>) f[i] += f[cnt];<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (rg ll i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">7e5</span>; ++i) &#123;<br><span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">20</span>) ++f[i];<br><span class="hljs-keyword">for</span> (rg ll k = i * i, j = <span class="hljs-number">2</span>; k &lt;= <span class="hljs-number">7e5</span>; ++j, k *= i)<br><span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">20</span>) f[k] += f[j];<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i * i &lt;= a; ++i) <span class="hljs-keyword">if</span> (!(a % i)) &#123;<br><span class="hljs-type">int</span> tmp = a, cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!(tmp % i)) tmp /= i, ++cnt;<br><span class="hljs-keyword">if</span> (tmp == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> a = i, cnt;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> pos[_], tot;<br>ll r[_];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-type">int</span> x, ll times)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; p[i] * p[i] &lt;= x; ++i) <span class="hljs-keyword">if</span> (!(x % p[i])) &#123;<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!(x % p[i])) x /= p[i], cnt += times;<br><span class="hljs-keyword">if</span> (!pos[p[i]]) pos[p[i]] = ++tot;<br>r[pos[p[i]]] += cnt;<br>&#125;<br><span class="hljs-keyword">if</span> (x != <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span> (!pos[x]) pos[x] = ++tot;<br>r[pos[x]] += times;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-type">int</span> T = <span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">while</span> (T--) &#123;<br>a = <span class="hljs-built_in">read</span>(), b = <span class="hljs-built_in">read</span>(), c = <span class="hljs-built_in">read</span>();<br><span class="hljs-type">int</span> x = <span class="hljs-built_in">calc</span>(a);<br><br>tot = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">memset</span>(r, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(r));<br><span class="hljs-built_in">memset</span>(pos, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(pos));<br><span class="hljs-built_in">divide</span>(x, <span class="hljs-number">1</span>), <span class="hljs-built_in">divide</span>(b, c);<br>ll lim = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= tot; ++i) <span class="hljs-built_in">Max</span>(lim, r[i]);<br><br>ll ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (rg ll i = <span class="hljs-number">2</span>; i &lt;= lim; ++i) &#123;<br>ll tmp = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= tot; ++j) tmp = tmp * (r[j] / i + <span class="hljs-number">1</span>) % mod;<br>--tmp;<br><span class="hljs-built_in">Mod</span>(ans, tmp * f[i] % mod);<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T3-开关"><a href="#T3-开关" class="headerlink" title="T3 开关"></a>T3 开关</h2><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>首先我们把顺序的限制去掉，最后答案只要除以一个$m!$就行。</p><p>设去掉顺序的限制后的答案为$f_m$，考虑怎么计算。</p><p>因为是异或，所以无论前面$m-1$个怎么选，到$m$的时候总有唯一的序列使之变成合法的状态，也即确定了前$m-1$个序列的话，第$m$个序列也就确定了。</p><p>总的序列一共有$2^n$种，我们从中随便选出$m-1$种，再排序，这样总的情况数就是</p><p>$$\binom{2^n}{m-1}(m-1)!$$</p><p>但是这样可能包含了不合法的情况，也就是第$m$个序列可能会与前$m-1$个序列中的某个序列相同，那么考虑容斥。</p><p>如果把相同的两个序列去掉，由于是异或，那么显然，去掉前后最后得到的都是同一个合法状态（所有灯都关上），这样去掉后就成了$m-2$的子问题。那么我们只需要枚举一下最后一个序列是什么，以及和哪个位置的序列重复了即可。所以情况数为</p><p>$$(2n-m+2)(m-1)f_{m-2}$$</p><p>代码实现中，将$\binom{2^n}{m-1}$这部分，以及阶乘、阶乘逆元、逆元（线性递推）都预处理一下，就可以跑得飞快了。</p><p><img src="https://i.loli.net/2019/10/25/IgjLvu1YirzDy4O.png"></p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> ll mod = <span class="hljs-number">19260817</span>;<br><span class="hljs-type">int</span> n, m, v;<br>ll f[_], fac[_], facinv[_], inv[_], C[_];<br><br><span class="hljs-function">ll <span class="hljs-title">ksm</span><span class="hljs-params">(ll a, ll b)</span> </span>&#123;<br>ll ans = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> ( ; b; b &gt;&gt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) ans = ans * a % mod;<br>a = a * a % mod;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">invx</span><span class="hljs-params">(ll x)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">ksm</span>(x, mod - <span class="hljs-number">2</span>); &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> lim = <span class="hljs-number">1000</span>)</span> </span>&#123;<br>fac[<span class="hljs-number">0</span>] = fac[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= lim; ++i) fac[i] = fac[i - <span class="hljs-number">1</span>] * i % mod;<br>facinv[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>, facinv[lim] = <span class="hljs-built_in">invx</span>(fac[lim]);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = lim - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; --i) facinv[i] = facinv[i + <span class="hljs-number">1</span>] * (i + <span class="hljs-number">1</span>) % mod;<br>inv[<span class="hljs-number">0</span>] = inv[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= lim; ++i) inv[i] = (mod - mod / i) * inv[mod % i] % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;switch.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;switch.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">init</span>();<br><span class="hljs-type">int</span> T; cin &gt;&gt; T;<br><span class="hljs-keyword">while</span> (T--) &#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;v);<br>C[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; ll t = <span class="hljs-built_in">ksm</span>(<span class="hljs-number">2</span>, n);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) C[i] = C[i - <span class="hljs-number">1</span>] * (t - i + <span class="hljs-number">1</span>) % mod * inv[i] % mod;<br>f[<span class="hljs-number">0</span>] = (v &lt;= <span class="hljs-number">0</span>), f[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= m; ++i)<br>f[i] = ((C[i - <span class="hljs-number">1</span>] * fac[i - <span class="hljs-number">1</span>] % mod - (t - i + <span class="hljs-number">2</span>) * (i - <span class="hljs-number">1</span>) % mod * f[i - <span class="hljs-number">2</span>] % mod) + mod) % mod;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, f[m] * facinv[m] % mod);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>考试</category>
      
      <category>CSP2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>状压dp</tag>
      
      <tag>组合数学</tag>
      
      <tag>质因数分解</tag>
      
      <tag>计数dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20191024 CSP模拟联考题解</title>
    <link href="/2019/10/25/20191024-CSP%E6%A8%A1%E6%8B%9F%E8%81%94%E8%80%83%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/10/25/20191024-CSP%E6%A8%A1%E6%8B%9F%E8%81%94%E8%80%83%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>这是一场不自闭的考试。</p><p><img src="https://i.loli.net/2019/10/25/TFvmnI5eBD18Oso.png"></p><span id="more"></span><h2 id="T1-ioday1"><a href="#T1-ioday1" class="headerlink" title="T1 ioday1"></a>T1 ioday1</h2><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>“这是一道送分题。”</p><p>答案为：</p><p>$$\sum \limits_{i &#x3D; 1}^{k} \frac{a_i c_i}{n}$$</p><p>由于期望的线性性，对于每一个选项出现的概率是$\frac{c_i}{n}$，在正解里出现的次数是$a_i$，所以答案如上。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">500000</span> + <span class="hljs-number">10</span>;<br>ll n, k, c[_], a[_];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;ioday1.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;ioday1.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;k);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;c[i]), n += c[i];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;a[i]);<br>  <span class="hljs-type">double</span> ans = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i) ans += <span class="hljs-number">1.0</span> * c[i] / n * a[i];<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.6lf\n&quot;</span>, ans);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T2-paper"><a href="#T2-paper" class="headerlink" title="T2 paper"></a>T2 paper</h2><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>首先，最暴力的$n^2$的$dp$。设$f_i$表示到位置$i$为止的方案数。</p><p>初值$f_0 &#x3D; 1$。对于转移，如果存在一个$k$，使得$p_{k+1}&#x3D;i$，那么$f_i&#x3D;0$；否则，设$d_n$表示正整数$n$不超过$c$的约数个数</p><p>$$f_i&#x3D;\sum_{k&lt;&#x3D;i} d_k f_{i-k}$$</p><p>上面的方程可以改写成</p><p>$$f_i &#x3D; \sum \limits_{k&#x3D;1}^{c} \sum \limits_{q \ge 1,qk \le i} f_{i-qk}$$</p><p>然后，这个这个式子显然是可以进行前缀和优化的。设$g_{i,j}$表示从到位置$i$，每个$j$个位置的$f_x$的和，即</p><p>$$g_{i, j} &#x3D; \sum \limits_{q \ge 0, qj \le i} f_{i-qj}$$</p><p>对于转移，则</p><p>$$g_{i,j} &#x3D; f_i + g_{i-j, j}$$</p><p>$$f_i &#x3D; \sum \limits_{k&#x3D;1}^{c} g_{i-k, k}$$</p><p>然后，一边更新$f_i$，一遍更新$g_{i,j}$，即可做到$O(nc)$的复杂度，拿到$36pts$的好成绩。</p><p>考虑如何优化，上面的式子<del>显然</del>是可以进行矩阵乘法优化的。</p><p>对于答案矩阵，我们只需要记下$f_i$以及对于所有的$1 \le x \le y \le c, g_{i+1-x,y}$的值，就可以求出$f_{i+1}$以及所有的$1 \le x \le y \le c, g_{i+2-x,y}$的值，所以矩阵大小最多只有$\frac{c(c+1)}{2}+1$</p><p>具体的转移矩阵可以自己照着式子推一下，只有两点注意：</p><ol><li><p>发现$f_i$和$g_{i,j}$是相互转移的，对于$g_{i,j}$从$f_i$转移过来的那一部分，直接把$f_i$那一列抄过来即可。</p></li><li><p>对于$f_i&#x3D;0$的情况，只需要把$f_i$那一列的系数全部设为$0$，其它列抄过来的部分以此类推。</p></li></ol><p>这里举一个$c&#x3D;3$时转移矩阵的例子：</p><table><thead><tr><th align="center">$f_i$</th><th align="center">$g_{i,1}$</th><th align="center">$g_{i,2}$</th><th align="center">$g_{i,3}$</th><th align="center">$g_{i-1,2}$</th><th align="center">$g_{i-1,3}$</th><th align="center">$g_{i-2,3}$</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">1</td><td align="center">2</td><td align="center">1</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">2</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">2</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr></tbody></table><p>最后，重载运算符的时候，我没有判断相乘的两个矩阵的大小，导致答案矩阵只有一行也每行都乘了一遍，$T$了好久。。。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">10000</span> + <span class="hljs-number">10</span>;<br>ll n, m, c, p[_];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>, &amp;n, &amp;m, &amp;c);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;p[i]);<br>&#125;<br><br><span class="hljs-keyword">namespace</span> task1 &#123;<br><br><span class="hljs-type">int</span> vis[<span class="hljs-number">20</span>];<br>ll ans;<br>vector&lt;<span class="hljs-type">int</span>&gt; pos;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> now, <span class="hljs-type">int</span> last)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (now == pos.<span class="hljs-built_in">size</span>()) &#123;<br>    <span class="hljs-type">int</span> len = n - last;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= c; ++i)<br>      <span class="hljs-keyword">if</span> (!(len % i)) ans = (ans + <span class="hljs-number">1</span>) % mod;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-built_in">dfs</span>(now + <span class="hljs-number">1</span>, last);<br>  <span class="hljs-type">int</span> len = pos[now] - last;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= c; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (!(len % i)) <span class="hljs-built_in">dfs</span>(now + <span class="hljs-number">1</span>, pos[now]);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) vis[p[i] + <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i)<br>    <span class="hljs-keyword">if</span> (!vis[i]) pos.<span class="hljs-built_in">push_back</span>(i);<br><br>  <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>&#125;<br>&#125;  <span class="hljs-comment">// namespace task1</span><br><br><span class="hljs-function">ll <span class="hljs-title">ksm</span><span class="hljs-params">(ll a, ll b)</span> </span>&#123;<br>  ll ans = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (; b; b &gt;&gt;= <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) ans = ans * a % mod;<br>    a = a * a % mod;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;paper.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;paper.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br>  <span class="hljs-built_in">read</span>();<br>  <span class="hljs-keyword">if</span> (m == <span class="hljs-number">0</span> &amp;&amp; c == <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">ksm</span>(<span class="hljs-number">2ll</span>, n - <span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">10</span>) &#123;<br>    task1::<span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (c == <span class="hljs-number">1</span>) &#123;<br>    ll cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> vis[<span class="hljs-number">1000010</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>      <span class="hljs-keyword">if</span> (!vis[p[i]] &amp;&amp; p[i] &lt; n - <span class="hljs-number">1</span>) &#123;<br>        vis[p[i]] = <span class="hljs-number">1</span>;<br>        ++cnt;<br>      &#125;<br>    cnt = <span class="hljs-built_in">max</span>(n - cnt - <span class="hljs-number">1</span>, <span class="hljs-number">1ll</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">ksm</span>(<span class="hljs-number">2ll</span>, cnt));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T3-ioday2"><a href="#T3-ioday2" class="headerlink" title="T3 ioday2"></a>T3 ioday2</h2><p>$T3$我不会证明，所以直接把题解蒯过来好了，感性理解下，代码照着写就好了。。。</p><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p><img src="https://i.loli.net/2019/10/25/GHyuh1elAOESfKp.png"></p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, ll&gt; PIL;<br><span class="hljs-keyword">typedef</span> pair&lt;ll, <span class="hljs-type">int</span>&gt; PLI;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, vis[_];<br>ll p[_];<br>vector&lt;PIL&gt; E[_];<br>vector&lt;PLI&gt; d, d1;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">input</span><span class="hljs-params">()</span> </span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) cin &gt;&gt; p[i];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br><span class="hljs-type">int</span> x, y; ll z;<br>cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;<br>E[x].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(y, z));<br>E[y].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(x, z));<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> fa, ll s)</span> </span>&#123;<br>d.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(s, x));<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : E[x]) &#123;<br><span class="hljs-type">int</span> y = p.first;<br>ll z = p.second;<br><span class="hljs-keyword">if</span> (y == fa) <span class="hljs-keyword">continue</span>;<br><span class="hljs-built_in">dfs</span>(y, x, s + z);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> fa, ll s)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (vis[x]) d1.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(s, x));<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : E[x]) &#123;<br><span class="hljs-type">int</span> y = p.first;<br>ll z = p.second;<br><span class="hljs-keyword">if</span> (y == fa) <span class="hljs-keyword">continue</span>;<br><span class="hljs-built_in">dfs1</span>(y, x, s + z);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;ioday2.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-comment">//freopen(&quot;ioday2.out&quot;, &quot;w&quot;, stdout);</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">input</span>();<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">sort</span>(d.<span class="hljs-built_in">begin</span>(), d.<span class="hljs-built_in">end</span>());<br>vis[d[<span class="hljs-number">0</span>].second] = <span class="hljs-number">1</span>;<br>ll ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br><span class="hljs-type">int</span> x = d[i].second; vis[x] = <span class="hljs-number">1</span>;<br>d1.<span class="hljs-built_in">clear</span>();<br><span class="hljs-built_in">dfs1</span>(x, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">sort</span>(d1.<span class="hljs-built_in">begin</span>(), d1.<span class="hljs-built_in">end</span>());<br>ll tmp = p[x]; <span class="hljs-type">int</span> f = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> s : d1) &#123;<br><span class="hljs-keyword">if</span> (f) &#123; f = <span class="hljs-number">0</span>; <span class="hljs-keyword">continue</span>; &#125;<br><span class="hljs-type">int</span> y = s.second;<br>ans = (ans + s.first * p[y] % mod * tmp % mod) % mod;<br>tmp = tmp * (<span class="hljs-number">1</span> - p[y] + mod) % mod;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>考试</category>
      
      <category>CSP2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>期望</tag>
      
      <tag>概率</tag>
      
      <tag>矩阵快速幂</tag>
      
      <tag>最小生成树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[NOIP2018]赛道修建 - 贪心 + 二分答案</title>
    <link href="/2019/10/23/NOIP2018-%E8%B5%9B%E9%81%93%E4%BF%AE%E5%BB%BA-%E8%B4%AA%E5%BF%83%E3%80%81%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    <url>/2019/10/23/NOIP2018-%E8%B5%9B%E9%81%93%E4%BF%AE%E5%BB%BA-%E8%B4%AA%E5%BF%83%E3%80%81%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>又是一道咕了好久的题，今天下午终于切了。</p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>$C$城将要举办一系列的赛车比赛。在比赛前，需要在城内修建$m$条赛道。</p><p>$C$城一共有$n$个路口，这些路口编号为$1,2,\dots,n$，有$n-1$条适合于修建赛道的双向通行的道路，每条道路连接着两个路口。其中，第$i$条道路连接的两个路口编号为$a_i$和$b_i$，该道路的长度为$l_i$。借助这$n-1$条道路，从任何一个路口出发都能到达其他所有的路口。</p><span id="more"></span><p>一条赛道是一组互不相同的道路$e_1,e_2,\dots,e_k$，满足可以从某个路口出发，依次经过道路$e_1,e_2,\dots,e_k$（每条道路经过一次，不允许调头）到达另一个路口。一条赛道的长度等于经过的各道路的长度之和。为保证安全，要求每条道路至多被一条赛道经过。</p><p>目前赛道修建的方案尚未确定。你的任务是设计一种赛道修建的方案，使得修建的$m$条赛道中长度最小的赛道长度最大（即$m$条赛道中最短赛道的长度尽可能大）</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>“使得修建的$m$条赛道中长度最小的赛道长度最大”</strong>，显然是一个二分答案。</p><p>所以首先二分答案$mid$，看一下在所有赛道长度大于等于$mid$的情况下，修建的赛道数最大能不能大于等于$m$。</p><p>考虑如何进行$check$，设$g_x$表示去除所有满足条件的路径后，从$x$的子树到$x$最长的路径长度。然后对于每个节点，对传上来的每个$g_x$，贪心地进行选择，如果$g_x$已经大于等于$mid$就直接给$ans+1$，否则从小到大枚举每一条路径，对于每一条路径，选择一条加在一起可以满足条件的长度最小的路径，让他们两两配对。在剩下的路径中，将最长的那一条往上传。这些可以用$multiset$维护，复杂度是$O(n \log^2 n)$的。</p><p>为什么这样做是对的呢？对于一条已经满足条件路径，可以直接对答案贡献$1$，如果让其与其它路径配对，仍然也只能对答案产生$1$的贡献。而剩下的路径中，从小到大枚举贪心进行选择，正确性是显然的，因为如果用一条更长的路径与之配对，显然不如用最小的那条优，如果更小的那条都无法满足当前的路径，那么肯定也无法满足后面的路径。</p><p>最后就是二分答案的上界要设为树的直径，不然就会像我一样人丑常数大，$T$飞。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">50000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">int</span> tot, head[_], to[_ &lt;&lt; <span class="hljs-number">1</span>], edge[_ &lt;&lt; <span class="hljs-number">1</span>], nxt[_ &lt;&lt; <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> z)</span> </span>&#123;<br>  to[++tot] = y;<br>  edge[tot] = z;<br>  nxt[tot] = head[x];<br>  head[x] = tot;<br>&#125;<br><span class="hljs-type">int</span> n, m, ans, d[_];<br>multiset&lt;<span class="hljs-type">int</span>&gt; s;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> fa, <span class="hljs-type">const</span> <span class="hljs-type">int</span> len)</span> </span>&#123;<br>  d[x] = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i];<br>    <span class="hljs-keyword">if</span> (y == fa) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">dfs</span>(y, x, len);<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i], z = edge[i];<br>    <span class="hljs-keyword">if</span> (y == fa) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-keyword">if</span> (d[y] + z &gt;= len)<br>      ++ans;<br>    <span class="hljs-keyword">else</span><br>      s.<span class="hljs-built_in">insert</span>(d[y] + z);<br>  &#125;<br>  <span class="hljs-keyword">while</span> (s.<span class="hljs-built_in">size</span>()) &#123;<br>    <span class="hljs-type">int</span> u = *s.<span class="hljs-built_in">begin</span>();<br>    s.<span class="hljs-built_in">erase</span>(s.<span class="hljs-built_in">begin</span>());<br>    <span class="hljs-keyword">auto</span> p = s.<span class="hljs-built_in">lower_bound</span>(len - u);<br>    <span class="hljs-keyword">if</span> (p == s.<span class="hljs-built_in">end</span>())<br>      d[x] = u;<br>    <span class="hljs-keyword">else</span> &#123;<br>      s.<span class="hljs-built_in">erase</span>(p);<br>      ++ans;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> lim)</span> </span>&#123;<br>  ans = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, lim);<br>  <span class="hljs-keyword">return</span> ans &gt;= m;<br>&#125;<br><br><span class="hljs-type">int</span> upp = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> fa)</span> </span>&#123;<br>  <span class="hljs-type">int</span> max1 = <span class="hljs-number">0</span>, max2 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>    <span class="hljs-type">int</span> y = to[i], z = edge[i];<br>    <span class="hljs-keyword">if</span> (y == fa) <span class="hljs-keyword">continue</span>;<br>    max2 = <span class="hljs-built_in">max</span>(max2, <span class="hljs-built_in">dfs1</span>(y, x) + z);<br>    <span class="hljs-keyword">if</span> (max1 &lt; max2) <span class="hljs-built_in">swap</span>(max1, max2);<br>  &#125;<br>  upp = <span class="hljs-built_in">max</span>(upp, max1 + max2);<br>  <span class="hljs-keyword">return</span> max1;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;P5021.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;P5021.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-type">int</span> l = INF, r;<br>  cin &gt;&gt; n &gt;&gt; m;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>    <span class="hljs-type">int</span> x, y, z;<br>    cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;<br>    <span class="hljs-built_in">add</span>(x, y, z);<br>    <span class="hljs-built_in">add</span>(y, x, z);<br>    l = <span class="hljs-built_in">min</span>(l, z);<br>  &#125;<br>  <span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  r = upp;<br>  <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>    <span class="hljs-type">int</span> mid = (l + r + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid))<br>      l = mid;<br>    <span class="hljs-keyword">else</span><br>      r = mid - <span class="hljs-number">1</span>;<br>  &#125;<br>  cout &lt;&lt; l &lt;&lt; endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>图论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二分</tag>
      
      <tag>贪心</tag>
      
      <tag>NOIP</tag>
      
      <tag>树上差分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[NOIP2017]宝藏 - 状压dp</title>
    <link href="/2019/10/23/NOIP2017-%E5%AE%9D%E8%97%8F-%E7%8A%B6%E5%8E%8Bdp/"/>
    <url>/2019/10/23/NOIP2017-%E5%AE%9D%E8%97%8F-%E7%8A%B6%E5%8E%8Bdp/</url>
    
    <content type="html"><![CDATA[<p>这道题一直打算要做，咕了好久，今天终于切了。接下来是又一道咕了好久的赛道修建。</p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>参与考古挖掘的小明得到了一份藏宝图，藏宝图上标出了$n$个深埋在地下的宝藏屋，也给出了这$n$个宝藏屋之间可供开发的$m$条道路和它们的长度。</p><p>小明决心亲自前往挖掘所有宝藏屋中的宝藏。但是，每个宝藏屋距离地面都很远，也就是说，从地面打通一条到某个宝藏屋的道路是很困难的，而开发宝藏屋之间的道路则相对容易很多。</p><span id="more"></span><p>小明的决心感动了考古挖掘的赞助商，赞助商决定免费赞助他打通一条从地面到某个宝藏屋的通道，通往哪个宝藏屋则由小明来决定。</p><p>在此基础上，小明还需要考虑如何开凿宝藏屋之间的道路。已经开凿出的道路可以任意通行不消耗代价。每开凿出一条新道路，小明就会与考古队一起挖掘出由该条道路所能到达的宝藏屋的宝藏。另外，小明不想开发无用道路，即两个已经被挖掘过的宝藏屋之间的道路无需再开发。</p><p>新开发一条道路的代价是：</p><p>$$\mathrm{L} \times \mathrm{K}$$</p><p>$L$代表这条道路的长度，$K$代表从赞助商帮你打通的宝藏屋到这条道路起点的宝藏屋所经过的宝藏屋的数量（包括赞助商帮你打通的宝藏屋和这条道路起点的宝藏屋） 。</p><p>请你编写程序为小明选定由赞助商打通的宝藏屋和之后开凿的道路，使得工程总代价最小，并输出这个最小值。</p><p><strong>将题意翻译一下：</strong></p><p>求一棵生成树，使得每条边的代价最小，代价的定义是从根到这条边的深度乘以这条边的长度。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>先看数据范围$n \le 12$，一眼状压$dp$。</p><p>那么首先状态里肯定要有一维$S$表示当前的已经打通的点集，但是这样没有办法转移。发现唯一有用的状态就是当前的最深深度，所以设状态$f_{S,i}$表示当前点集为$S$，最大深度为$i$时花费的最小代价。</p><p>对于转移，首先枚举$S$的子集$S_0$，找出在$S$集合不在$S_0$集合的那些点，即$nw&#x3D;S \oplus S_0$，也就是在枚举这一层深度的点，然后找出$nw$与$S_0$之间最短的那些边的长度$len$，转移即可，转移方程为</p><p>$$f_{S,i} &#x3D; \min \limits_{S_0 \subseteq S} { f_{S_0,i-1} + len * i }$$</p><p>这样做为什么是对的呢？对于一个集合$nw$和$S_0$，如果集合$nw$中有的点不是被$S_0$中深度最大的点所连，那么一定有另一个集合$S_1$包含了这些不是被$S_0$中深度最大的点所连的点，那么从$S_1$转移过来的就是最小值，所以不会漏解。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> lowbit(x) x &amp; -x</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">10000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> ll INF = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">int</span> n, m, g[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>], lim, lg[<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">12</span>];<br>ll f[<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">12</span>][<span class="hljs-number">13</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  ll ret = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (; y; y -= <span class="hljs-built_in">lowbit</span>(y)) &#123;<br>    <span class="hljs-type">int</span> to = lg[<span class="hljs-built_in">lowbit</span>(y)] + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> tmp = x, dis = inf;<br>    <span class="hljs-keyword">for</span> (; tmp; tmp -= <span class="hljs-built_in">lowbit</span>(tmp)) &#123;<br>      <span class="hljs-type">int</span> from = lg[<span class="hljs-built_in">lowbit</span>(tmp)] + <span class="hljs-number">1</span>;<br>      dis = <span class="hljs-built_in">min</span>(dis, g[from][to]);<br>    &#125;<br>    ret += dis;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;P3959.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;P3959.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>  lim = (<span class="hljs-number">1</span> &lt;&lt; n) - <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">memset</span>(g, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in">sizeof</span>(g));<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) g[i][i] = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>    <span class="hljs-type">int</span> x, y, z;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);<br>    g[x][y] = g[y][x] = <span class="hljs-built_in">min</span>(g[x][y], z);<br>  &#125;<br>  <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in">sizeof</span>(f));<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) f[<span class="hljs-number">1</span> &lt;&lt; i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>, lg[<span class="hljs-number">1</span> &lt;&lt; i] = i;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= lim; ++i) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = (i - <span class="hljs-number">1</span>) &amp; i; j; j = (j - <span class="hljs-number">1</span>) &amp; i) &#123;<br>      <span class="hljs-type">int</span> k = i ^ j;<br>      ll l = <span class="hljs-built_in">calc</span>(j, k);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> p = <span class="hljs-number">1</span>; p &lt; n; ++p) f[i][p] = <span class="hljs-built_in">min</span>(f[i][p], f[j][p - <span class="hljs-number">1</span>] + l * p);<br>    &#125;<br>  &#125;<br>  ll ans = INF;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) ans = <span class="hljs-built_in">min</span>(ans, f[lim][i]);<br>  cout &lt;&lt; ans &lt;&lt; endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>状压dp</tag>
      
      <tag>NOIP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20191022 CSP模拟联考dayx题解(xx中学)</title>
    <link href="/2019/10/22/20191022-CSP%E6%A8%A1%E6%8B%9F%E8%81%94%E8%80%83dayx%E9%A2%98%E8%A7%A3-xx%E4%B8%AD%E5%AD%A6/"/>
    <url>/2019/10/22/20191022-CSP%E6%A8%A1%E6%8B%9F%E8%81%94%E8%80%83dayx%E9%A2%98%E8%A7%A3-xx%E4%B8%AD%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<p>因为初赛回赣州了几天，所以不知道这是day几，也不知道是哪所中学的题了。</p><p>话说，被自己菜枯了怎么办？</p><span id="more"></span><h2 id="T1-数学题"><a href="#T1-数学题" class="headerlink" title="T1 数学题"></a>T1 数学题</h2><p>这是应该是难度最大的一道题，然后我毅然决然的打完后两题的暴力之后就来肝这道题了。。。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>容易发现，最终的答案与$p$和$q$的指没有关系，只和$k$有关。</p><p>首先$O(k)$计算出$k$的值，方法是：因为$n \le 10^{18}$，把质数表打到$1000$，然后分解质因数到$1000$就可以把$k \ge 3$的情况找出来，然后再判一下$k&#x3D;2,1$就行。</p><p>然后，这就是一题完全背包，设$f_{i,j}$表示当前已经乘到$p^iq^j$的方案数，暴力转移即可，注意枚举状态的顺序。复杂度$O(k^4)$。</p><p>更快的方式是直接打表。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>ll n;<br><span class="hljs-type">int</span> K, vis[<span class="hljs-number">1010</span>], p[<span class="hljs-number">1010</span>], cnt;<br><span class="hljs-comment">// ll f[100][100];</span><br><span class="hljs-type">const</span> ll ans[<span class="hljs-number">25</span>] = &#123;<br>    <span class="hljs-number">0</span>,        <span class="hljs-number">1</span>,         <span class="hljs-number">8</span>,         <span class="hljs-number">30</span>,        <span class="hljs-number">108</span>,        <span class="hljs-number">338</span>,<br>    <span class="hljs-number">1042</span>,     <span class="hljs-number">2997</span>,      <span class="hljs-number">8405</span>,      <span class="hljs-number">22651</span>,     <span class="hljs-number">59520</span>,      <span class="hljs-number">151957</span>,<br>    <span class="hljs-number">379692</span>,   <span class="hljs-number">927621</span>,    <span class="hljs-number">2224234</span>,   <span class="hljs-number">5236585</span>,   <span class="hljs-number">12130779</span>,   <span class="hljs-number">27669592</span>,<br>    <span class="hljs-number">62229989</span>, <span class="hljs-number">138095695</span>, <span class="hljs-number">302673028</span>, <span class="hljs-number">655627974</span>, <span class="hljs-number">1404599866</span>, <span class="hljs-number">2977831388</span>,<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>  ll x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>;<br>    ch = <span class="hljs-built_in">getchar</span>();<br>  &#125;<br>  <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>    x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    ch = <span class="hljs-built_in">getchar</span>();<br>  &#125;<br>  <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">1000</span>; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (!vis[i]) &#123;<br>      vis[i] = i;<br>      p[++cnt] = i;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= cnt; ++j) &#123;<br>      <span class="hljs-keyword">if</span> (p[j] &gt; vis[i] || p[j] &gt; <span class="hljs-number">1000</span> / i) <span class="hljs-keyword">break</span>;<br>      vis[i * p[j]] = p[j];<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/*f[0][0] = 1;</span><br><span class="hljs-comment">  for (int i = 0; i &lt;= 23; ++i) &#123;</span><br><span class="hljs-comment">    for (int j = 0; j &lt;= 23; ++j) &#123;</span><br><span class="hljs-comment">      if (!i &amp;&amp; !j) continue;</span><br><span class="hljs-comment">      for (int k = i; k &lt;= 23; ++k) &#123;</span><br><span class="hljs-comment">        for (int l = j; l &lt;= 23; ++l) &#123;</span><br><span class="hljs-comment">          f[k][l] += f[k - i][l - j];</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">      &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">  &#125;*/</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(ll n)</span> </span>&#123;<br>  <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (ll i = <span class="hljs-number">1</span>; i &lt;= cnt &amp;&amp; p[i] &lt;= n; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (n % p[i] == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">while</span> (n % p[i] == <span class="hljs-number">0</span>) &#123;<br>        ++ans;<br>        n /= p[i];<br>      &#125;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;number.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;number.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><br>  <span class="hljs-built_in">init</span>();<br><br>  <span class="hljs-type">int</span> T = <span class="hljs-built_in">read</span>();<br>  <span class="hljs-keyword">while</span> (T--) &#123;<br>    n = <span class="hljs-built_in">read</span>();<br>    K = <span class="hljs-built_in">calc</span>(n);<br>    <span class="hljs-keyword">if</span> (!K) &#123;<br>      ll q = <span class="hljs-built_in">sqrt</span>(n);<br>      <span class="hljs-keyword">if</span> (q * q == n)<br>        K = <span class="hljs-number">2</span>;<br>      <span class="hljs-keyword">else</span><br>        K = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans[K]);<br>    <span class="hljs-comment">// printf(&quot;%lld\n&quot;, f[K][K] - 1);</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T2-城市"><a href="#T2-城市" class="headerlink" title="T2 城市"></a>T2 城市</h2><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>这道题几乎全场切，真是令人尴尬。</p><p>首先想暴力建边，$n\le 10^5$，边数$O(n^2)$爆炸。</p><p>这时候肯定要考虑优化建边，这种$n^2$的优化建边一般都是边权由某种特殊性质得出，然后<strong>拆点</strong>。</p><p>这里拆点的方法是，对$0~31$的每一个二进制位建立一个虚拟节点$v_j$，然后对于原图的每一个点$u_i$，如果$u_i$在二进制下的第$j$位为$1$，那么就连边$(u_i, v_j, 2^j),(v_j, u_i, 0)$。</p><p>这样，边数就从$O(n^2)$降到了$O(32n)$，跑一遍$Dijkstra$即可。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, ll&gt; PIL;<br><span class="hljs-keyword">typedef</span> pair&lt;ll, <span class="hljs-type">int</span>&gt; PLI;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">100000</span> + <span class="hljs-number">100</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> __ = <span class="hljs-number">1000000</span> + <span class="hljs-number">100</span>;<br><span class="hljs-type">const</span> ll INF = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-type">int</span> n;<br>vector&lt;PIL&gt; E[_];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, ll z)</span> </span>&#123; E[x].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(y, z)); &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(ll x, <span class="hljs-type">int</span> id)</span> </span>&#123;<br>  <span class="hljs-comment">// cout &lt;&lt; x &lt;&lt; endl;</span><br><br>  <span class="hljs-keyword">for</span> (ll i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">32</span>; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (x &amp; (<span class="hljs-number">1</span> &lt;&lt; (i - <span class="hljs-number">1</span>))) &#123;<br>      <span class="hljs-built_in">add</span>(id, n + i, <span class="hljs-number">1ll</span> &lt;&lt; (i - <span class="hljs-number">1</span>)), <span class="hljs-built_in">add</span>(n + i, id, <span class="hljs-number">0</span>);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-type">int</span> vis[_];<br>ll d[_];<br>priority_queue&lt;PLI, vector&lt;PLI&gt;, greater&lt;PLI&gt; &gt; Q;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dij</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in">sizeof</span>(d));<br>  <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(vis));<br>  d[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>  Q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(d[<span class="hljs-number">1</span>], <span class="hljs-number">1</span>));<br>  <span class="hljs-keyword">while</span> (Q.<span class="hljs-built_in">size</span>()) &#123;<br>    <span class="hljs-type">int</span> x = Q.<span class="hljs-built_in">top</span>().second;<br>    Q.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-keyword">if</span> (vis[x]) <span class="hljs-keyword">continue</span>;<br>    vis[x] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : E[x]) &#123;<br>      <span class="hljs-type">int</span> y = p.first;<br>      ll z = p.second;<br>      <span class="hljs-keyword">if</span> (d[y] &gt; d[x] + z) &#123;<br>        d[y] = d[x] + z;<br>        Q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(d[y], y));<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;city.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;city.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-type">int</span> T;<br>  cin &gt;&gt; T;<br>  <span class="hljs-keyword">while</span> (T--) &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>      ll x;<br>      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;x);<br>      <span class="hljs-built_in">addedge</span>(x, i);<br>    &#125;<br><br>    <span class="hljs-built_in">dij</span>();<br><br>    <span class="hljs-keyword">if</span> (d[n] == INF)<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Impossible&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, d[n]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + <span class="hljs-number">32</span>; ++i) E[i].<span class="hljs-built_in">clear</span>();<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T3-好-♂-朋-♂-友"><a href="#T3-好-♂-朋-♂-友" class="headerlink" title="T3 好 ♂ 朋 ♂ 友"></a>T3 好 ♂ 朋 ♂ 友</h2><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>其实这道题在考场上大概有了思路的，但是因为它是$T3$，所以毅然地回去切$T1$了。。。<strong>题目难度与题目顺序无关！</strong></p><p>这道题其实并不难，像这样询问区间里面的区间的题，常用的套路是先将询问离线，然后将询问按照左端点从大到小排序，挂在每个点上。</p><p>然后从大到小枚举左端点，考虑对于每个左端点，能够改变区间或值的点只有$\log n$个（因为二进制下只有$\log n$位），所以对于每个左端点，找出这些能改变区间或值的点，具体实现可以边扫边更新每一位最左边的为$1$的点$last_i$。然后可以知道，左端点固定时，$[last_i,last_{i+1})$之间的点作为右端点时区间或值都是不变的，所以可以用线段树维护右端点区间，对这些区间进行加$1$操作即可。</p><p>然后因为询问是按照左端点从大到小排序，又是从大到小枚举左端点，所以枚举到一个左端点时，上面的询问所包含的合法区间已经全部加入线段树，且所有加入线段树的区间一定都是合法的，所以$ans_i&#x3D;query(q_i.l, q_i.r)$</p><p>另外我写代码的时候调了很久的一个$bug$，在找能改变区间或值的点时，枚举的左端点$i$本身也要加入进去。</p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rg register</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-keyword">namespace</span> IO &#123;<br><span class="hljs-type">char</span> ibuf[(<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">21</span>) + <span class="hljs-number">1</span>], obuf[(<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">21</span>) + <span class="hljs-number">1</span>], st[<span class="hljs-number">11</span>], *iS, *iT,<br>    *oS = obuf, *oT = obuf + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">21</span>);<br><span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">Get</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> (iS == iT ? (iT = (iS = ibuf) + <span class="hljs-built_in">fread</span>(ibuf, <span class="hljs-number">1</span>, (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">21</span>) + <span class="hljs-number">1</span>, stdin),<br>                      (iS == iT ? EOF : *iS++))<br>                   : *iS++);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Flush</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">fwrite</span>(obuf, <span class="hljs-number">1</span>, oS - obuf, stdout), oS = obuf; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Put</span><span class="hljs-params">(<span class="hljs-type">char</span> x)</span> </span>&#123;<br>  *oS++ = x;<br>  <span class="hljs-keyword">if</span> (oS == oT) <span class="hljs-built_in">Flush</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, c = <span class="hljs-built_in">Get</span>();<br>  <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) c = <span class="hljs-built_in">Get</span>();<br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-number">48</span>, c = <span class="hljs-built_in">Get</span>();<br>  <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(ll x)</span> </span>&#123;<br>  <span class="hljs-type">int</span> top = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (!x) <span class="hljs-built_in">Put</span>(<span class="hljs-string">&#x27;0&#x27;</span>);<br>  <span class="hljs-keyword">while</span> (x) st[++top] = (x % <span class="hljs-number">10</span>) + <span class="hljs-number">48</span>, x /= <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">while</span> (top) <span class="hljs-built_in">Put</span>(st[top--]);<br>  <span class="hljs-built_in">Put</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br>&#125;  <span class="hljs-comment">// namespace IO</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> IO;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> __ = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, m, k, s;<br>ll a[_];<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>  <span class="hljs-type">int</span> l, r, id;<br>  <span class="hljs-built_in">node</span>(<span class="hljs-type">int</span> _l = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> _r = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> _id = <span class="hljs-number">0</span>) &#123; l = _l, r = _r, id = _id; &#125;<br>  <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> node &amp;rhs) &#123;<br>    <span class="hljs-keyword">if</span> (l == rhs.l) <span class="hljs-keyword">return</span> r &lt; rhs.r;<br>    <span class="hljs-keyword">return</span> l &lt; rhs.l;<br>  &#125;<br>&#125; q[__];<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ls (p &lt;&lt; 1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rs (p &lt;&lt; 1 | 1)</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ilovesingdancerapbasketball</span> &#123;<br>  ll sum[_ &lt;&lt; <span class="hljs-number">2</span>], tag[_ &lt;&lt; <span class="hljs-number">2</span>], len[_ &lt;&lt; <span class="hljs-number">2</span>];<br>  <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">sing</span><span class="hljs-params">(<span class="hljs-type">int</span> p, ll z)</span> </span>&#123;<br>    tag[p] += z;<br>    sum[p] += z * len[p];<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dance</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tag[p]) &#123;<br>      <span class="hljs-built_in">sing</span>(ls, tag[p]);<br>      <span class="hljs-built_in">sing</span>(rs, tag[p]);<br>      tag[p] = <span class="hljs-number">0</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">rap</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> </span>&#123; sum[p] = sum[ls] + sum[rs]; &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    sum[p] = tag[p] = <span class="hljs-number">0</span>;<br>    len[p] = r - l + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(ls, l, mid);<br>    <span class="hljs-built_in">build</span>(rs, mid + <span class="hljs-number">1</span>, r);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">basketball</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> z)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt;= l &amp;&amp; r &lt;= y) &#123;<br>      <span class="hljs-built_in">sing</span>(p, z);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">dance</span>(p);<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid) <span class="hljs-built_in">basketball</span>(ls, l, mid, x, y, z);<br>    <span class="hljs-keyword">if</span> (y &gt; mid) <span class="hljs-built_in">basketball</span>(rs, mid + <span class="hljs-number">1</span>, r, x, y, z);<br>    <span class="hljs-built_in">rap</span>(p);<br>  &#125;<br>  <span class="hljs-function">ll <span class="hljs-title">practice</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt; r || x &gt; y) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= l &amp;&amp; r &lt;= y) <span class="hljs-keyword">return</span> sum[p];<br>    <span class="hljs-built_in">dance</span>(p);<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (y &lt;= mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">practice</span>(ls, l, mid, x, y);<br>    <span class="hljs-keyword">if</span> (x &gt; mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">practice</span>(rs, mid + <span class="hljs-number">1</span>, r, x, y);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">practice</span>(ls, l, mid, x, mid) + <span class="hljs-built_in">practice</span>(rs, mid + <span class="hljs-number">1</span>, r, mid + <span class="hljs-number">1</span>, y);<br>  &#125;<br>&#125; cxk;<br><br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> ls</span><br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> rs</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>  n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>(), k = <span class="hljs-built_in">read</span>();<br>  <span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i) s |= <span class="hljs-number">1</span> &lt;&lt; (<span class="hljs-built_in">read</span>());<br>  <span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[i] = <span class="hljs-built_in">read</span>();<br>  <span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>    <span class="hljs-type">int</span> l = <span class="hljs-built_in">read</span>(), r = <span class="hljs-built_in">read</span>();<br>    q[i] = <span class="hljs-built_in">node</span>(l, r, i);<br>  &#125;<br>&#125;<br><br><span class="hljs-type">int</span> last[<span class="hljs-number">50</span>];<br>ll ans[__];<br>vector&lt;<span class="hljs-type">int</span>&gt; pos;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">sort</span>(q + <span class="hljs-number">1</span>, q + m + <span class="hljs-number">1</span>);<br>  cxk.<span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>  <span class="hljs-type">int</span> now = m;<br>  <span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; --i) &#123;<br>    pos.<span class="hljs-built_in">clear</span>();<br>    <span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">31</span>; ++j) &#123;<br>      <span class="hljs-keyword">if</span> ((a[i] &gt;&gt; j) &amp; <span class="hljs-number">1</span>) last[j] = i;<br>      <span class="hljs-keyword">if</span> (last[j]) &#123;<br>        pos.<span class="hljs-built_in">push_back</span>(last[j]);<br>      &#125;<br>    &#125;<br>    pos.<span class="hljs-built_in">push_back</span>(i);<br>    <span class="hljs-built_in">sort</span>(pos.<span class="hljs-built_in">begin</span>(), pos.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-built_in">unique</span>(pos.<span class="hljs-built_in">begin</span>(), pos.<span class="hljs-built_in">end</span>()) - pos.<span class="hljs-built_in">begin</span>();<br>    ll tmp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; cnt; ++j) &#123;<br>      tmp |= a[pos[j]];<br>      <span class="hljs-keyword">if</span> ((<span class="hljs-number">1</span> &lt;&lt; (tmp % <span class="hljs-number">10</span>)) &amp; s)<br>        cxk.<span class="hljs-built_in">basketball</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, pos[j], j + <span class="hljs-number">1</span> == cnt ? n : (pos[j + <span class="hljs-number">1</span>] - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (now &amp;&amp; q[now].l == i) &#123;<br>      ans[q[now].id] = cxk.<span class="hljs-built_in">practice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, q[now].l, q[now].r);<br>      --now;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;friend.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;friend.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-built_in">init</span>();<br>  <span class="hljs-built_in">solve</span>();<br><br>  <span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) <span class="hljs-built_in">write</span>(ans[i]);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Flush</span>(), <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>考试</category>
      
      <category>CSP2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线段树</tag>
      
      <tag>树形dp</tag>
      
      <tag>质因数分解</tag>
      
      <tag>优化建边</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[HNOI2012]集合选数 - 状压dp</title>
    <link href="/2019/10/18/HNOI2012-%E9%9B%86%E5%90%88%E9%80%89%E6%95%B0%20-%20%E7%8A%B6%E5%8E%8Bdp/"/>
    <url>/2019/10/18/HNOI2012-%E9%9B%86%E5%90%88%E9%80%89%E6%95%B0%20-%20%E7%8A%B6%E5%8E%8Bdp/</url>
    
    <content type="html"><![CDATA[<p>一道有趣的状压dp题QAQ。</p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>求出${1, 2, 3, 4, n}$的所有满足以下条件的子集：若$x$在该子集中，则$2x$和$3x$不能在该子集中。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>发现直接做好像不太好做，所以一个神奇的做法是构造一个与原命题等价的矩阵，长下面这样：</p><span id="more"></span><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">8</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">6</span> <span class="hljs-number">12</span> <span class="hljs-number">24</span><br><span class="hljs-symbol">9 </span><span class="hljs-number">18</span> <span class="hljs-number">36</span> <span class="hljs-number">72</span><br></code></pre></td></tr></table></figure><p>发现有些数不在矩阵当中，那就再构造一些矩阵。于是每次构造矩阵，状压当前列，枚举下一列。</p><p>注意不要状压行！和状压列的速度天差地别，因为$1\le n\le100000$，所以最多$11$行，$17$列。这样的话一列的状态数只有$2048$，而一行的状态数有$131072$。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1000000001</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> lim = (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">12</span>) - <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> n, f[<span class="hljs-number">20</span>][<span class="hljs-number">300000</span>], g[<span class="hljs-number">5000</span>], num[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>], line, cnt[<span class="hljs-number">20</span>], vis[<span class="hljs-number">100010</span>];<br>ll ans = <span class="hljs-number">1</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">gen</span><span class="hljs-params">(<span class="hljs-type">int</span> m)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">17</span>; ++i) &#123;<br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) num[i][<span class="hljs-number">1</span>] = m;<br><span class="hljs-keyword">else</span> num[i][<span class="hljs-number">1</span>] = num[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] * <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (num[i][<span class="hljs-number">1</span>] &gt; n) <span class="hljs-keyword">break</span>;<br>vis[num[i][<span class="hljs-number">1</span>]] = <span class="hljs-number">1</span>;<br>line = i;<br>cnt[i] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">2</span>; ; ++j) &#123;<br>num[i][j] = num[i][j - <span class="hljs-number">1</span>] * <span class="hljs-number">3</span>;<br><span class="hljs-keyword">if</span> (num[i][j] &gt; n) <span class="hljs-keyword">break</span>;<br>cnt[i] = j;<br>vis[num[i][j]] = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> m)</span> </span>&#123;<br><span class="hljs-built_in">gen</span>(m);<br><span class="hljs-comment">// memset(f, 0, sizeof(f));</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (<span class="hljs-number">1</span> &lt;&lt; cnt[<span class="hljs-number">1</span>]); ++j) f[<span class="hljs-number">1</span>][j] = g[j];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= line; ++i) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (<span class="hljs-number">1</span> &lt;&lt; cnt[i]); ++j)<br><span class="hljs-keyword">if</span> (g[j]) &#123;<br>f[i][j] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; (<span class="hljs-number">1</span> &lt;&lt; cnt[i - <span class="hljs-number">1</span>]); ++k)<br><span class="hljs-keyword">if</span> (g[k] &amp;&amp; !(j &amp; k))<br>f[i][j] = (f[i][j] + f[i - <span class="hljs-number">1</span>][k]) % mod;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> tmp = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (<span class="hljs-number">1</span> &lt;&lt; cnt[line]); ++j)<br>tmp = (tmp + f[line][j]) % mod;<br><span class="hljs-comment">//cout &lt;&lt; m &lt;&lt; &quot; &quot; &lt;&lt; tmp &lt;&lt; endl;</span><br>ans = ans * tmp % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;a.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-comment">//  freopen(&quot;a.out&quot;, &quot;w&quot;, stdout);</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>cin &gt;&gt; n;<br><span class="hljs-comment">// 预处理合法状态</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> s = <span class="hljs-number">0</span>; s &lt;= lim; ++s)<br><span class="hljs-keyword">if</span> (!((s &gt;&gt; <span class="hljs-number">1</span>) &amp; s)) g[s] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br><span class="hljs-keyword">if</span> (!vis[i]) <span class="hljs-built_in">solve</span>(i);<br>cout &lt;&lt; ans &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>状压dp</tag>
      
      <tag>省选</tag>
      
      <tag>构造</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20191016 CSP模拟联考day7题解(杭州二中)</title>
    <link href="/2019/10/18/20191016-CSP%E6%A8%A1%E6%8B%9F%E8%81%94%E8%80%83day7%E9%A2%98%E8%A7%A3-%E6%9D%AD%E5%B7%9E%E4%BA%8C%E4%B8%AD/"/>
    <url>/2019/10/18/20191016-CSP%E6%A8%A1%E6%8B%9F%E8%81%94%E8%80%83day7%E9%A2%98%E8%A7%A3-%E6%9D%AD%E5%B7%9E%E4%BA%8C%E4%B8%AD/</url>
    
    <content type="html"><![CDATA[<h2 id="T1-唱跳"><a href="#T1-唱跳" class="headerlink" title="T1 唱跳"></a>T1 唱跳</h2><p>T1写不出来我真的是zz了。</p><p>把数列分成$x &gt; \lfloor \frac{n}{k} \rfloor$和$x \le \lfloor \frac{n}{k} \rfloor$的两部分进行考虑。</p><span id="more"></span><p>首先，对于$x &gt; \lfloor \frac{n}{k} \rfloor$的部分，它们后继的数没有任何限制，因此对答案的贡献为</p><p>$$(n-\lfloor \frac{n}{k} \rfloor)!$$</p><p>然后，对于$x \le \lfloor \frac{n}{k} \rfloor$的部分，它们后继的数必须$\ge x \times k$，再加上也可以选择后继没有数，即放在最末尾，然后因为对于$x$而言，$\left[x+1,\lfloor \frac{n}{k} \rfloor \right]$这部分的数会占去$\lfloor \frac{n}{k} \rfloor-x$个位置，因此这部分对答案的贡献就是</p><p>$$n-x \times k + 2 - (\lfloor \frac{n}{k} \rfloor-x)$$</p><p>预处理一下阶乘，复杂度$O(n+T\frac{n}{k})$。</p><h2 id="T2-rap"><a href="#T2-rap" class="headerlink" title="T2 rap"></a>T2 rap</h2><p>这道题考验的是选手的分类讨论能力，在这里$sto \text{ } Itst \text{ } orz$！$tql$辣！</p><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>我们可以以一个点的父边被怎样经过为状态进行$dp$，先设以下$4$个$dp$数组：</p><p>（设$fa_i$表示点$i$的父亲）</p><ul><li>$g$：$i \rightarrow$ 子树 $\rightarrow i \rightarrow fa_i$ 的<strong>概率</strong></li><li>$f1$：$fa_i$可走，$i$可走，$i \rightarrow$ 子树，并在子树中某一点停下 人数的<strong>期望</strong></li><li>$f2$：$fa_i$不可走，$i$可走，$i \rightarrow$ 子树，并在子树中某一点停下 人数的<strong>期望</strong></li><li>$f3$：$fa_i$和$i$都不可走，$i \rightarrow$ 子树，并在子树中某一点停下 人数的<strong>期望</strong></li></ul><h3 id="初值"><a href="#初值" class="headerlink" title="初值"></a>初值</h3><p>初值肯定是在叶子节点，因为叶子结点没有儿子，所以$g_x&#x3D;0$，对于剩下的几种$dp$状态的期望，$f1$因为父边可走，因此$f1_x&#x3D;0$，$f2$和$f3$因为父边不可走，因此$f2&#x3D;f3&#x3D;val_x$</p><h3 id="转移："><a href="#转移：" class="headerlink" title="转移："></a>转移：</h3><p>（前方高能！如果看文字说明不懂的话建议自己动手画图）</p><p>设$deg_x$表示节点$x$的度数</p><p>先考虑$g_x$的转移，有以下两种情况：</p><ol><li>走到某一个子节点$y$，再回到$x$，再回到$fa_x$</li><li>走到某一个子节点$y$，再走到$y$的子树，回到$y$，回到$x$，再回到$fa_x$。注意，这时因为$y$被经过两次，所以从$x$回到$fa_x$时，就有一条边不能走了</li></ol><p>因此转移方程为：</p><p>$$g_x &#x3D; \sum \limits_{y \in son_x} \frac{1}{deg_x} \cdot \frac{1}{deg_y} \cdot \frac{1}{deg_x} + \frac{1}{deg_x} \cdot g_y \cdot \frac{1}{deg_x-1}$$</p><p>接下来是$f1$的转移，有以下三种情况：</p><ol><li>从$x$直接走到某个子节点$y$，此时$y$的状态为$f1$</li><li>从$x$走到除$y$以外的其他儿子，再回到$x$，再走到$y$，此时$y$的状态为$f2$<br>其中，这里的<strong>“从$x$走到除$y$以外的其他儿子”</strong>，也分两种情况</li></ol><ul><li>从$x$走到除$y$以外的其他儿子，再回到$x$，此时$x$的所有边依然是可走的</li><li>从$x$走到除$y$以外的其他儿子，再走到它的子树，再回到这个儿子，回到$x$，此时$x$的有一条边不可走</li></ul><ol start="3"><li>从$x$走到$y$，再回到$x$，再走到$y$，此时$y$的状态为$f2$</li></ol><p>因此转移方程为：</p><p>$$f1_x &#x3D; \sum \limits_{y \in son_x} \left[ \frac{1}{deg_x} \cdot f1_y + (\frac{1}{deg_x} \cdot \sum \limits_{t \in son_x,t \neq y} \frac{1}{deg_y} \cdot \frac{1}{deg_x} + \frac{1}{deg_x} \cdot \sum \limits_{t \in son_x,t \neq y} g_t \cdot \frac{1}{deg_x - 1}) \cdot f2_y + \frac{1}{deg_x} \cdot \frac{1}{deg_y} \cdot \frac{1}{deg_x} \cdot f3_y \right]$$</p><p>$f2$的转移和$f1$类似，只是因为父边不能走，度数会减一，在此不再赘述，转移方程为：</p><p>$$f2_x &#x3D; \sum \limits_{y \in son_x} \left[ \frac{1}{deg_x - 1} \cdot f1_y + (\frac{1}{deg_x - 1} \cdot \sum \limits_{t \in son_x,t \neq y} \frac{1}{deg_y} \cdot \frac{1}{deg_x - 1} + \frac{1}{deg_x - 1} \cdot \sum \limits_{t \in son_x,t \neq y} g_t \cdot \frac{1}{deg_x - 2}) \cdot f2_y + \frac{1}{deg_x - 1} \cdot \frac{1}{deg_y} \cdot \frac{1}{deg_x - 1} \cdot f3_y \right]$$</p><p>另外，如果$x$的度数为$2$，如果从点$x$走到儿子$y$以及$y$的子树，再回到$y$回到$x$，那么点$x$就成为了最后一个点，此时转移方程还要加上：</p><p>$$f2_x &#x3D; f2_x + g_y \cdot val_x$$</p><p>最后是$f3$的转移，只有一种情况：</p><p>因为$x$和$fa_x$都不能走了，因此只能直接向子树走，并且不能再回来，因此转移方程就为：</p><p>$$f3_x &#x3D; \frac{1}{deg_x - \left[ \text{x has father} \right]} \sum \limits_{y \in son_x} f2_y$$</p><p>$dfs$进行树上$dp$，最终的答案就为$f2_1$</p><h2 id="T3-篮球"><a href="#T3-篮球" class="headerlink" title="T3 篮球"></a>T3 篮球</h2><p>我是zz，这道题居然背包都没写？？？</p><h3 id="30pts"><a href="#30pts" class="headerlink" title="30pts"></a>30pts</h3><p>直接背包就行了。用$m\sum c_i$的复杂度扔进背包，因为$c_i \le m$，故总复杂度为$O(nm^2)$</p><h3 id="60pts"><a href="#60pts" class="headerlink" title="60pts"></a>60pts</h3><p>首先，需要发现一个性质，最多只有一种物品没有被选完，其他物品要么不选，要么全部选。</p><p>假设若有两种物品没有被选完，设两种物品的最后一个的价格分别是$a$、$b$，不妨设$a &lt; b$，那么，多选一个前一个物品，少选一个后一个物品，一定会使得答案更优。</p><p>所以只需要枚举没有被选完的物品，其他物品整个扔进背包即可。</p><h3 id="90pts"><a href="#90pts" class="headerlink" title="90pts"></a>90pts</h3><p>斜率优化。因为常数太大而挂掉$10pts$。</p><h3 id="100pts"><a href="#100pts" class="headerlink" title="100pts"></a>100pts</h3><p>继续考虑$60pts$的做法，可以搞一个<strong>分治背包</strong>（？？？）。</p><p>每次把物品分成两堆，分别跑背包。合并的时候考虑到最多只有一个物品没有被全部选完，因此就把左边的物品整个扔进右边跑出来的数组，同样的再将右边的物品整个扔进左边跑出来的数组，最后对于每个容量对左右两边取个$min$即可。</p>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>考试</category>
      
      <category>CSP2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>期望dp</tag>
      
      <tag>组合数学</tag>
      
      <tag>背包dp</tag>
      
      <tag>树形dp</tag>
      
      <tag>分治</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20191015 CSP模拟联考day6题解(衡阳八中)</title>
    <link href="/2019/10/15/20191015-CSP%E6%A8%A1%E6%8B%9F%E8%81%94%E8%80%83day6%E9%A2%98%E8%A7%A3-%E8%A1%A1%E9%98%B3%E5%85%AB%E4%B8%AD/"/>
    <url>/2019/10/15/20191015-CSP%E6%A8%A1%E6%8B%9F%E8%81%94%E8%80%83day6%E9%A2%98%E8%A7%A3-%E8%A1%A1%E9%98%B3%E5%85%AB%E4%B8%AD/</url>
    
    <content type="html"><![CDATA[<p>因为今天的题目很快就落实完了，所以我决定来更一下题解QAQ。</p><h2 id="T1-Coins"><a href="#T1-Coins" class="headerlink" title="T1 Coins"></a>T1 Coins</h2><p>好吧，并不想写呢。咕了。</p><p>考试的时候忘记把质数表从$1e6$改回$1e5$所以T了，然后又忘记判大于等于$2$，$50pts$挂成$15pts$。</p><span id="more"></span><p><img src="https://i.loli.net/2019/10/15/lVnycEpihOsT6jt.png"></p><p>具体实现就是将答案离线，枚举每一个位置，因为前面证明了枚举到每一个位置的时候，这个数一定是当前剩下的最小质数，所以就把后面含有这个质因子的数全部筛掉就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> ll oo = <span class="hljs-number">1e18</span>;<br>ll n, q, num[_], ans[_];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-type">int</span> f = <span class="hljs-number">1</span>, x = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br>  <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br>  <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;coins.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;coins.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-comment">// fill(ans + 1, ans + _, oo);</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= _ - <span class="hljs-number">10</span>; ++i) num[i] = ans[i] = <span class="hljs-number">1ll</span> * i * i + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= _ - <span class="hljs-number">10</span>; ++i) &#123;<br>    ll x = num[i];<br>    <span class="hljs-keyword">if</span> (num[i] != <span class="hljs-number">1ll</span>) &#123;<br>      <span class="hljs-keyword">for</span> (ll j = i; j &lt;= _ - <span class="hljs-number">10</span>; j += x) &#123;<br>        <span class="hljs-keyword">while</span> (num[j] % x == <span class="hljs-number">0</span>) num[j] /= x;<br>        ans[j] = <span class="hljs-built_in">min</span>(ans[j], x);<br>      &#125;<br>    &#125;<br>  &#125;<br>  q = <span class="hljs-built_in">read</span>();<br>  <span class="hljs-keyword">while</span> (q--) &#123;<br>    n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">if</span> (ans[n] == <span class="hljs-number">1ll</span> * n * n + <span class="hljs-number">1</span>)<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld %lld\n&quot;</span>, ans[n], (<span class="hljs-number">1ll</span> * n * n + <span class="hljs-number">1</span>) / ans[n]);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T2-hby的旅游之都"><a href="#T2-hby的旅游之都" class="headerlink" title="T2 hby的旅游之都"></a>T2 hby的旅游之都</h2><p><img src="https://i.loli.net/2019/10/15/gSmUuzlPTOCyrtV.png"></p><p>出题人出来挨打！</p><p>本来想试试我第一次考场上写随机化能拿多少分的，结果就出锅了。话说$xzz$的随机化因为数据是随机化所以水过了呢，不过显然我的随机化没这么高级。</p><p>来讲正解，这道题正确的题面应该是给边染色。那么一看数据范围$n\le100$就很容易了。算了，我不想打了。注意一下要用拓扑序就好。</p><p><img src="https://i.loli.net/2019/10/15/tm4lsWA8oL16ZnG.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; P;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">50000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> __ = <span class="hljs-number">200000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> col[<span class="hljs-number">3</span>] = &#123;<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>&#125;;<br><span class="hljs-type">int</span> n, m, deg[_], pos[_], stk[_], cnt, ans[__];<br>vector&lt;P&gt; E[_];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>  cin &gt;&gt; n &gt;&gt; m;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>    <span class="hljs-type">int</span> x, y;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);<br>    E[x].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(y, i));<br>    ++deg[y];<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">topsort</span><span class="hljs-params">()</span> </span>&#123;<br>  queue&lt;<span class="hljs-type">int</span>&gt; q;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    <span class="hljs-keyword">if</span> (!deg[i]) q.<span class="hljs-built_in">push</span>(i);<br>  <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>()) &#123;<br>    <span class="hljs-type">int</span> x = q.<span class="hljs-built_in">front</span>();<br>    q.<span class="hljs-built_in">pop</span>();<br>    stk[++cnt] = x;<br>    pos[x] = cnt;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> y : E[x]) &#123;<br>      <span class="hljs-keyword">if</span> (--deg[y.first] == <span class="hljs-number">0</span>) q.<span class="hljs-built_in">push</span>(y.first);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;travel.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;travel.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-built_in">read</span>();<br>  <span class="hljs-built_in">topsort</span>();<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : E[i]) &#123;<br>      <span class="hljs-type">int</span> id = p.second, x = pos[i], y = pos[p.first], c = <span class="hljs-number">-1</span>;<br>      <span class="hljs-keyword">while</span> (x != y) x /= <span class="hljs-number">42</span>, y /= <span class="hljs-number">42</span>, ++c;<br>      ans[id] = c;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>, col[ans[i]]);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T3-键盘游戏"><a href="#T3-键盘游戏" class="headerlink" title="T3 键盘游戏"></a>T3 键盘游戏</h2><p>首先，这里的最优策略并不是指每次扔掉自己队列里面最不优的。</p><p>考虑状压$dp$怎么写，设$f_S$表示在局面$S$下的最终结果，那么显然，当前操作的人不会把其中最优的给扔掉，因此就会从除了扔掉最优的那一种情况之外的其它情况转移过来。</p><p>然而事实上，我们并不需要真的执行状压$dp$的过程，考虑每次转移的时候，当前操作的人一定不会从扔掉自己最优的那个状态转移过来，那么考虑，如果从最优的与其它组合的状态转移过来，那么答案就是最优的那个，如果从其它组合的状态转移过来，也无论如何不会使最劣的那个成为答案。所以在每次转移的时候，就把当前操作的人的队列中最劣的那一个排除在了答案之外，这样操作$n-1$轮，就得到了答案。</p><p>接下来对于如何找出有多少种先手的第一步取法能得到最优答案（在最优策略下，一旦第一步确定，那么结果就确定了）。我们可以枚举先手第一步选的键盘，然后再用上面的方法跑$n-2$轮即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ri register int</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>  <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>;<br>    ch = <span class="hljs-built_in">getchar</span>();<br>  &#125;<br>  <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>    x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    ch = <span class="hljs-built_in">getchar</span>();<br>  &#125;<br>  <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> _ = <span class="hljs-number">100</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, a[<span class="hljs-number">2</span>][_], vis[_];<br><span class="hljs-type">int</span> ans, Ans[_], cnt;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;keybroad.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;keybroad.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  n = <span class="hljs-built_in">read</span>();<br>  <span class="hljs-keyword">for</span> (ri i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[<span class="hljs-number">0</span>][i] = <span class="hljs-built_in">read</span>();<br>  <span class="hljs-keyword">for</span> (ri i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[<span class="hljs-number">1</span>][i] = <span class="hljs-built_in">read</span>();<br><br>  <span class="hljs-type">int</span> now = n &amp; <span class="hljs-number">1</span>, m = n;<br>  <span class="hljs-keyword">while</span> (--m) &#123;<br>    <span class="hljs-keyword">for</span> (ri i = n; i; --i)<br>      <span class="hljs-keyword">if</span> (!vis[a[now][i]]) &#123;<br>        vis[a[now][i]] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    now ^= <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (ri i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    <span class="hljs-keyword">if</span> (!vis[i]) &#123;<br>      ans = i;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br><br>  <span class="hljs-keyword">for</span> (ri i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(vis));<br>    vis[i] = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> tmp;<br>    now = n &amp; <span class="hljs-number">1</span>, m = n - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (--m) &#123;<br>      <span class="hljs-keyword">for</span> (ri i = n; i; --i)<br>        <span class="hljs-keyword">if</span> (!vis[a[now][i]]) &#123;<br>          vis[a[now][i]] = <span class="hljs-number">1</span>;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      now ^= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (ri i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>      <span class="hljs-keyword">if</span> (!vis[i]) &#123;<br>        tmp = i;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    <span class="hljs-keyword">if</span> (tmp == ans) Ans[++cnt] = i;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, cnt);<br>  <span class="hljs-keyword">for</span> (ri i = <span class="hljs-number">1</span>; i &lt;= cnt; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, Ans[i]);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>考试</category>
      
      <category>CSP2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博弈论</tag>
      
      <tag>线性筛</tag>
      
      <tag>拓扑排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20191014 CSP模拟联考day5题解(华东师范大学第二附属中学)</title>
    <link href="/2019/10/14/20191014-CSP%E6%A8%A1%E6%8B%9F%E8%81%94%E8%80%83day5%E9%A2%98%E8%A7%A3-%E5%8D%8E%E4%B8%9C%E5%B8%88%E8%8C%83%E5%A4%A7%E5%AD%A6%E7%AC%AC%E4%BA%8C%E9%99%84%E5%B1%9E%E4%B8%AD%E5%AD%A6/"/>
    <url>/2019/10/14/20191014-CSP%E6%A8%A1%E6%8B%9F%E8%81%94%E8%80%83day5%E9%A2%98%E8%A7%A3-%E5%8D%8E%E4%B8%9C%E5%B8%88%E8%8C%83%E5%A4%A7%E5%AD%A6%E7%AC%AC%E4%BA%8C%E9%99%84%E5%B1%9E%E4%B8%AD%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<p>再见！</p><p><img src="https://i.loli.net/2019/10/14/mj4fyY6Oa1FK7QD.png"></p><p>看到第一题以为终于有一天正常的题目，原来T1只是“为了平衡T3难度”。。。</p>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>考试</category>
      
      <category>CSP2019</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20191011 CSP模拟联考day4题解(南京外国语学校)</title>
    <link href="/2019/10/13/20191011-CSP%E6%A8%A1%E6%8B%9F%E8%81%94%E8%80%83day4%E9%A2%98%E8%A7%A3-%E5%8D%97%E4%BA%AC%E5%A4%96%E5%9B%BD%E8%AF%AD%E5%AD%A6%E6%A0%A1/"/>
    <url>/2019/10/13/20191011-CSP%E6%A8%A1%E6%8B%9F%E8%81%94%E8%80%83day4%E9%A2%98%E8%A7%A3-%E5%8D%97%E4%BA%AC%E5%A4%96%E5%9B%BD%E8%AF%AD%E5%AD%A6%E6%A0%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="T1-math"><a href="#T1-math" class="headerlink" title="T1 math"></a>T1 math</h2><p>毒瘤的构造题，还没写，先咕着。</p><span id="more"></span><h2 id="T2-digit"><a href="#T2-digit" class="headerlink" title="T2 digit"></a>T2 digit</h2><p>通过打表以及数据范围是 $10^{12}$ 可以发现，当$k&gt;n$时，$S(n,k)&#x3D;n$；$k \le \sqrt{n}$时，可以暴力算；$\sqrt{n} &lt; k \le n$时，$S(n,k)$一定只有两位，且对于每一个不同的十位，个位都是一个等差数列，于是可以进行类似数论分块的操作进行统计答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>ll n, k, x;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>    ll f = <span class="hljs-number">1</span>, x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>        <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>)<br>            f = <span class="hljs-number">-1</span>;<br>        ch = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>        x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        ch = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">calc</span><span class="hljs-params">(ll n, ll k)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (; n; n /= k)<br>        ret += n % k;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;digit.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;digit.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    ll T = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        ll ans = <span class="hljs-number">0</span>;<br>        n = <span class="hljs-built_in">read</span>(), k = <span class="hljs-built_in">read</span>(), x = <span class="hljs-built_in">read</span>();<br>        ll sqt = <span class="hljs-built_in">sqrt</span>(n);<br>        <span class="hljs-keyword">for</span> (ll i = <span class="hljs-number">2</span>; i &lt;= sqt &amp;&amp; i &lt;= k; ++i)<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">calc</span>(n, i) &lt;= x)<br>                ++ans;<br>        <span class="hljs-keyword">for</span> (ll i = sqt + <span class="hljs-number">1</span>, j; i &lt;= k &amp;&amp; i &lt;= n; i = j + <span class="hljs-number">1</span>) &#123;<br>            j = <span class="hljs-built_in">min</span>(k, n / (n / i));<br>            <span class="hljs-keyword">if</span> (i == j) &#123;<br>                <span class="hljs-keyword">if</span> ((n / i) + (n % i) &lt;= x)<br>                    ++ans;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ll nx = n % i, tx = n % (i + <span class="hljs-number">1</span>), delta = nx - tx;<br>                ll maxx = <span class="hljs-built_in">min</span>(nx, x - n / i), ed = nx - delta * (j - i);<br>                ans += <span class="hljs-built_in">max</span>((maxx - ed + delta) / delta, <span class="hljs-number">0ll</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (k &gt; n &amp;&amp; x &gt;= n)<br>            ans += k - n;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T3-interval"><a href="#T3-interval" class="headerlink" title="T3 interval"></a>T3 interval</h2><p>先二分答案$k$，考虑如何进行$check$。</p><p>考虑贪心的做法，我们如何选择最优策略，假如已经确定了前$i-1$个位置应该放什么区间，对于剩下的每个区间维护一个危险值，表示这个区间必须在哪个位置之前放下，那么在第$i$个位置能放的区间一定是满足危险值在$[i,t]$之间的区间，其中$t$是一个临界危险值，也就是如果将危险值大于$t$的区间放在第$i$个位置，那么答案就会不合法。在满足危险值的区间中，我们贪心地选择右端点最靠左的，这样才能对后面区间的限制最小。</p><p>对于具体的实现，先维护两棵线段树，其中一棵以$ddl$为下标，维护到前$i$个位置的空位，以及它的最小值以及最小值所在的位置；另一棵以区间的编号为下标，维护到每一个位置为止时右端点最靠左的区间。</p><p>然后考虑$check$函数的写法，枚举数轴的每个位置，对于每个位置$i$，在线段树$1$上查询位置$i$到$n$间空位的最小值，如果这个最小值为$0$，就只能取到这个位置，如果不为$0$，就表明可以随便取（我们把所有被更新了ddl的区间都挂在对应ddl上）。接着，记录一个$pos[t]$表示到$ddl$为$t$时，可选的区间的编号到什么位置，因为可以发现，对于每一个$ddl$来说，其可选的区间一定是编号连续的几个区间，且递增；那么在线段树$2$上查询可选区间中右端点最靠左的。</p><p>如果查询到的区间的$ddl$已经小于$i$，那么就说明当前答案不合法。</p><p>最后，每在一个位置$i$选择一个区间，就更新一下空位的情况，具体来说就是在线段树1上给$ddl[x]$到$n$加$1$，$i$到$n$减$1$，然后在线段树2上把这个区间删除，也就是将值赋值正无穷即可。然后更新一下新相交的集合，维护$ddl$以及空位情况。</p><p>还有一些小细节，首先是$pos[i]$一开始都初始化为$n$，然后$ddl[i]$都初始化为$n+1$，因为这样一开始就会使所有区间进入候选集合，但是这样并不妨碍，因为我们区间是按照左端点排序的，所以右端点最靠左的区间一定是合法的。</p><p>最后就是一个bug卡了我好久，build函数里面忘了初始化$tag$，因为是多组数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br>    <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br>    <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; P;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> l, r;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> node&amp; rhs) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> l &lt; rhs.l;<br>    &#125;<br>&#125; inv[N];<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ls (p &lt;&lt; 1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rs (p &lt;&lt; 1 | 1)</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SegmentTree</span> &#123;<br>    <span class="hljs-type">int</span> val[N &lt;&lt; <span class="hljs-number">2</span>], pos[N &lt;&lt; <span class="hljs-number">2</span>], tag[N &lt;&lt; <span class="hljs-number">2</span>];<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function">    </span>&#123;<br>        val[p] = <span class="hljs-built_in">min</span>(val[ls], val[rs]);<br>        pos[p] = (val[p] == val[ls]) ? pos[ls] : pos[rs];<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        val[p] += v;<br>        tag[p] += v;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (tag[p]) &#123;<br>            <span class="hljs-built_in">add</span>(ls, tag[p]);<br>            <span class="hljs-built_in">add</span>(rs, tag[p]);<br>            tag[p] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function">P <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l == x &amp;&amp; r == y)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_pair</span>(val[p], pos[p]);<br>        <span class="hljs-built_in">down</span>(p);<br>        <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (y &lt;= mid)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(ls, l, mid, x, y);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &gt; mid)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(rs, mid + <span class="hljs-number">1</span>, r, x, y);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(<span class="hljs-built_in">query</span>(ls, l, mid, x, mid), <span class="hljs-built_in">query</span>(rs, mid + <span class="hljs-number">1</span>, r, mid + <span class="hljs-number">1</span>, y));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l == x &amp;&amp; r == y) &#123;<br>            <span class="hljs-built_in">add</span>(p, v);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-built_in">down</span>(p);<br>        <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (y &lt;= mid)<br>            <span class="hljs-built_in">modify</span>(ls, l, mid, x, y, v);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &gt; mid)<br>            <span class="hljs-built_in">modify</span>(rs, mid + <span class="hljs-number">1</span>, r, x, y, v);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">modify</span>(ls, l, mid, x, mid, v), <span class="hljs-built_in">modify</span>(rs, mid + <span class="hljs-number">1</span>, r, mid + <span class="hljs-number">1</span>, y, v);<br>        <span class="hljs-built_in">up</span>(p);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l == r) &#123;<br>            val[p] = v;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-built_in">down</span>(p);<br>        <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (x &lt;= mid)<br>            <span class="hljs-built_in">insert</span>(ls, l, mid, x, v);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">insert</span>(rs, mid + <span class="hljs-number">1</span>, r, x, v);<br>        <span class="hljs-built_in">up</span>(p);<br>    &#125;<br>&#125; t1, t2;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build1</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    t1.tag[p] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        t1.val[p] = t1.pos[p] = l;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build1</span>(ls, l, mid);<br>    <span class="hljs-built_in">build1</span>(rs, mid + <span class="hljs-number">1</span>, r);<br>    t1.<span class="hljs-built_in">up</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build2</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    t2.tag[p] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        t2.val[p] = inv[l].r;<br>        t2.pos[p] = l;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build2</span>(ls, l, mid);<br>    <span class="hljs-built_in">build2</span>(rs, mid + <span class="hljs-number">1</span>, r);<br>    t2.<span class="hljs-built_in">up</span>(p);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> ls</span><br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> rs</span><br><br><span class="hljs-type">int</span> ddl[N], pos[N];<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> lim)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + <span class="hljs-number">1</span>; i++)<br>        ddl[i] = n + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + <span class="hljs-number">1</span>; i++)<br>        pos[i] = n;<br>    <span class="hljs-built_in">build1</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-built_in">build2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        P tmp = t1.<span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, i, n);<br>        <span class="hljs-type">int</span> t = tmp.first == <span class="hljs-number">0</span> ? tmp.second : n + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> x = t2.<span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>, pos[t]).second;<br>        <span class="hljs-keyword">if</span> (ddl[x] &lt; i)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">while</span> (j &lt;= n &amp;&amp; inv[j].l &lt;= inv[x].r) &#123;<br>            ddl[j] = i + lim;<br>            <span class="hljs-keyword">if</span> (ddl[j] &lt;= n) &#123;<br>                pos[ddl[j]] = j;<br>                t1.<span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, ddl[j], n, <span class="hljs-number">-1</span>);<br>            &#125;<br>            ++j;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ddl[x] &lt;= n)<br>            t1.<span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, ddl[x], n, <span class="hljs-number">1</span>);<br>        t1.<span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, i, n, <span class="hljs-number">-1</span>);<br>        t2.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, x, <span class="hljs-number">1e9</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= N; ++i)<br>        <span class="hljs-keyword">if</span> (inv[i].l &lt;= inv[i - <span class="hljs-number">1</span>].r)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;interval.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;interval.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br>    <span class="hljs-type">int</span> T = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        n = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            inv[i].l = <span class="hljs-built_in">read</span>(), inv[i].r = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-built_in">sort</span>(inv + <span class="hljs-number">1</span>, inv + n + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check1</span>()) &#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = n - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>            <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid))<br>                r = mid;<br>            <span class="hljs-keyword">else</span><br>                l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        cout &lt;&lt; l &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>考试</category>
      
      <category>CSP2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线段树</tag>
      
      <tag>数论分块</tag>
      
      <tag>二分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20191010 CSP模拟联考day3题解(成都七中)</title>
    <link href="/2019/10/10/20191010-CSP%E6%A8%A1%E6%8B%9F%E8%81%94%E8%80%83day3%E9%A2%98%E8%A7%A3-%E6%88%90%E9%83%BD%E4%B8%83%E4%B8%AD/"/>
    <url>/2019/10/10/20191010-CSP%E6%A8%A1%E6%8B%9F%E8%81%94%E8%80%83day3%E9%A2%98%E8%A7%A3-%E6%88%90%E9%83%BD%E4%B8%83%E4%B8%AD/</url>
    
    <content type="html"><![CDATA[<p><del>不想写题解，因为我现在很正处于尴尬之中。</del><br>（我啥都没说，好矫情啊啊啊啊！）</p><span id="more"></span><h2 id="T1-序列"><a href="#T1-序列" class="headerlink" title="T1 序列"></a>T1 序列</h2><p><img src="https://i.loli.net/2019/10/10/2biBf8PCQMe9mKq.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _FILE(x)                  \</span><br><span class="hljs-meta">    freopen(x <span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin); \</span><br><span class="hljs-meta">    freopen(x <span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">100000</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">const</span> ll mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">int</span> n, m, k;<br>ll fac[maxn], facinv[maxn];<br><br><span class="hljs-function">ll <span class="hljs-title">ksm</span><span class="hljs-params">(ll a, ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> ( ; b; b &gt;&gt;= <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) ans = ans * a % mod;<br>        a = a * a % mod;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">invx</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">ksm</span>(x, mod - <span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> fac[n] * facinv[m] % mod * facinv[n - m] % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> mx = <span class="hljs-number">100000</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    fac[<span class="hljs-number">0</span>] = fac[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= mx; ++i)<br>        fac[i] = fac[i - <span class="hljs-number">1</span>] * i % mod;<br>    facinv[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    facinv[mx] = <span class="hljs-built_in">invx</span>(fac[mx]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = mx - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; --i)<br>        facinv[i] = facinv[i + <span class="hljs-number">1</span>] * (i + <span class="hljs-number">1</span>) % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>    _FILE(<span class="hljs-string">&quot;sequence&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-type">int</span> T;<br>    cin &gt;&gt; T;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-comment">/*for (int i = 1; i &lt;= 5; ++i)</span><br><span class="hljs-comment">        printf(&quot;%lld %lld\n&quot;, fac[i], facinv[i]);*/</span><br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);<br>        ll ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = k; i &lt;= n; ++i) &#123;<br>            ans = (ans + <span class="hljs-built_in">C</span>(n, i) * <span class="hljs-built_in">ksm</span>(m - <span class="hljs-number">1</span>, n - i) % mod) % mod;<br>            <span class="hljs-comment">// printf(&quot;%d %lld\n&quot;, i, C(n, i));</span><br>        &#125;<br>        cout &lt;&lt; ans &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T2-图"><a href="#T2-图" class="headerlink" title="T2 图"></a>T2 图</h2><p><img src="https://i.loli.net/2019/10/10/XyLOxhbTHvNrAPF.png"></p><p>从<strong>Itst</strong>那里学来的常数小的写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rg register</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; P;<br><span class="hljs-type">int</span> n, m, k, val[<span class="hljs-number">30010</span>], ans = <span class="hljs-number">-1</span>, f[<span class="hljs-number">30010</span>][<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">8</span>];<br>vector&lt;P&gt; E[<span class="hljs-number">30010</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-type">int</span> f = <span class="hljs-number">1</span>, x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br>    <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br>    <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">maxx</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; p, <span class="hljs-type">int</span> q)</span></span><br><span class="hljs-function"></span>&#123;<br>    p = p &gt; q ? p : q;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">time_t</span> t = <span class="hljs-built_in">clock</span>();<br>    <span class="hljs-built_in">srand</span>(<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));<br><br>    n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>(), k = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        rg <span class="hljs-type">int</span> x = <span class="hljs-built_in">read</span>(), y = <span class="hljs-built_in">read</span>(), z = <span class="hljs-built_in">read</span>();<br>        E[x].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(y, z));<br>        E[y].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(x, z));<br>    &#125;<br><br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0xcf</span>, <span class="hljs-built_in">sizeof</span>(f));<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1000</span> * (<span class="hljs-built_in">clock</span>() - t) &lt; <span class="hljs-number">2400</span> * CLOCKS_PER_SEC) &#123;<br>        <span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>            val[i] = <span class="hljs-built_in">rand</span>() % k;<br>            f[i][<span class="hljs-number">1</span> &lt;&lt; val[i]] = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (<span class="hljs-number">1</span> &lt;&lt; k) - <span class="hljs-number">1</span>; ++j)<br>            <span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>                <span class="hljs-keyword">if</span> (f[i][j] &gt;= <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> t : E[i]) &#123;<br>                        <span class="hljs-keyword">if</span> (!((j &gt;&gt; val[t.first]) &amp; <span class="hljs-number">1</span>))<br>                            <span class="hljs-built_in">maxx</span>(f[t.first][j | (<span class="hljs-number">1</span> &lt;&lt; val[t.first])], f[i][j] + t.second);<br>                    &#125;<br>                    f[i][j] = <span class="hljs-number">-0x3f3f3f3f</span>;<br>                &#125;<br>        <span class="hljs-keyword">for</span> (rg <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-built_in">maxx</span>(ans, f[i][(<span class="hljs-number">1</span> &lt;&lt; k) - <span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">&gt; File Name: graph_AC.cpp</span><br><span class="hljs-comment">&gt; Author: kkkstra</span><br><span class="hljs-comment">&gt; Mail: snewt986@gmail.com</span><br><span class="hljs-comment">&gt; Created Time: Thu 10 Oct 2019 04:42:48 PM CST</span><br><span class="hljs-comment"> ************************************************************************/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _FILE(x)                  \</span><br><span class="hljs-meta">    freopen(x <span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin); \</span><br><span class="hljs-meta">    freopen(x <span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">30000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxm = <span class="hljs-number">200000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, m, k, val[maxn], ans = <span class="hljs-number">0</span>, f[maxn][<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">8</span>];<br><span class="hljs-type">int</span> tot, head[maxn], to[maxm], edge[maxm], nxt[maxm];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> z)</span></span><br><span class="hljs-function"></span>&#123;<br>    to[++tot] = y;<br>    edge[tot] = z;<br>    nxt[tot] = head[x];<br>    head[x] = tot;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">color</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        val[i] = <span class="hljs-built_in">rand</span>() % k;<br>    <span class="hljs-comment">// for (int i = 1; i &lt;= n; ++i)</span><br>    <span class="hljs-comment">//     printf(&quot;%d &quot;, val[i]);</span><br>    <span class="hljs-comment">// puts(&quot;&quot;);</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (<span class="hljs-number">1</span> &lt;&lt; k); ++j)<br>            f[i][j] = -INF;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        f[i][<span class="hljs-number">1</span> &lt;&lt; val[i]] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (<span class="hljs-number">1</span> &lt;&lt; k); ++j)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">if</span> ((j &gt;&gt; val[i]) &amp; <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = head[i]; k; k = nxt[k]) &#123;<br>                    <span class="hljs-type">int</span> y = to[k], z = edge[k];<br>                    <span class="hljs-keyword">if</span> ((j &gt;&gt; val[y]) &amp; <span class="hljs-number">1</span>)<br>                        <span class="hljs-keyword">continue</span>;<br>                    f[y][j | (<span class="hljs-number">1</span> &lt;&lt; val[y])] = <span class="hljs-built_in">max</span>(f[y][j | (<span class="hljs-number">1</span> &lt;&lt; val[y])], f[i][j] + z);<br>                &#125;<br>            &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>    _FILE(<span class="hljs-string">&quot;graph&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-type">time_t</span> t = <span class="hljs-built_in">clock</span>();<br>    <span class="hljs-built_in">srand</span>(<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-type">int</span> x, y, z;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);<br>        <span class="hljs-built_in">add</span>(x, y, z);<br>        <span class="hljs-built_in">add</span>(y, x, z);<br>    &#125;<br><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">color</span>();<br>        <span class="hljs-built_in">dp</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            ans = <span class="hljs-built_in">max</span>(ans, f[i][(<span class="hljs-number">1</span> &lt;&lt; k) - <span class="hljs-number">1</span>]);<br>        <span class="hljs-comment">/*if (++cnt &gt; 100)</span><br><span class="hljs-comment">            break;*/</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">1000</span> * (<span class="hljs-built_in">clock</span>() - t) &gt;= <span class="hljs-number">3900</span> * CLOCKS_PER_SEC)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T3-商店"><a href="#T3-商店" class="headerlink" title="T3 商店"></a>T3 商店</h2><p>这道题$dp$的循环里把$i$打成$j$挂了$20$分，本来分就少，淦！嘤嘤嘤TvT。</p><p><img src="https://i.loli.net/2019/10/10/SA2C4ehLMGRHaoB.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">&gt; File Name: shop_AC.cpp</span><br><span class="hljs-comment">&gt; Author: kkkstra</span><br><span class="hljs-comment">&gt; Mail: snewt986@gmail.com</span><br><span class="hljs-comment">&gt; Created Time: Thu 10 Oct 2019 07:10:20 PM CST</span><br><span class="hljs-comment"> ************************************************************************/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _FILE(x) freopen(x<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin); freopen(x<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rg register</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">100000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-type">int</span> f = <span class="hljs-number">1</span>, x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-type">int</span> n, p, a[maxn], b[maxn], c[maxn];<br><span class="hljs-type">int</span> f[maxn], tmp[maxn], q[maxn];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>_FILE(<span class="hljs-string">&quot;shop&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;p);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;b[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;c[i]);<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in">sizeof</span>(f));<br>    f[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-built_in">memcpy</span>(tmp, f, (p + <span class="hljs-number">1</span>) * <span class="hljs-number">4</span>);<br>        <span class="hljs-type">int</span> head = <span class="hljs-number">1</span>, tail = <span class="hljs-number">0</span>, now = <span class="hljs-number">0</span>;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= p; ++j) &#123;<br>            <span class="hljs-keyword">while</span> (now &lt;= j - b[i]) &#123;<br>                <span class="hljs-keyword">while</span> (head &lt;= tail &amp;&amp; tmp[q[tail]] &gt;= tmp[now])<br>                    --tail;<br>                q[++tail] = now++;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (head &lt;= tail &amp;&amp; q[head] &lt; j - a[i])<br>                ++head;<br>            <span class="hljs-keyword">if</span> (head &lt;= tail)<br>                f[j] = <span class="hljs-built_in">min</span>(f[j], tmp[q[head]] + c[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (f[p] == INF) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;xiaoDwandanle&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, f[p]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>考试</category>
      
      <category>CSP2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>组合数学</tag>
      
      <tag>随机化</tag>
      
      <tag>背包dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20191009 CSP模拟联考day2题解</title>
    <link href="/2019/10/09/20191009-CSP%E6%A8%A1%E6%8B%9F%E8%81%94%E8%80%83day2%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/10/09/20191009-CSP%E6%A8%A1%E6%8B%9F%E8%81%94%E8%80%83day2%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>他好强啊QAQ！</p><p><img src="https://i.loli.net/2019/10/09/WV9EQYHpmgsbcKe.png"></p><p>今天的考试就是炸炸炸，本来想在day2拿到高分，出人头地！然后就在想正解，然后就没有然后了。。。暴力都没打，和昨天的题不是一个级别的！</p><span id="more"></span><h2 id="T1-文体两开花"><a href="#T1-文体两开花" class="headerlink" title="T1 文体两开花"></a>T1 文体两开花</h2><p>需要查询的只有某个节点的所有儿子&#x2F;孙子的权值异或和,因此可以直接开两个数组维护,一次修改操作只会影响数组中 $O(1)$ 个位置的值,因而时间复杂度为 $O(n+q)$ 。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">&gt; File Name: blossom_AC.cpp</span><br><span class="hljs-comment">&gt; Author: kkkstra</span><br><span class="hljs-comment">&gt; Mail: snewt986@gmail.com</span><br><span class="hljs-comment">&gt; Created Time: Wed 09 Oct 2019 02:00:41 PM CST</span><br><span class="hljs-comment"> ************************************************************************/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _FILE(x) freopen(x<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin); freopen(x<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rg register</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1000000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-type">int</span> f = <span class="hljs-number">1</span>, x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-type">int</span> tot, head[maxn], to[maxn &lt;&lt; <span class="hljs-number">1</span>], nxt[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    to[++tot] = y;<br>    nxt[tot] = head[x];<br>    head[x] = tot;<br>&#125;<br><br><span class="hljs-type">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> n, q;<br>ll Ans, val[maxn], d1[maxn], d2[maxn], fa[maxn], dep[maxn];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// printf(&quot;%d\n&quot;, x);</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>        <span class="hljs-type">int</span> y = to[i];<br>        <span class="hljs-keyword">if</span> (y == f)<br>            <span class="hljs-keyword">continue</span>;<br>        fa[y] = x;<br>        dep[y] = dep[x] + <span class="hljs-number">1</span>;<br>        d1[x] ^= val[y];<br>        <span class="hljs-built_in">dfs</span>(y, x);<br>        d2[x] ^= d1[y];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>_FILE(<span class="hljs-string">&quot;blossom&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;val[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-type">int</span> x, y;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);<br>        <span class="hljs-built_in">add</span>(x, y);<br>        <span class="hljs-built_in">add</span>(y, x);<br>    &#125;<br><br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br>    <span class="hljs-comment">/*for (int i = 1; i &lt;= n; ++i)</span><br><span class="hljs-comment">        printf(&quot;%lld %lld\n&quot;, d1[i], d2[i]);*/</span><br><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (q--) &#123;<br>        ++i;<br>        ll x, v;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;x, &amp;v);<br>        <span class="hljs-type">int</span> f = fa[x], ff = fa[fa[x]];<br>        <span class="hljs-keyword">if</span> (f) &#123;<br>            d1[f] ^= val[x];<br>            d1[f] ^= v;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ff) &#123;<br>            d2[ff] ^= val[x];<br>            d2[ff] ^= v;<br>        &#125;<br>        val[x] = v;<br><br>        ll ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (dep[x] == <span class="hljs-number">0</span>)<br>            ans = d1[x] ^ d2[x] ^ val[x];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dep[x] == <span class="hljs-number">1</span>)<br>            ans = d1[f] ^ val[f] ^ d1[x] ^ d2[x];<br>        <span class="hljs-keyword">else</span><br>            ans = d1[x] ^ d2[x] ^ d1[f] ^ val[f] ^ val[ff];<br>        Ans = (Ans + ans % mod * i % mod * i % mod) % mod;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, (Ans + mod) % mod);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T2-国际影星"><a href="#T2-国际影星" class="headerlink" title="T2 国际影星"></a>T2 国际影星</h2><p><strong>算法步骤：</strong></p><ol><li>先预处理出每个点集内边的数量，记为 $E_S$ ，可以在读入边时枚举一下集合进行计数。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>    <span class="hljs-type">int</span> x, y;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> s = <span class="hljs-number">0</span>, k = (<span class="hljs-number">1</span> &lt;&lt; (x - <span class="hljs-number">1</span>)) | (<span class="hljs-number">1</span> &lt;&lt; (y - <span class="hljs-number">1</span>)); s &lt;= U; ++s)<br>        <span class="hljs-keyword">if</span> ((s &amp; k) == k) ++num[s];<br>&#125;<br></code></pre></td></tr></table></figure><p>而大佬是这么写的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, x, y; i &lt;= m; ++i) &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);<br>    ++E[<span class="hljs-number">1</span> &lt;&lt; x - <span class="hljs-number">1</span> | <span class="hljs-number">1</span> &lt;&lt; y - <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; ++j)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= all; ++i)<br>        <span class="hljs-keyword">if</span>(i &gt;&gt; j &amp; <span class="hljs-number">1</span>) E[i] += E[i ^ (<span class="hljs-number">1</span> &lt;&lt; j)];<br></code></pre></td></tr></table></figure><ol start="2"><li>再预处理出 $f_{1&#x2F;2,S}$ 表示从点 $1&#x2F;2$ 出发，只考虑能够到达点集 $S$ 内任意一个点的方案数。转移时考虑容斥，即用任意连边的方案数，减去不合法的方案数，即只能到达 $S$ 的某一个真子集的方案数。设 $E_x$ 表示集合 $x$ 的边数。</li></ol><p>$$f_{x, S} &#x3D; 2^{E_S} - \sum \limits_{T \subsetneq S, x \in T} f_{x,T} \times 2^{E_{\complement_S T}}$$</p><ol start="3"><li>求出 $f_{1&#x2F;2,S}$ 后，考虑如何合并答案。还是容斥，先枚举集合 $S1$ 表示从 $1$ 号点出发能够到达的点集，再在 $S1$ 的补集中枚举 $S2$ 表示从 $2$ 号点出发能够到达的点集，剩下的集合就是两个点都不能到达的点集，显然这个点集指向外部的边都只能指向集合 $S1$ 或 $S2$ 因此是确定方向的，然后三个集合内的点随便连就行了。另外要注意的是，不能有边连接点集 $S1$和$S2$。这个可以用 <code>E[s1 | s2] == E[s1] + E[s2]</code> 判断。</li></ol><p>$$ans &#x3D; 2^m - \sum \limits_{s1,s2 \subseteq V, s1 \cap s2 &#x3D; \emptyset, 1\in s1 , 2\in s2} f_{1,s1} \times f_{2, s2} \times 2^{\complement_{V} s1\cup s2}$$</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">&gt; File Name: moviestar_AC.cpp</span><br><span class="hljs-comment">&gt; Author: kkkstra</span><br><span class="hljs-comment">&gt; Mail: snewt986@gmail.com</span><br><span class="hljs-comment">&gt; Created Time: Wed 09 Oct 2019 02:42:57 PM CST</span><br><span class="hljs-comment"> ************************************************************************/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _FILE(x)                  \</span><br><span class="hljs-meta">    freopen(x <span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin); \</span><br><span class="hljs-meta">    freopen(x <span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">16</span>;<br><span class="hljs-type">int</span> n, m, ans, U, num[<span class="hljs-number">1</span> &lt;&lt; N], p[N * N], f1[<span class="hljs-number">1</span> &lt;&lt; N], f2[<span class="hljs-number">1</span> &lt;&lt; N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    U = (<span class="hljs-number">1</span> &lt;&lt; n) - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-type">int</span> x, y;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);<br>        <span class="hljs-type">int</span> k = (<span class="hljs-number">1</span> &lt;&lt; (x - <span class="hljs-number">1</span>)) | (<span class="hljs-number">1</span> &lt;&lt; (y - <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> s = <span class="hljs-number">0</span>; s &lt;= U; ++s)<br>            <span class="hljs-keyword">if</span> ((s &amp; k) == k)<br>                ++num[s];<br>    &#125;<br><br>    p[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        p[i] = p[i - <span class="hljs-number">1</span>] * <span class="hljs-number">2</span> % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pre</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> s = <span class="hljs-number">0</span>; s &lt;= U; ++s) &#123;<br>        <span class="hljs-keyword">if</span> (s &amp; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = (s - <span class="hljs-number">1</span>) &amp; s; t; t = (t - <span class="hljs-number">1</span>) &amp; s)<br>                <span class="hljs-keyword">if</span> (t &amp; <span class="hljs-number">1</span>)<br>                    f1[s] = (f1[s] + <span class="hljs-number">1ll</span> * f1[t] * p[num[s ^ t]] % mod) % mod;<br>            f1[s] = (p[num[s]] - f1[s] + mod) % mod;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (s &amp; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = (s - <span class="hljs-number">1</span>) &amp; s; t; t = (t - <span class="hljs-number">1</span>) &amp; s)<br>                <span class="hljs-keyword">if</span> (t &amp; <span class="hljs-number">2</span>)<br>                    f2[s] = (f2[s] + <span class="hljs-number">1ll</span> * f2[t] * p[num[s ^ t]] % mod) % mod;<br>            f2[s] = (p[num[s]] - f2[s] + mod) % mod;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> s1 = <span class="hljs-number">0</span>; s1 &lt;= U; ++s1) &#123;<br>        <span class="hljs-keyword">if</span> ((s1 &amp; <span class="hljs-number">1</span>) &amp;&amp; (~s1 &amp; <span class="hljs-number">2</span>)) &#123;<br>            <span class="hljs-type">int</span> s = U ^ s1;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> s2 = s; s2; s2 = (s2 - <span class="hljs-number">1</span>) &amp; s)<br>                <span class="hljs-keyword">if</span> ((s2 &amp; <span class="hljs-number">2</span>) &amp;&amp; num[s1 | s2] == num[s1] + num[s2])<br>                    ans = (ans + <span class="hljs-number">1ll</span> * f1[s1] * f2[s2] % mod * p[num[U ^ s1 ^ s2]] % mod) % mod;<br>        &#125;<br>    &#125;<br>    ans = (p[m] - ans + mod) % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>    _FILE(<span class="hljs-string">&quot;moviestar&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-built_in">pre</span>();<br>    <span class="hljs-built_in">work</span>();<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T3-零糖麦片"><a href="#T3-零糖麦片" class="headerlink" title="T3 零糖麦片"></a>T3 零糖麦片</h2><p>抱歉，这题的题解咕了。</p><p><img src="https://i.loli.net/2019/10/09/A3sifmcF9T4kDaj.png"></p><p><img src="https://i.loli.net/2019/10/09/VpygHWlBPLtTJmk.png"></p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">&gt; File Name: oatmeal.cpp</span><br><span class="hljs-comment">&gt; Author: kkkstra</span><br><span class="hljs-comment">&gt; Mail: snewt986@gmail.com</span><br><span class="hljs-comment">&gt; Created Time: Wed 09 Oct 2019 10:01:37 AM CST</span><br><span class="hljs-comment"> ************************************************************************/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _FILE(x)                  \</span><br><span class="hljs-meta">    freopen(x <span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin); \</span><br><span class="hljs-meta">    freopen(x <span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rg register</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e7</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxm = <span class="hljs-number">1000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> num, n, m, a[maxn], odd[maxm], even[maxm];<br><span class="hljs-type">int</span> cnt, prime[maxn], p[maxn];<br><span class="hljs-type">int</span> tot, head[maxm], to[maxm * maxm], nxt[maxm * maxm];<br><span class="hljs-type">int</span> vis[<span class="hljs-number">2010</span>], match[<span class="hljs-number">2010</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    to[++tot] = y;<br>    nxt[tot] = head[x];<br>    head[x] = tot;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= maxn; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (prime[i] == <span class="hljs-number">0</span>) &#123;<br>            prime[i] = i;<br>            p[++cnt] = i;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= cnt; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (p[j] &gt; prime[i] || p[j] &gt; maxn / i)<br>                <span class="hljs-keyword">break</span>;<br>            prime[i * p[j]] = p[j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(prime, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(prime));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; ++i)<br>        prime[p[i]] = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>        <span class="hljs-type">int</span> y = to[i];<br>        <span class="hljs-keyword">if</span> (!vis[y]) &#123;<br>            vis[y] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (!match[y] || <span class="hljs-built_in">dfs</span>(match[y])) &#123;<br>                match[y] = x;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>    _FILE(<span class="hljs-string">&quot;oatmeal&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-built_in">init</span>();<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= num; ++i) &#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>        a[x] = <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = maxn; i &gt;= <span class="hljs-number">1</span>; --i)<br>        a[i] = a[i] ^ a[i - <span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= maxn; ++i)<br>        <span class="hljs-keyword">if</span> (a[i]) &#123;<br>            <span class="hljs-keyword">if</span> (i &amp; <span class="hljs-number">1</span>)<br>                odd[++n] = i;<br>            <span class="hljs-keyword">else</span><br>                even[++m] = i;<br>        &#125;<br><br>    <span class="hljs-comment">// for (int i = 1; i &lt;= n; ++i)</span><br>    <span class="hljs-comment">//     printf(&quot;%d &quot;, odd[i]);</span><br>    <span class="hljs-comment">// puts(&quot;&quot;);</span><br>    <span class="hljs-comment">// for (int i = 1; i &lt;= m; ++i)</span><br>    <span class="hljs-comment">//     printf(&quot;%d &quot;, even[i]);</span><br>    <span class="hljs-comment">// puts(&quot;&quot;);</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (prime[<span class="hljs-built_in">abs</span>(odd[i] - even[j])]) &#123;<br>                <span class="hljs-comment">// printf(&quot;%d\n&quot;, prime[abs(odd[i] - even[j])]);</span><br>                <span class="hljs-comment">// printf(&quot;%d %d\n&quot;, odd[i], even[j]);</span><br>                <span class="hljs-comment">// printf(&quot;%d %d\n&quot;, i, j + n);</span><br>                <span class="hljs-built_in">add</span>(i, j + n);<br>                <span class="hljs-built_in">add</span>(j + n, i);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> ct = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(vis));<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dfs</span>(i))<br>            ++ct;<br>    &#125;<br><br>    <span class="hljs-type">int</span> Ans = ct + <span class="hljs-number">2</span> * ((n - ct) / <span class="hljs-number">2</span> + (m - ct) / <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span> ((n - ct) % <span class="hljs-number">2</span>)<br>        Ans += <span class="hljs-number">3</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, Ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>考试</category>
      
      <category>CSP2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>状压dp</tag>
      
      <tag>图论</tag>
      
      <tag>哥德巴赫猜想</tag>
      
      <tag>匈牙利算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20191008 CSP模拟联考day1题解</title>
    <link href="/2019/10/08/20191008-CSP%E6%A8%A1%E6%8B%9F%E8%81%94%E8%80%83day1%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/10/08/20191008-CSP%E6%A8%A1%E6%8B%9F%E8%81%94%E8%80%83day1%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>发现之前的博客一直都写成了一场已经消失了的比赛的名字，不管了，不想改了。</p><p>今天又被爆踩了TvT，orz <strong>BruceW</strong> 。今天不光被长郡的爆踩，杭二、南外和成都七中也好强啊orz。</p><p>好的，明天又是<strong>元气满满</strong>的一天鸭。今天的题其实不难，是我智障了。</p><span id="more"></span><h2 id="T1-流量"><a href="#T1-流量" class="headerlink" title="T1 流量"></a>T1 流量</h2><p>首先先读懂题意，这里是无向边！所以本来暴力搞一通就能拿到 $90pts$ 的好成绩，结果被有向边搞死。</p><p>好的，来讲正解，也非常简单。</p><p>首先负权边是直接选上的，然后考虑剩下的边，发现如果将没选的边作为一个集合，如果里面有环，那么这个环上的边的流量就无法被推断出来，所以只要求一下最大生成森林，剩下的边就是被选上的边。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _FILE(x) freopen(x<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin); freopen(x<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rg register</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">200000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxm = <span class="hljs-number">500000</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> x, y;<br>    ll z;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-type">const</span> node &amp;rhs) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> z &gt; rhs.z;<br>    &#125;<br>&#125; E[maxm];<br><br><span class="hljs-type">int</span> n, m, cnt, fa[maxn];<br>ll ans;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> fa[x] == x ? x : fa[x] = <span class="hljs-built_in">find</span>(fa[x]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>_FILE(<span class="hljs-string">&quot;traffic&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-type">int</span> x, y; ll z;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%lld&quot;</span>, &amp;x, &amp;y, &amp;z);<br>        <span class="hljs-keyword">if</span> (z &lt; <span class="hljs-number">0</span>) ans += z;<br>        <span class="hljs-keyword">else</span> E[++cnt] = (node) &#123; x, y, z &#125;;<br>    &#125;<br><br>    <span class="hljs-built_in">sort</span>(E + <span class="hljs-number">1</span>, E + cnt + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) fa[i] = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; ++i) &#123;<br>        <span class="hljs-type">int</span> fx = <span class="hljs-built_in">find</span>(E[i].x);<br>        <span class="hljs-type">int</span> fy = <span class="hljs-built_in">find</span>(E[i].y);<br>        <span class="hljs-keyword">if</span> (fx != fy) fa[fx] = fy;<br>        <span class="hljs-keyword">else</span> ans += E[i].z;<br>        <span class="hljs-comment">// printf(&quot;%d %d %lld %lld\n&quot;, E[i].x, E[i].y, E[i].z, ans);</span><br>    &#125;<br><br>    cout &lt;&lt; ans &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T2-个人练习生"><a href="#T2-个人练习生" class="headerlink" title="T2 个人练习生"></a>T2 个人练习生</h2><p>感谢 $cxk$ 的友情出演！</p><p>这道题的做法也非常的简单，然后我写了个<strong>树形dp（还不够简单？？？）</strong>！</p><p>设 $d_x$ 表示节点 $x$ 的深度，$a_x$ 表示<strong>练习（感谢鲲鲲）</strong>的时间。</p><p>最简单的做法是从时间 $n-1$ 到 $0$ 来填序列，把 $d_x + a_x$ 扔进堆里去，每次取出最小的。这样先将根节点扔进堆里，然后将新增的可以被选的节点扔进堆里，重复就行了。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _FILE(x) freopen(x<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin); freopen(x<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rg register</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> pair&lt;ll, <span class="hljs-type">int</span>&gt; P;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">300000</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> tot, head[maxn], to[maxn &lt;&lt; <span class="hljs-number">1</span>], nxt[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    to[++tot] = y;<br>    nxt[tot] = head[x];<br>    head[x] = tot;<br>&#125;<br><br><span class="hljs-type">int</span> n, vis[maxn], fa[maxn], d[maxn];<br>ll a[maxn], ans;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>        <span class="hljs-type">int</span> y = to[i];<br>        <span class="hljs-keyword">if</span> (y == fa[x]) <span class="hljs-keyword">continue</span>;<br>        fa[y] = x;<br>        d[y] = d[x] + <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">dfs</span>(y);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>_FILE(<span class="hljs-string">&quot;practice&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;a[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-type">int</span> x, y;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);<br>        <span class="hljs-built_in">add</span>(x, y);<br>        <span class="hljs-built_in">add</span>(y, x);<br>    &#125;<br><br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br><br>    priority_queue&lt;P, vector&lt;P&gt;, greater&lt;P&gt; &gt; Q;<br>    Q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(a[<span class="hljs-number">1</span>], <span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>        <span class="hljs-type">int</span> x = Q.<span class="hljs-built_in">top</span>().second;<br>        ll z = Q.<span class="hljs-built_in">top</span>().first;<br>        Q.<span class="hljs-built_in">pop</span>();<br>        vis[x] = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// printf(&quot;%d %d %lld\n&quot;, i, x, z);</span><br>        ans = <span class="hljs-built_in">max</span>(ans, z + i);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = nxt[i]) &#123;<br>            <span class="hljs-type">int</span> y = to[i];<br>            <span class="hljs-keyword">if</span> (vis[y]) <span class="hljs-keyword">continue</span>;<br>            Q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(d[y] + a[y], y));<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; ans &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T3-假摔"><a href="#T3-假摔" class="headerlink" title="T3 假摔"></a>T3 假摔</h2><p>T3期望得分 $40pts$ 实际得分 $20pts$ ，ST表写炸是什么情况啦！wtcl TvT。</p><p>来讲正解吧。</p><p>考虑如何用较优的复杂度处理单个询问。</p><p>不妨设元素两两不同。对于一种最优方案 $(A,B,C)$ ：</p><ul><li>若存在 $A&lt;x&lt;B$ 使得 $a_x&gt;a_A$ ，则 $(x,B,C)$ 是一组更优的合法解，因此 $a_x&lt;a_A$  。</li><li>若存在 $A&lt;x&lt;B$ 使得 $a_x&gt;a_B$ ，则 $(A,x,C)$ 是一组更优的合法解，因此 $a_x&lt;a_B$ 。</li></ul><p>于是这样的 $(A,B)$ 二元组只有 $O(n)$ 个，可以用单调栈处理，结合后缀最大值，可以在 $O(n)$ 的时间内处理单组询问。</p><p><strong>（以上文字来自题解，因为我太懒了）</strong></p><p>接下来考虑有 $q$ 次询问的情况，在上面的基础上优化，先将所有的询问操作离线，挂在每个点上。</p><p>从小到大枚举左端点，预处理出所有合法的 $(A,B)$ 二元组，同样挂在每个点上。</p><p>令 $f_i$ 表示当前以 $i$ 为 $C$ 点的最大值。然后从后往前扫一遍，对于 $i \ge 2B − A$，执行 $f_i &#x3D; max(f_i,a_A+a_B+a_i)$ ，这个用线段树维护一下区间最大值即可。</p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _FILE(x) freopen(x<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin); freopen(x<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rg register</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; P;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">500000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-type">int</span> f = <span class="hljs-number">1</span>, x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-type">int</span> n, m, a[maxn];<br><span class="hljs-type">int</span> stk[maxn], top;<br>ll ans[maxn];<br>vector&lt;<span class="hljs-type">int</span>&gt; vec[maxn];<br>vector&lt;P&gt; Q[maxn];<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SegmentTree</span> &#123;<br>    <span class="hljs-type">int</span> l, r, val;<br>    ll maxx, lazy;<br>&#125; t[maxn &lt;&lt; <span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].l = l, t[p].r = r;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        t[p].val = a[l];<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    t[p].val = <span class="hljs-built_in">max</span>(t[p &lt;&lt; <span class="hljs-number">1</span>].val, t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].val);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (t[p].lazy) &#123;<br>        t[p &lt;&lt; <span class="hljs-number">1</span>].lazy = <span class="hljs-built_in">max</span>(t[p &lt;&lt; <span class="hljs-number">1</span>].lazy, t[p].lazy);<br>        t[p &lt;&lt; <span class="hljs-number">1</span>].maxx = <span class="hljs-built_in">max</span>(t[p &lt;&lt; <span class="hljs-number">1</span>].maxx, t[p &lt;&lt; <span class="hljs-number">1</span>].val + t[p].lazy);<br>        t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].lazy = <span class="hljs-built_in">max</span>(t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].lazy, t[p].lazy);<br>        t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].maxx = <span class="hljs-built_in">max</span>(t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].maxx, t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].val + t[p].lazy);<br>        t[p].lazy = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, ll v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= t[p].l &amp;&amp; r &gt;= t[p].r) &#123;<br>        t[p].lazy = <span class="hljs-built_in">max</span>(t[p].lazy, v);<br>        t[p].maxx = <span class="hljs-built_in">max</span>(t[p].maxx, t[p].val + v);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid) <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r, v);<br>    <span class="hljs-keyword">if</span> (r &gt; mid) <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r, v);<br>    t[p].maxx = <span class="hljs-built_in">max</span>(t[p &lt;&lt; <span class="hljs-number">1</span>].maxx, t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].maxx);<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= t[p].l &amp;&amp; r &gt;= t[p].r)<br>        <span class="hljs-keyword">return</span> t[p].maxx;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid) ans = <span class="hljs-built_in">max</span>(ans, <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r));<br>    <span class="hljs-keyword">if</span> (r &gt; mid) ans = <span class="hljs-built_in">max</span>(ans, <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r));<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>_FILE(<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        a[i] = <span class="hljs-built_in">read</span>();<br><br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br><br>    stk[++top] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">while</span> (top &amp;&amp; a[stk[top]] &lt;= a[i]) &#123;<br>            <span class="hljs-keyword">if</span> (i + i - stk[top] &lt;= n)<br>                vec[stk[top]].<span class="hljs-built_in">push_back</span>(i);<br>            --top;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (top &amp;&amp; i + i - stk[top] &lt;= n)<br>            vec[stk[top]].<span class="hljs-built_in">push_back</span>(i);<br>        stk[++top] = i;<br>    &#125;<br><br>    <span class="hljs-type">int</span> m; cin &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-type">int</span> l, r;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);<br>        Q[l].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(r, i));<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = n; l &gt; <span class="hljs-number">0</span>; --l) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> mid : vec[l])<br>            <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, mid + mid - l, n, <span class="hljs-number">1ll</span> * a[l] + a[mid]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : Q[l])<br>            ans[x.second] = <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, l, x.first);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>考试</category>
      
      <category>CSP2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>枚举</tag>
      
      <tag>图论</tag>
      
      <tag>堆</tag>
      
      <tag>线段树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20191006 NOIP模拟考试day2题解</title>
    <link href="/2019/10/07/20191006-NOIP%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95day2%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/10/07/20191006-NOIP%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95day2%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>抱歉，因为这场考试<del>泰国</del>太过毒瘤(bushi)，所以咕了，可能明年 $CSP$ 也不会补上的。</p>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>考试</category>
      
      <category>CSP2019</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20191005 NOIP模拟考试day1题解</title>
    <link href="/2019/10/05/20191005-NOIP%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95day1%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/10/05/20191005-NOIP%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95day1%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>今天的题目名字好长啊qwq～</p><p>想不到居然T1还保住了60pts，稍稍没有那么自闭了一点呢。</p><h2 id="T1-奥里与光芒爆裂（oatlightburstmania）"><a href="#T1-奥里与光芒爆裂（oatlightburstmania）" class="headerlink" title="T1 奥里与光芒爆裂（oatlightburstmania）"></a>T1 奥里与光芒爆裂（oatlightburstmania）</h2><p>没想到我前面想的都是对的，最后 $n \le 18$ 怎么就没有想到<strong>状压</strong>呢！</p><span id="more"></span><p>大概讲一下思路，根据 $y&#x3D;ax^2+bx$ 可以知道两个点可以确定一条抛物线，于是大力枚举，把所有两个点确定的抛物线搞出来，然后当时就不知道后面怎么搞了，所以vector搞了一下，然后大力搜索。。。其实用状压表示出每条抛物线可以打到的史莱姆，然后状压dp一下就完事了！</p><p>下午花了20分钟改了一下，过了（手动再见）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">&gt; File Name: oatlightburstmania.cpp</span><br><span class="hljs-comment">&gt; Author: kkkstra</span><br><span class="hljs-comment">&gt; Mail: snewt986@gmail.com</span><br><span class="hljs-comment">&gt; Created Time: Sat 05 Oct 2019 08:05:08 AM CST</span><br><span class="hljs-comment"> ************************************************************************/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _FILE(x) freopen(x<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin); freopen(x<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rg register</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1000000</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">0.0000001</span>;<br><span class="hljs-type">int</span> n, w, cnt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">point</span> &#123;<br>    <span class="hljs-type">double</span> x, y;<br>&#125; p[<span class="hljs-number">20</span>];<br><span class="hljs-type">int</span> f[maxn];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> l[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">getab</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j, <span class="hljs-type">double</span> &amp;a, <span class="hljs-type">double</span> &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> x1 = p[i].x, y1 = p[i].y;<br>    <span class="hljs-type">double</span> x2 = p[j].x, y2 = p[j].y;<br>    <span class="hljs-keyword">if</span> (x1 == x2) <span class="hljs-keyword">return</span>;<br>    a = (x1*y2-x2*y1)/(x2*x2*x1-x1*x1*x2);<br>    b = (y1-x1*x1*a)/x1;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">double</span> <span class="hljs-title">gety</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">double</span> &amp;a, <span class="hljs-type">const</span> <span class="hljs-type">double</span> &amp;b, <span class="hljs-type">const</span> <span class="hljs-type">double</span> &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a * x * x + b * x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>_FILE(<span class="hljs-string">&quot;oatlightburstmania&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-built_in">memset</span>(p, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(p));<br>        <span class="hljs-built_in">memset</span>(l, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(l));<br>        <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in">sizeof</span>(f));<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;w);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf%lf&quot;</span>, &amp;p[i].x, &amp;p[i].y);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= n; ++j) &#123;<br>                <span class="hljs-type">double</span> a = <span class="hljs-number">0.0</span>, b = <span class="hljs-number">0.0</span>;<br>                <span class="hljs-built_in">getab</span>(i, j, a, b);<br>                <span class="hljs-keyword">if</span> (a &gt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; ++k)<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(<span class="hljs-built_in">gety</span>(a, b, p[k].x) - p[k].y) &lt; eps) &#123;<br>                        l[i][j] |= <span class="hljs-number">1</span> &lt;&lt; (k - <span class="hljs-number">1</span>);<br>                    &#125;<br>                <span class="hljs-comment">// printf(&quot;%d %d %lld\n&quot;, i, j, l[i][j]);</span><br>            &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>            l[i][<span class="hljs-number">0</span>] = l[<span class="hljs-number">0</span>][i] = <span class="hljs-number">1</span> &lt;&lt; (i - <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">// printf(&quot;%d %lld\n&quot;, i, l[i][0]);</span><br>        &#125;<br>    <br>        f[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>; x &lt; (<span class="hljs-number">1</span> &lt;&lt; n); ++x) &#123;<br>            <span class="hljs-comment">// printf(&quot;%d\n&quot;, x);</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= n; ++j) &#123;<br>                    f[x | l[i][j]] = <span class="hljs-built_in">min</span>(f[x | l[i][j]], f[x] + <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        cout &lt;&lt; f[(<span class="hljs-number">1</span> &lt;&lt; n) - <span class="hljs-number">1</span>] &lt;&lt; endl;<br>    &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>n比较小的时候考虑状压。</p><h2 id="T2-奥里与属性克制（oattypecountering）"><a href="#T2-奥里与属性克制（oattypecountering）" class="headerlink" title="T2 奥里与属性克制（oattypecountering）"></a>T2 奥里与属性克制（oattypecountering）</h2><p>我发现我考场上已经很接近70pts的dp式子了啊，还是题目做得少，话说概率期望dp我好像到现在就写过一题。</p><h3 id="70分做法"><a href="#70分做法" class="headerlink" title="70分做法"></a>70分做法</h3><p>先讲一下70分的做法，设 $f_{i,j}$ 表示剩下 $i$ 个有效操作 $j$ 个无效操作时的期望，根据最优策略，$i&gt;j$ 时会猜为 $i$ ， $i&lt;j$ 时会猜为 $j$ ， $i&#x3D;j$ 时随便选一个转移就好了，然后就可以大力转移并且拿到 $70$ 分的好成绩了。</p><p>$f_{i,j}&#x3D;\frac{i}{i+j}(f_{i-1,j}+1)+\frac{j}{i+j}f_{i,j-1},n&gt;m$</p><p>$f_{i,j}&#x3D;\frac{i}{i+j}f_{i-1,j}+\frac{j}{i+j}(f_{i,j-1}+1),n&lt;m$</p><p>$f_{i,j}&#x3D;\frac{i}{i+j}(f_{i-1,j}+0.5)+\frac{j}{i+j}(f_{i,j-1}+0.5),n&#x3D;m$</p><p><strong>70分代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">&gt; File Name: oattypecountering_AC.cpp</span><br><span class="hljs-comment">&gt; Author: kkkstra</span><br><span class="hljs-comment">&gt; Mail: snewt986@gmail.com</span><br><span class="hljs-comment">&gt; Created Time: Sat 05 Oct 2019 01:58:38 PM CST</span><br><span class="hljs-comment"> ************************************************************************/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _FILE(x) freopen(x<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin); freopen(x<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rg register</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">2000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll mod = <span class="hljs-number">998244353</span>;<br>ll inv[maxn], f[maxn][maxn];<br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    inv[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n + m; ++i)<br>        inv[i] = (ll)(mod - mod / i) * inv[mod % i] % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>_FILE(<span class="hljs-string">&quot;oattypecountering&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-type">int</span> T; cin &gt;&gt; T;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        f[i][<span class="hljs-number">0</span>] = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        f[<span class="hljs-number">0</span>][i] = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (i &gt; j) &#123;<br>                f[i][j] = ((f[i - <span class="hljs-number">1</span>][j] + <span class="hljs-number">1</span>) * i % mod  + f[i][j - <span class="hljs-number">1</span>] * j % mod) * inv[i + j] % mod;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == j) &#123;<br>                f[i][j] = ((f[i - <span class="hljs-number">1</span>][j] + inv[<span class="hljs-number">2</span>]) * i % mod + (f[i][j - <span class="hljs-number">1</span>] +<br>                        inv[<span class="hljs-number">2</span>]) * j % mod) * inv[i + j] % mod;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                f[i][j] = ((f[i - <span class="hljs-number">1</span>][j] * i % mod + (f[i][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>) * j % mod)) * inv[i + j] % mod;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; (f[n][m] + mod) % mod &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="100分做法"><a href="#100分做法" class="headerlink" title="100分做法"></a>100分做法</h3><p>我们将上面的转移在网格图中画出来。</p><p><img src="https://i.loli.net/2019/10/07/ykLiAzl87JRnBVG.png"></p><p>可以发现，我们相当于要从 $(n,m)$ 点走到 $(0,0)$ 点，且经过蓝色的边贡献就会加 $1$ 。</p><p>不难发现，无论怎么走，都会经过 $n$ 次蓝色的边。</p><p>所以我们只要考虑经过直线 $n&#x3D;m$ 上的点时 $0.5$ 的贡献，我们求出经过直线 $n&#x3D;m$ 的路径条数，除以总路径条数，再乘以 $0.5$ ，就得到了对答案期望的贡献。</p><p><strong>100分代码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs cp">/*************************************************************************<br>&gt; File Name: oattypecountering_AC.cpp<br>&gt; Author: kkkstra<br>&gt; Mail: snewt986@gmail.com<br>&gt; Created Time: Sat 05 Oct 2019 05:04:02 PM CST<br> ************************************************************************/<br><br>#include &lt;iostream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstring&gt;<br>#include &lt;algorithm&gt;<br>#define _FILE(x) freopen(x&quot;.in&quot;, &quot;r&quot;, stdin); freopen(x&quot;.out&quot;, &quot;w&quot;, stdout)<br>#define rg register<br>using namespace std;<br>const int INF = 0x3f3f3f3f;<br>const int maxn = 1000000 + 10;<br><br>typedef long long ll;<br>const int mod = 998244353;<br>int n, m;<br>ll ans, fac[maxn], facinv[maxn];<br><br>inline ll pow(ll a, ll b)<br>&#123;<br>    ll ans = 1;<br>    for ( ; b; b &gt;&gt;= 1) &#123;<br>        if (b &amp; 1) ans = ans * a % mod;<br>        a = a * a % mod;<br>    &#125;<br>    return ans;<br>&#125;<br><br>inline ll C(int n, int m)<br>&#123;<br>    return fac[n] * facinv[m] % mod * facinv[n - m] % mod;<br>&#125;<br><br>inline ll path(int n, int m)<br>&#123;<br>    return C(n + m, m);<br>&#125;<br><br>inline ll invx(int x)<br>&#123;<br>    return pow(x, mod - 2);<br>&#125;<br><br>inline void init(int mx)<br>&#123;<br>    fac[0] = fac[1] = 1;<br>    for (int i = 2; i &lt;= mx; ++i)<br>        fac[i] = fac[i - 1] * i % mod;<br>    facinv[0] = 1;<br>    facinv[mx] = invx(fac[mx]);<br>    for (int i = mx - 1; i &gt;= 1; --i)<br>        facinv[i] = facinv[i + 1] * (i + 1) % mod;<br>&#125;<br><br>int main()<br>&#123;<br>#ifndef ONLINE_JUDGE<br>_FILE(&quot;oattypecountering&quot;);<br>#endif<br><br>    int T; cin &gt;&gt; T;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    if (n &lt; m) swap(n, m);<br>    init(n + m);<br><br>    for (int i = 1; i &lt;= m; ++i)<br>        ans = (ans + path(i, i) * path(n - i, m - i) % mod) % mod;<br>    ans = (ans * invx(path(n, m)) % mod * invx(2) % mod + n) % mod;<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>考试</category>
      
      <category>CSP2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>状压dp</tag>
      
      <tag>期望dp</tag>
      
      <tag>博弈论</tag>
      
      <tag>期望</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UVA10559 方块消除 Blocks - 区间dp</title>
    <link href="/2019/10/04/UVA10559-%E6%96%B9%E5%9D%97%E6%B6%88%E9%99%A4-Blocks%EF%BC%88%E5%8C%BA%E9%97%B4dp%EF%BC%89/"/>
    <url>/2019/10/04/UVA10559-%E6%96%B9%E5%9D%97%E6%B6%88%E9%99%A4-Blocks%EF%BC%88%E5%8C%BA%E9%97%B4dp%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>一道区间dp好题，在GZY的ppt里，同时在洛谷题解里看见了Itst orz。</p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>有n个带有颜色的方块，没消除一段长度为 $x$ 的连续的相同颜色的方块可以得到 $x^2$ 的分数，让你用一种最优的顺序消除所有方块使得得分最多。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>一开始用的常规操作，设 $f_{i,j}$ 表示区间 $[i,j]$ 的最大得分，然后发现转移的时候很麻烦，此时瞄了一下题解，发现神奇的设状态方法：</p><span id="more"></span><p>$f_{i,j,k}$ 表示区间 $[i,j]$ 且右边有 $k$ 个和 $j$ 颜色相同的方块，合并所有这些方块的最大得分。</p><p>考虑转移，有两种情况，一是把最后 $k+1$ 个方块一起消掉，此时</p><p>$$f_{i,j,k}&#x3D;f_{i,j-1,0}+(k+1)^2$$</p><p>二是在区间 $[i,j-1]$ 之间选一个与 $j$ 颜色相同的方块 $p$ ，将 $[p+1,j-1]$ 消掉，使得 $p$ 和 $j$ 相邻，再消掉全部，此时</p><p>$$f_{i,j,k}&#x3D;f_{p+1,j-1,0}+f_{i,p,k+1}$$</p><p>最后，就是要注意转移时的顺序， $i$ 应该从大到小枚举，因为是从右边转移到左边。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _FILE(x) freopen(x<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin); freopen(x<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">200</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, a[maxn], f[maxn][maxn][maxn], num[maxn];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>_FILE(<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-type">int</span> T, kase = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        cin &gt;&gt; n;<br>        <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(f));<br>        <span class="hljs-built_in">memset</span>(num, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(num));<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>                <span class="hljs-keyword">if</span> (a[i] == a[j])<br>                    ++num[i];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= n; ++j) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = i; k &lt; j; ++k)<br>                    <span class="hljs-keyword">if</span> (a[j] == a[k]) &#123;<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> p = <span class="hljs-number">0</span>; p &lt;= num[j]; ++p)<br>                            f[i][j][p] = <span class="hljs-built_in">max</span>(f[i][j][p], f[k + <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + f[i][k][p + <span class="hljs-number">1</span>]);<br>                    &#125;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> p = <span class="hljs-number">0</span>; p &lt;= num[j]; ++p)<br>                    f[i][j][p] = <span class="hljs-built_in">max</span>(f[i][j][p], f[i][j - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + (p + <span class="hljs-number">1</span>) * (p + <span class="hljs-number">1</span>));<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d: %d\n&quot;</span>, ++kase, f[<span class="hljs-number">1</span>][n][<span class="hljs-number">0</span>]);<br>    &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>题解</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>区间dp</tag>
      
      <tag>UVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20191004 NOIP模拟考试day2题解</title>
    <link href="/2019/10/04/20191004-NOIP%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95day2%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/10/04/20191004-NOIP%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95day2%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="T1-冲锋"><a href="#T1-冲锋" class="headerlink" title="T1 冲锋"></a>T1 冲锋</h2><p>一道duliu模拟题，考场上没调出来，只拿了45pts，考试的时候觉得把error写成函数会比较方便，看了lsy的代码后发现判断error直接main函数里if就好。</p><p>下午把error搬到main函数里来了，就一遍过了。。。</p><p>还是要加强代码实现能力。</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">&gt; File Name: charge_AC.cpp</span><br><span class="hljs-comment">&gt; Author: kkkstra</span><br><span class="hljs-comment">&gt; Mail: snewt986@gmail.com</span><br><span class="hljs-comment">&gt; Created Time: Fri 04 Oct 2019 02:15:48 PM CST</span><br><span class="hljs-comment"> ************************************************************************/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _FILE(x) freopen(x<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin); freopen(x<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> bel, x, y, hp, atk, dis, range, type, id;<br>&#125; a[<span class="hljs-number">110</span>];<br><span class="hljs-type">int</span> id[<span class="hljs-number">5</span>], g[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>], dead[<span class="hljs-number">5</span>], vis[<span class="hljs-number">110</span>][<span class="hljs-number">2</span>], num[<span class="hljs-number">5</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">out</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x == <span class="hljs-number">1</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Error: You Are Dead!&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x == <span class="hljs-number">2</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Error: No Chess There!&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x == <span class="hljs-number">3</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Error: The Chess Doesn&#x27;t Belong To You!&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x == <span class="hljs-number">4</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Error: Cannot Operate Twice!&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x == <span class="hljs-number">5</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Error: Out Of Range!&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x == <span class="hljs-number">6</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Error: Invalid Target!&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x == <span class="hljs-number">7</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Successful Move!&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>_FILE(<span class="hljs-string">&quot;charge&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-type">int</span> bel, x, y, hp, atk, dis, range, type;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d%d%d%d%d&quot;</span>, &amp;bel, &amp;x, &amp;y, &amp;hp, &amp;atk, &amp;dis, &amp;range, &amp;type);<br>        a[i] = &#123; bel, x, y, hp, atk, dis, range, type, ++id[bel] &#125;;<br>        g[x][y] = i; ++num[bel];<br>    &#125;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-type">int</span> now = <span class="hljs-number">1</span>, alive = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-type">char</span> s[<span class="hljs-number">10</span>];<br>        <span class="hljs-type">int</span> op, x1, y1, x2, y2;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br><br>        <span class="hljs-keyword">if</span> (s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;E&#x27;</span>) op = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;M&#x27;</span>) op = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;A&#x27;</span>) op = <span class="hljs-number">2</span>;<br><br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>            <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(vis));<br>            now = now % <span class="hljs-number">4</span> + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);<br>            <span class="hljs-keyword">if</span> (dead[now]) &#123; <span class="hljs-built_in">out</span>(<span class="hljs-number">1</span>); <span class="hljs-keyword">continue</span>; &#125;<br>            <span class="hljs-keyword">if</span> (!g[x1][y1]) &#123; <span class="hljs-built_in">out</span>(<span class="hljs-number">2</span>); <span class="hljs-keyword">continue</span>; &#125;<br>            <span class="hljs-keyword">if</span> (a[g[x1][y1]].bel != now) &#123; <span class="hljs-built_in">out</span>(<span class="hljs-number">3</span>); <span class="hljs-keyword">continue</span>; &#125;<br>            <span class="hljs-keyword">if</span> (vis[g[x1][y1]][op]) &#123; <span class="hljs-built_in">out</span>(<span class="hljs-number">4</span>); <span class="hljs-keyword">continue</span>; &#125;<br><br>            <span class="hljs-type">int</span> dis = <span class="hljs-built_in">abs</span>(x1 - x2) + <span class="hljs-built_in">abs</span>(y1 - y2);<br>            <span class="hljs-type">int</span> &amp;cur = g[x1][y1];<br>            <span class="hljs-type">int</span> &amp;nxt = g[x2][y2];<br>            <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">if</span> (dis &gt; a[cur].dis) &#123; <span class="hljs-built_in">out</span>(<span class="hljs-number">5</span>); <span class="hljs-keyword">continue</span>; &#125;<br>                <span class="hljs-keyword">if</span> (nxt || (x1 == x2 &amp;&amp; y1 == y2)) &#123; <span class="hljs-built_in">out</span>(<span class="hljs-number">6</span>); <span class="hljs-keyword">continue</span>; &#125;<br>                <span class="hljs-built_in">out</span>(<span class="hljs-number">7</span>); ++vis[cur][op];<br>                a[cur].x = x2, a[cur].y = y2;<br>                nxt = cur;<br>                cur = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">if</span> (dis &gt; a[cur].range) &#123; <span class="hljs-built_in">out</span>(<span class="hljs-number">5</span>); <span class="hljs-keyword">continue</span>; &#125;<br>                <span class="hljs-keyword">if</span> (!nxt) &#123; <span class="hljs-built_in">out</span>(<span class="hljs-number">6</span>); <span class="hljs-keyword">continue</span>; &#125;<br>                <span class="hljs-built_in">out</span>(<span class="hljs-number">7</span>); ++vis[cur][op];<br>                <span class="hljs-keyword">if</span> (a[cur].type == <span class="hljs-number">4</span>) a[nxt].hp += a[cur].atk;<br>                <span class="hljs-keyword">else</span> a[nxt].hp -= a[cur].atk;<br>                <span class="hljs-type">int</span> t = nxt;<br>                <span class="hljs-type">int</span> enemy = a[t].bel;<br>                <span class="hljs-keyword">if</span> (a[nxt].hp &lt;= <span class="hljs-number">0</span>) &#123;<br>                    a[nxt].x = <span class="hljs-number">0</span>, a[nxt].y = <span class="hljs-number">0</span>;<br>                    nxt = <span class="hljs-number">0</span>; --num[enemy];<br>                    <span class="hljs-keyword">if</span> (a[t].type == <span class="hljs-number">1</span> || num[enemy] == <span class="hljs-number">0</span>) &#123;<br>                        dead[enemy] = <span class="hljs-number">1</span>;<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">14</span>; ++i)<br>                            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">14</span>; ++j)<br>                                <span class="hljs-keyword">if</span> (a[g[i][j]].bel == enemy) &#123;<br>                                    a[g[i][j]].x = a[g[i][j]].y = <span class="hljs-number">0</span>;<br>                                    g[i][j] = <span class="hljs-number">0</span>;<br>                                &#125;<br>                        --alive;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (alive == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span>; ++i)<br>            <span class="hljs-keyword">if</span> (!dead[i]) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d Wins This Game.\n&quot;</span>, i);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The Game Will Continue.\n&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">14</span>; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">14</span>; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (!g[i][j])<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;00&quot;</span>);<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>, a[g[i][j]].bel, a[g[i][j]].id + <span class="hljs-string">&#x27;A&#x27;</span> - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (j != <span class="hljs-number">14</span>)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T2-明灯"><a href="#T2-明灯" class="headerlink" title="T2 明灯"></a>T2 明灯</h2><p>感觉还是考场策略的问题，明明这道题比T1好写的多，但是当时一方面觉得d2t2可能不会太简单，另一方面觉得T1的模拟怎么也能写出来，于是一直在调T1，T2写了个 $O(n^2)$ 算法就草草了事。不过好在n方水了90分啊哈哈哈，只有一个点T了是1030ms，时限开的1024ms。</p><p>一开始写的区间dp，然后发现不用dp，直接暴力枚举中间的端点往两边找就行，然后一考完就发现直接扫一遍就行。</p><p>实际上只要把每一段相邻两位不同的优美区间长度求出来，然后求一下连续三个区间的最长长度就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">&gt; File Name: lamp_AC.cpp</span><br><span class="hljs-comment">&gt; Author: kkkstra</span><br><span class="hljs-comment">&gt; Mail: snewt986@gmail.com</span><br><span class="hljs-comment">&gt; Created Time: Fri 04 Oct 2019 04:17:46 PM CST</span><br><span class="hljs-comment"> ************************************************************************/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _FILE(x) freopen(x<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin); freopen(x<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rg register</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">100000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-type">int</span> f = <span class="hljs-number">1</span>, x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-type">int</span> n, a[maxn], b[maxn], m;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>_FILE(<span class="hljs-string">&quot;lamp&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        <span class="hljs-keyword">if</span> (a[i] != a[i - <span class="hljs-number">1</span>]) ++len;<br>        <span class="hljs-keyword">else</span> &#123;<br>            b[++m] = len;<br>            len = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    b[++m] = len;<br>    <span class="hljs-comment">// for (int i = 1; i &lt;= m; ++i)</span><br>        <span class="hljs-comment">// printf(&quot;%d &quot;, b[i]);</span><br>    <span class="hljs-comment">// puts(&quot;&quot;);</span><br>    <span class="hljs-keyword">if</span> (m == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, b[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (m == <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, b[<span class="hljs-number">1</span>] + b[<span class="hljs-number">2</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (m &gt;= <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">3</span>; i &lt;= m; ++i)<br>            ans = <span class="hljs-built_in">max</span>(ans, b[i] + b[i - <span class="hljs-number">1</span>] + b[i - <span class="hljs-number">2</span>]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T3-徘徊"><a href="#T3-徘徊" class="headerlink" title="T3 徘徊"></a>T3 徘徊</h2><p>首先可以发现只要放一个石头就可以，其次石头的位置一定在 $[-x,-1]$ 之间都是合法的，考虑怎么找到这个 $-x$ 。</p><p>先将路径用平面直角坐标系表示出来，可以发现当放石头的位置向下移动的时候，前面一段的高度不变，只有后面一段在不断下降。而石头的位置向下，相当于前一段的位置向上，所以只要从左到右扫一遍，维护一下到当前位置为止时的最大值，遇到连续的0时最大值mx加一，直到mx大于 $pos[n]$ ，就得到了答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">&gt; File Name: wander_AC.cpp</span><br><span class="hljs-comment">&gt; Author: kkkstra</span><br><span class="hljs-comment">&gt; Mail: snewt986@gmail.com</span><br><span class="hljs-comment">&gt; Created Time: Fri 04 Oct 2019 06:56:25 PM CST</span><br><span class="hljs-comment"> ************************************************************************/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _FILE(x) freopen(x<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin); freopen(x<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rg register</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1000000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>(); <span class="hljs-type">int</span> f = <span class="hljs-number">1</span>, x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>(); &#125;<br><span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-type">char</span> s[maxn];<br><span class="hljs-type">int</span> n, a[maxn], pos[maxn];<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> minx)</span> </span>&#123;<br>    <span class="hljs-type">int</span> maxx = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        pos[i] = pos[i - <span class="hljs-number">1</span>] + a[i];<br>        <span class="hljs-keyword">if</span> (pos[i] &lt;= minx)<br>            pos[i] = minx + <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// printf(&quot;%d &quot;, pos[i]);</span><br>        <span class="hljs-keyword">if</span> (i != n)<br>            maxx = <span class="hljs-built_in">max</span>(maxx, pos[i]);<br>    &#125;<br>    <span class="hljs-comment">// puts(&quot;&quot;);</span><br>    <span class="hljs-comment">// printf(&quot;%d %d\n&quot;, maxx, pos[n]);</span><br>    <span class="hljs-keyword">return</span> pos[n] &gt; maxx;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>_FILE(<span class="hljs-string">&quot;wander&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);<br>    n = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;1&#x27;</span>) a[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> a[i] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span> (a[n] == <span class="hljs-number">-1</span>) <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        a[i] = -a[i];<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(-INF)) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">check</span>(<span class="hljs-number">-1</span>)) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    pos[<span class="hljs-number">0</span>] = -INF;<br>    <span class="hljs-type">int</span> mx = <span class="hljs-number">0</span>, ans = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (pos[i] == pos[i - <span class="hljs-number">1</span>]) ++mx, --ans;<br>        mx = <span class="hljs-built_in">max</span>(mx, pos[i]);<br>        <span class="hljs-keyword">if</span> (mx &gt;= pos[n]) <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, -ans - <span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
      <category>考试</category>
      
      <category>CSP2019</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
      <tag>枚举</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
